{"version":3,"sources":["helpers/networkFee.ts","hooks/useNetworkFee.ts","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","hooks/useTxTracker.ts","views/Upgrade/Upgrade.style.ts","views/Upgrade/Upgrade.tsx","views/Upgrade/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useNetworkFee","inputAsset","outputAsset","useApp","useMidgard","pools","inboundFee","useMemo","gasRate","L1Chain","NetworkFee","getNetworkFeeByAsset","asset","direction","outboundFee","totalFee","outboundFeeInSendAsset","AssetAmount","Amount","fromAssetAmount","totalPriceIn","price","decimal","eq","add","totalFeeInUSD","Asset","USD","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","useTxTracker","addNewTxTracker","updateTxTracker","clearTxTrackers","processSubmittedTx","submitTransaction","useCallback","type","submitTx","uuidv4","status","TxTrackerStatus","Submitting","action","refunded","pollTransaction","txTracker","Pending","setTxFailed","Failed","Container","styled","Panel","palette","ContentPanel","div","media","sm","FormItem","ConfirmModalContent","Label","attrs","weight","ConfirmButtonContainer","UpgradePanel","runeToUpgrade","wallet","useState","selectedAsset","setSelectedAsset","upgradeAmount","setUpgradeAmount","percent","setPercent","visibleConfirmModal","setVisibleConfirmModal","recipientThor","setRecipientThor","thorchainAddr","multichain","getWalletAddressByChain","assetBalance","getAssetBalance","amount","useEffect","address","handleSelectAsset","selected","handleChangeUpgradeAmount","gt","mul","assetAmount","toNumber","handleChangePercent","p","newAmount","handleSelectMax","handleConfirmUpgrade","a","runeAmount","trackId","TxTrackerType","Switch","inAssets","toSignificant","outAssets","RUNE","recipient","upgrade","txHash","txID","submitDate","Date","Notification","message","duration","console","log","handleCancelUpgrade","handleUpgrade","validateAddress","description","renderConfirmModalContent","title","ticker","toUpperCase","toCurrencyFormat","tooltip","TX_FEE_TOOLTIP_LABEL","truncateAddress","content","assets","selectDisabled","balance","onChange","onSelect","onMax","value","withLabel","chainAddr","onAddressChange","onClick","error","visible","onOk","onCancel","inputAssets","UpgradeView","useWallet","getRuneToUpgrade","walletConnected","hasWalletConnected","Upgrade"],"mappings":"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","file":"static/js/5.caca4ca0.chunk.js","sourcesContent":["import { FeeOptionKey } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOptionKey, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOptionKey\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useMemo } from 'react'\n\nimport { Asset, Amount, AssetAmount, NetworkFee, Pool } from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport { getGasRateByChain, getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useNetworkFee = ({\n  inputAsset,\n  outputAsset,\n}: {\n  inputAsset: Asset\n  outputAsset?: Asset\n}) => {\n  const { feeOptionType } = useApp()\n  const { inboundData, pools } = useMidgard()\n\n  const inboundFee = useMemo(() => {\n    // get inbound gasRate with fee option\n\n    const gasRate = getGasRateByFeeOption({\n      inboundData,\n      chain: inputAsset.L1Chain,\n      feeOptionType,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: inputAsset,\n      gasRate,\n      direction: 'inbound',\n    })\n\n    return networkFee\n  }, [inputAsset, inboundData, feeOptionType])\n\n  const outboundFee = useMemo(() => {\n    if (!outputAsset) return null\n\n    const gasRate = getGasRateByChain({\n      inboundData,\n      chain: outputAsset.L1Chain,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: outputAsset,\n      gasRate,\n      direction: 'outbound',\n    })\n\n    return networkFee\n  }, [outputAsset, inboundData])\n\n  const totalFee = useMemo(() => {\n    if (!outboundFee) return inboundFee\n\n    const outboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        outboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n\n    if (inboundFee.asset.eq(inputAsset)) {\n      return inboundFee.add(outboundFeeInSendAsset)\n    }\n\n    const inboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        inboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n    return inboundFeeInSendAsset.add(outboundFeeInSendAsset)\n  }, [inputAsset, inboundFee, outboundFee, pools])\n\n  const totalFeeInUSD = useMemo(\n    () => totalFee.totalPriceIn(Asset.USD(), pools),\n    [totalFee, pools],\n  )\n\n  return {\n    totalFee,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n  }\n}\n\nexport const getSumAmountInUSD = (\n  assetAmount1: AssetAmount | null,\n  assetAmount2: AssetAmount | null,\n  pools: Pool[],\n) => {\n  const assetAmount1InUSD = assetAmount1?.totalPriceIn(Asset.USD(), pools)\n  const assetAmount2InUSD = assetAmount2?.totalPriceIn(Asset.USD(), pools)\n\n  if (assetAmount1 === null && assetAmount2InUSD)\n    return assetAmount2InUSD.toCurrencyFormat()\n  if (assetAmount2 === null && assetAmount1InUSD)\n    return assetAmount1InUSD.toCurrencyFormat()\n\n  if (assetAmount1InUSD && assetAmount2InUSD) {\n    const sum = assetAmount1InUSD.raw().plus(assetAmount2InUSD.raw())\n\n    return Amount.fromAssetAmount(sum, 8).toFixed(2)\n  }\n\n  return Amount.fromAssetAmount(0, 8).toFixed()\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { useCallback } from 'react'\n\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, SubmitTx, TxTrackerType } from 'redux/midgard/types'\n\n/**\n * 1. send transaction and get txHash\n * 2. poll midgard action API and get \"in\" tx with the same txHash\n * 3. check action status (success, pending)\n * 4. check action type and match with send tx type\n *    (if action type is not \"refund\", action type should be matched to the send type)\n */\n\nexport const useTxTracker = () => {\n  const {\n    addNewTxTracker,\n    updateTxTracker,\n    clearTxTrackers,\n    processSubmittedTx,\n  } = useMidgard()\n\n  // confirm and submit a transaction\n  const submitTransaction = useCallback(\n    ({\n      type,\n      submitTx,\n    }: {\n      type: TxTrackerType\n      submitTx: SubmitTx\n    }): string => {\n      const uuid = uuidv4()\n\n      addNewTxTracker({\n        uuid,\n        type,\n        status: TxTrackerStatus.Submitting,\n        submitTx,\n        action: null,\n        refunded: null,\n      })\n\n      return uuid\n    },\n    [addNewTxTracker],\n  )\n\n  // start polling a transaction\n  const pollTransaction = useCallback(\n    ({\n      uuid,\n      submitTx,\n      type,\n    }: {\n      uuid: string\n      submitTx: SubmitTx\n      type: TxTrackerType\n    }) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Pending,\n          submitTx,\n        },\n      })\n      processSubmittedTx({ submitTx, type })\n    },\n    [updateTxTracker, processSubmittedTx],\n  )\n\n  // start polling a transaction\n  const setTxFailed = useCallback(\n    (uuid: string) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Failed,\n        },\n      })\n    },\n    [updateTxTracker],\n  )\n\n  return {\n    submitTransaction,\n    pollTransaction,\n    clearTxTrackers,\n    setTxFailed,\n  }\n}\n","import { Label, Panel } from 'components'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nimport { media } from 'helpers/style'\n\nexport const Container = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  background: ${palette('background', 0)};\n  margin-left: auto;\n  margin-right: auto;\n  padding-top: 0px;\n\n  border-radius: 14px;\n  border: 1px solid ${palette('gray', 0)};\n`\n\nexport const ContentPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  padding: 16px 8px 8px 8px;\n\n  ${media.sm`\n    padding: 16px 12px 4px 12px;\n  `}\n`\n\nexport const PoolSelect = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  padding: 8px 16px;\n`\n\nexport const FormItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 8px 0;\n`\n\nexport const FormLabel = styled(Label).attrs({\n  weight: 'bold',\n})`\n  margin-bottom: 8px;\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n\nexport const MemoTypes = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: 130px;\n`\n\nexport const ConfirmButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 0 2%;\n\n  margin-top: 14px;\n\n  button {\n    flex: 1;\n  }\n`\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\n\nimport {\n  ContentTitle,\n  Helmet,\n  AddressSelectCard,\n  AssetInputCard,\n  Slider,\n  FancyButton,\n  ConfirmModal,\n  Information,\n  Label,\n  Notification,\n} from 'components'\nimport {\n  Amount,\n  Asset,\n  getAssetBalance,\n  AssetAmount,\n  Wallet,\n  getRuneToUpgrade,\n  hasWalletConnected,\n} from 'multichain-sdk'\n\nimport { TxTrackerType } from 'redux/midgard/types'\nimport { useWallet } from 'redux/wallet/hooks'\n\nimport { useNetworkFee } from 'hooks/useNetworkFee'\nimport { useTxTracker } from 'hooks/useTxTracker'\n\nimport { multichain } from 'services/multichain'\n\nimport { truncateAddress } from 'helpers/string'\n\nimport { TX_FEE_TOOLTIP_LABEL } from 'settings/constants'\n\nimport * as Styled from './Upgrade.style'\n\nconst UpgradeView = () => {\n  const { wallet } = useWallet()\n\n  const runeToUpgrade = useMemo(() => getRuneToUpgrade(wallet), [wallet])\n\n  const walletConnected = useMemo(\n    () =>\n      runeToUpgrade &&\n      hasWalletConnected({ wallet, inputAssets: runeToUpgrade }),\n    [wallet, runeToUpgrade],\n  )\n\n  if (!wallet || !walletConnected) {\n    return (\n      <Styled.Container>\n        <Label>Please connect a wallet.</Label>\n      </Styled.Container>\n    )\n  }\n\n  if (!runeToUpgrade || runeToUpgrade.length === 0) {\n    return (\n      <Styled.Container>\n        <Label>You don't have BEP2 or ERC20 RUNE to upgrade.</Label>\n      </Styled.Container>\n    )\n  }\n\n  return <UpgradePanel runeToUpgrade={runeToUpgrade} wallet={wallet} />\n}\n\nconst UpgradePanel = ({\n  runeToUpgrade,\n  wallet,\n}: {\n  runeToUpgrade: Asset[]\n  wallet: Wallet\n}) => {\n  const { submitTransaction, pollTransaction, setTxFailed } = useTxTracker()\n\n  const [selectedAsset, setSelectedAsset] = useState<Asset>(runeToUpgrade[0])\n\n  const [upgradeAmount, setUpgradeAmount] = useState<Amount>(\n    Amount.fromAssetAmount(0, 8),\n  )\n  const [percent, setPercent] = useState(0)\n\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n\n  const [recipientThor, setRecipientThor] = useState('')\n\n  const thorchainAddr = multichain.getWalletAddressByChain('THOR') || ''\n\n  const assetBalance: Amount = useMemo(() => {\n    if (wallet) {\n      return getAssetBalance(selectedAsset, wallet).amount\n    }\n    return Amount.fromAssetAmount(0, 8)\n  }, [selectedAsset, wallet])\n\n  const { inboundFee } = useNetworkFee({\n    inputAsset: selectedAsset,\n  })\n\n  useEffect(() => {\n    const address = multichain.getWalletAddressByChain('THOR')\n    setRecipientThor(address || '')\n  }, [])\n\n  const handleSelectAsset = useCallback((selected: Asset) => {\n    setSelectedAsset(selected)\n  }, [])\n\n  const handleChangeUpgradeAmount = useCallback(\n    (amount: Amount) => {\n      if (amount.gt(assetBalance)) {\n        setUpgradeAmount(assetBalance)\n        setPercent(100)\n      } else {\n        setUpgradeAmount(amount)\n        setPercent(amount.div(assetBalance).mul(100).assetAmount.toNumber())\n      }\n    },\n    [assetBalance],\n  )\n\n  const handleChangePercent = useCallback(\n    (p: number) => {\n      setPercent(p)\n      const newAmount = assetBalance.mul(p).div(100)\n      setUpgradeAmount(newAmount)\n    },\n    [assetBalance],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    handleChangePercent(100)\n  }, [handleChangePercent])\n\n  const handleConfirmUpgrade = useCallback(async () => {\n    setVisibleConfirmModal(false)\n\n    if (selectedAsset && recipientThor) {\n      const runeAmount = new AssetAmount(selectedAsset, upgradeAmount)\n\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: TxTrackerType.Switch,\n        submitTx: {\n          inAssets: [\n            {\n              asset: selectedAsset.toString(),\n              amount: upgradeAmount.toSignificant(6),\n            },\n          ],\n          outAssets: [\n            {\n              asset: Asset.RUNE().toString(),\n              amount: upgradeAmount.toSignificant(6),\n            },\n          ],\n          recipient: recipientThor,\n        },\n      })\n\n      try {\n        const txHash = await multichain.upgrade({\n          runeAmount,\n          recipient: recipientThor,\n        })\n\n        // start polling\n        pollTransaction({\n          type: TxTrackerType.Switch,\n          uuid: trackId,\n          submitTx: {\n            inAssets: [\n              {\n                asset: selectedAsset.toString(),\n                amount: upgradeAmount.toSignificant(6),\n              },\n            ],\n            outAssets: [\n              {\n                asset: Asset.RUNE().toString(),\n                amount: upgradeAmount.toSignificant(6),\n              },\n            ],\n            txID: txHash,\n            submitDate: new Date(),\n            recipient: recipientThor,\n          },\n        })\n      } catch (error) {\n        setTxFailed(trackId)\n\n        Notification({\n          type: 'error',\n          message: 'Submit Transaction Failed.',\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [\n    selectedAsset,\n    upgradeAmount,\n    submitTransaction,\n    pollTransaction,\n    recipientThor,\n    setTxFailed,\n  ])\n\n  const handleCancelUpgrade = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  const handleUpgrade = useCallback(() => {\n    if (!recipientThor) {\n      Notification({\n        type: 'info',\n        message: 'You have to connect wallet for Thorchain.',\n      })\n      return\n    }\n    if (\n      !multichain.validateAddress({ chain: 'THOR', address: recipientThor })\n    ) {\n      Notification({\n        type: 'error',\n        message: 'Invalid Recipient Address',\n        description: 'Recipient address should be a valid address.',\n      })\n      return\n    }\n    setVisibleConfirmModal(true)\n  }, [recipientThor])\n\n  const renderConfirmModalContent = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title=\"Upgrade\"\n          description={`${selectedAsset.ticker.toUpperCase()} (${selectedAsset.type.toUpperCase()})`}\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <br />\n        <Information\n          title=\"Recipient Address\"\n          description={truncateAddress(recipientThor)}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [inboundFee, selectedAsset, recipientThor])\n\n  const title = useMemo(() => `Upgrade ${selectedAsset.chain} RUNE`, [\n    selectedAsset,\n  ])\n\n  return (\n    <Styled.Container>\n      <Helmet title={title} content={title} />\n      <ContentTitle>{title}</ContentTitle>\n      <Styled.ContentPanel>\n        <AssetInputCard\n          title=\"upgrade\"\n          asset={selectedAsset}\n          assets={runeToUpgrade}\n          selectDisabled={runeToUpgrade.length !== 2}\n          amount={upgradeAmount}\n          balance={assetBalance}\n          onChange={handleChangeUpgradeAmount}\n          onSelect={handleSelectAsset}\n          onMax={handleSelectMax}\n          wallet={wallet || undefined}\n        />\n        <Slider value={percent} onChange={handleChangePercent} withLabel />\n\n        <Styled.FormItem>\n          <Information\n            title=\"Transaction Fee\"\n            description={inboundFee.toCurrencyFormat()}\n            tooltip={TX_FEE_TOOLTIP_LABEL}\n          />\n        </Styled.FormItem>\n\n        <AddressSelectCard\n          title=\"Recipient Address\"\n          address={recipientThor}\n          chain=\"THOR\"\n          chainAddr={thorchainAddr}\n          onAddressChange={setRecipientThor}\n        />\n\n        <Styled.ConfirmButtonContainer>\n          <FancyButton onClick={handleUpgrade} error={false}>\n            Upgrade\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      </Styled.ContentPanel>\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleConfirmUpgrade}\n        onCancel={handleCancelUpgrade}\n        inputAssets={[selectedAsset]}\n      >\n        {renderConfirmModalContent}\n      </ConfirmModal>\n    </Styled.Container>\n  )\n}\n\nexport default UpgradeView\n","import Upgrade from './Upgrade'\n\nexport default Upgrade\n"],"sourceRoot":""}