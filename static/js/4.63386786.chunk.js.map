{"version":3,"sources":["helpers/networkFee.ts","hooks/useNetworkFee.ts","hooks/useBalance.ts","views/Send/Send.tsx","views/Send/Send.style.ts","views/Send/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useNetworkFee","inputAsset","outputAsset","useApp","useMidgard","pools","inboundFee","useMemo","gasRate","L1Chain","NetworkFee","getNetworkFeeByAsset","asset","direction","outboundFee","totalFee","outboundFeeInSendAsset","AssetAmount","Amount","fromAssetAmount","totalPriceIn","price","decimal","eq","add","totalFeeInUSD","Asset","USD","useBalance","dispatch","useDispatch","useSelector","state","app","wallet","midgard","reloadBalanceByChain","useCallback","walletActions","reloadAllBalance","getMaxBalance","balance","getAssetBalance","amount","maxSpendableAmount","isGasAsset","sub","mul","gt","SendMode","Container","styled","Panel","palette","ContentPanel","div","media","sm","PoolSelect","FormItem","FormLabel","Label","attrs","weight","ConfirmModalContent","MemoTypes","ConfirmButtonContainer","Send","sendAsset","history","useHistory","maxSpendableBalance","poolAssets","assets","map","pool","push","RUNE","useState","NORMAL","sendMode","setSendMode","isExpertMode","EXPERT","sendAmount","setSendAmount","percent","setPercent","recipientAddress","setRecipientAddress","poolAddress","setPoolAddress","recipient","memo","setMemo","visibleConfirmModal","setVisibleConfirmModal","setOutputAsset","walletAssets","getWalletAssets","assetBalance","useEffect","a","multichain","getInboundDataByChain","poolAddr","address","fetchPoolAddress","handleSelectAsset","selected","getSendRoute","handleSelectOutputAsset","poolAsset","handleChangeSendAmount","assetAmount","toNumber","handleChangePercent","p","newAmount","handleSelectMax","handleChangeRecipient","e","addr","target","value","handleChangePoolAddress","handleChangeMemo","handleConfirmSend","send","txHash","txURL","getExplorerTxUrl","Notification","type","message","description","btn","href","rel","duration","toString","handleCancelSend","handleSend","validateAddress","handleSelectDepositMemo","Memo","depositMemo","handleSelectSwapMemo","getWalletAddressByChain","swapMemo","renderConfirmModalContent","title","toSignificant","ticker","toUpperCase","substr","toCurrencyFormat","tooltip","content","justifyContent","size","color","onChange","onSelect","onMax","undefined","withLabel","align","typevalue","sizevalue","placeholder","onClick","error","visible","onOk","onCancel","inputAssets","SendView","useParams","useWallet","setSendAsset","assetObj","decodeFromURL","setDecimal","getSendAsset","walletConnected","hasWalletConnected"],"mappings":"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","file":"static/js/4.63386786.chunk.js","sourcesContent":["import { FeeOptionKey } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOptionKey, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOptionKey\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useMemo } from 'react'\n\nimport { Asset, Amount, AssetAmount, NetworkFee, Pool } from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport { getGasRateByChain, getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useNetworkFee = ({\n  inputAsset,\n  outputAsset,\n}: {\n  inputAsset: Asset\n  outputAsset?: Asset\n}) => {\n  const { feeOptionType } = useApp()\n  const { inboundData, pools } = useMidgard()\n\n  const inboundFee = useMemo(() => {\n    // get inbound gasRate with fee option\n\n    const gasRate = getGasRateByFeeOption({\n      inboundData,\n      chain: inputAsset.L1Chain,\n      feeOptionType,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: inputAsset,\n      gasRate,\n      direction: 'inbound',\n    })\n\n    return networkFee\n  }, [inputAsset, inboundData, feeOptionType])\n\n  const outboundFee = useMemo(() => {\n    if (!outputAsset) return null\n\n    const gasRate = getGasRateByChain({\n      inboundData,\n      chain: outputAsset.L1Chain,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: outputAsset,\n      gasRate,\n      direction: 'outbound',\n    })\n\n    return networkFee\n  }, [outputAsset, inboundData])\n\n  const totalFee = useMemo(() => {\n    if (!outboundFee) return inboundFee\n\n    const outboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        outboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n\n    if (inboundFee.asset.eq(inputAsset)) {\n      return inboundFee.add(outboundFeeInSendAsset)\n    }\n\n    const inboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        inboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n    return inboundFeeInSendAsset.add(outboundFeeInSendAsset)\n  }, [inputAsset, inboundFee, outboundFee, pools])\n\n  const totalFeeInUSD = useMemo(\n    () => totalFee.totalPriceIn(Asset.USD(), pools),\n    [totalFee, pools],\n  )\n\n  return {\n    totalFee,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n  }\n}\n\nexport const getSumAmountInUSD = (\n  assetAmount1: AssetAmount | null,\n  assetAmount2: AssetAmount | null,\n  pools: Pool[],\n) => {\n  const assetAmount1InUSD = assetAmount1?.totalPriceIn(Asset.USD(), pools)\n  const assetAmount2InUSD = assetAmount2?.totalPriceIn(Asset.USD(), pools)\n\n  if (assetAmount1 === null && assetAmount2InUSD)\n    return assetAmount2InUSD.toCurrencyFormat()\n  if (assetAmount2 === null && assetAmount1InUSD)\n    return assetAmount1InUSD.toCurrencyFormat()\n\n  if (assetAmount1InUSD && assetAmount2InUSD) {\n    const sum = assetAmount1InUSD.raw().plus(assetAmount2InUSD.raw())\n\n    return Amount.fromAssetAmount(sum, 8).toFixed(2)\n  }\n\n  return Amount.fromAssetAmount(0, 8).toFixed()\n}\n","import { useCallback } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Asset, Amount, getAssetBalance, NetworkFee } from 'multichain-sdk'\n\nimport { SupportedChain } from 'multichain-sdk/clients/types'\n\nimport { RootState } from 'redux/store'\nimport * as walletActions from 'redux/wallet/actions'\n\nimport { getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useBalance = () => {\n  const dispatch = useDispatch()\n  const { feeOptionType } = useSelector((state: RootState) => state.app)\n  const { wallet } = useSelector((state: RootState) => state.wallet)\n  const { inboundData } = useSelector((state: RootState) => state.midgard)\n\n  const reloadBalanceByChain = useCallback(\n    (chain: SupportedChain) => {\n      dispatch(walletActions.getWalletByChain(chain))\n    },\n    [dispatch],\n  )\n\n  const reloadAllBalance = useCallback(() => {\n    dispatch(walletActions.loadAllWallets())\n  }, [dispatch])\n\n  const getMaxBalance = useCallback(\n    (asset: Asset): Amount => {\n      if (!wallet?.[asset.L1Chain as SupportedChain]) {\n        // allow max amount for emulation if wallet is not connected\n        return Amount.fromAssetAmount(10 ** 8, 8)\n      }\n\n      // calculate inbound fee\n      const gasRate = getGasRateByFeeOption({\n        inboundData,\n        chain: asset.L1Chain,\n        feeOptionType,\n      })\n      const inboundFee = NetworkFee.getNetworkFeeByAsset({\n        asset,\n        gasRate,\n        direction: 'inbound',\n      })\n\n      const balance = getAssetBalance(asset, wallet).amount\n\n      /**\n       * if asset is used for gas, subtract the inbound gas fee from input amount\n       * else allow full amount\n       * Calc: max spendable amount = balance amount - 2 x gas fee(if send asset equals to gas asset)\n       */\n\n      const maxSpendableAmount = asset.isGasAsset()\n        ? balance.sub(inboundFee.mul(1.5).amount)\n        : balance\n\n      if (maxSpendableAmount.gt(0)) {\n        return maxSpendableAmount\n      }\n\n      return Amount.fromAssetAmount(0, asset.decimal)\n    },\n    [wallet, feeOptionType, inboundData],\n  )\n\n  return {\n    getMaxBalance,\n    reloadAllBalance,\n    reloadBalanceByChain,\n    wallet,\n  }\n}\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\n\nimport { useHistory, useParams } from 'react-router'\n\nimport {\n  ContentTitle,\n  Helmet,\n  AssetInputCard,\n  Slider,\n  Input,\n  FancyButton,\n  ConfirmModal,\n  Information,\n  Notification,\n  Button,\n  AssetSelect,\n  Label,\n  SettingsOverlay,\n} from 'components'\nimport {\n  getWalletAssets,\n  Amount,\n  Asset,\n  getAssetBalance,\n  AssetAmount,\n  Memo,\n  getWalletAddressByChain,\n  Wallet,\n  hasWalletConnected,\n} from 'multichain-sdk'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { useWallet } from 'redux/wallet/hooks'\n\nimport { useBalance } from 'hooks/useBalance'\nimport { useNetworkFee } from 'hooks/useNetworkFee'\n\nimport { multichain } from 'services/multichain'\n\nimport { getSendRoute } from 'settings/constants'\n\nimport * as Styled from './Send.style'\n\nenum SendMode {\n  NORMAL,\n  EXPERT,\n}\n\nconst SendView = () => {\n  const { asset } = useParams<{ asset: string }>()\n  const { wallet } = useWallet()\n\n  const [sendAsset, setSendAsset] = useState<Asset>()\n\n  useEffect(() => {\n    const getSendAsset = async () => {\n      const assetObj = Asset.decodeFromURL(asset)\n\n      if (assetObj) {\n        await assetObj.setDecimal()\n        setSendAsset(assetObj)\n      }\n    }\n\n    getSendAsset()\n  }, [asset])\n\n  const walletConnected = useMemo(\n    () => sendAsset && hasWalletConnected({ wallet, inputAssets: [sendAsset] }),\n    [wallet, sendAsset],\n  )\n\n  if (!sendAsset) {\n    return null\n  }\n\n  if (!wallet || !walletConnected) {\n    return (\n      <Styled.Container>\n        <Label>Please connect a wallet.</Label>\n      </Styled.Container>\n    )\n  }\n\n  return <Send sendAsset={sendAsset} wallet={wallet} />\n}\n\nconst Send = ({ sendAsset, wallet }: { sendAsset: Asset; wallet: Wallet }) => {\n  const history = useHistory()\n  const { pools } = useMidgard()\n  const { getMaxBalance } = useBalance()\n\n  const maxSpendableBalance: Amount = useMemo(() => getMaxBalance(sendAsset), [\n    sendAsset,\n    getMaxBalance,\n  ])\n\n  const { inboundFee, totalFeeInUSD } = useNetworkFee({ inputAsset: sendAsset })\n\n  const poolAssets = useMemo(() => {\n    const assets = pools.map((pool) => pool.asset)\n    assets.push(Asset.RUNE())\n\n    return assets\n  }, [pools])\n\n  const [sendMode, setSendMode] = useState(SendMode.NORMAL)\n  const isExpertMode = useMemo(() => sendMode === SendMode.EXPERT, [sendMode])\n\n  const [sendAmount, setSendAmount] = useState<Amount>(\n    Amount.fromAssetAmount(0, 8),\n  )\n  const [percent, setPercent] = useState(0)\n  const [recipientAddress, setRecipientAddress] = useState('')\n  const [poolAddress, setPoolAddress] = useState('')\n\n  const recipient = useMemo(\n    () => (isExpertMode ? poolAddress : recipientAddress),\n    [isExpertMode, poolAddress, recipientAddress],\n  )\n\n  const [memo, setMemo] = useState('')\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n\n  const [outputAsset, setOutputAsset] = useState<Asset>(sendAsset)\n\n  const walletAssets = useMemo(() => getWalletAssets(wallet), [wallet])\n  const assetBalance: Amount = useMemo(() => {\n    if (wallet) {\n      return getAssetBalance(sendAsset, wallet).amount\n    }\n    return Amount.fromAssetAmount(0, 8)\n  }, [sendAsset, wallet])\n\n  useEffect(() => {\n    const fetchPoolAddress = async () => {\n      const { address: poolAddr } = await multichain.getInboundDataByChain(\n        sendAsset.L1Chain,\n      )\n      setPoolAddress(poolAddr)\n    }\n\n    if (isExpertMode) {\n      fetchPoolAddress()\n    }\n  }, [isExpertMode, sendAsset])\n\n  const handleSelectAsset = useCallback(\n    (selected: Asset) => {\n      history.push(getSendRoute(selected))\n    },\n    [history],\n  )\n\n  const handleSelectOutputAsset = useCallback((poolAsset: Asset) => {\n    setOutputAsset(poolAsset)\n    setMemo('')\n  }, [])\n\n  const handleChangeSendAmount = useCallback(\n    (amount: Amount) => {\n      if (amount.gt(maxSpendableBalance)) {\n        setSendAmount(maxSpendableBalance)\n        setPercent(100)\n      } else {\n        setSendAmount(amount)\n        setPercent(\n          amount.div(maxSpendableBalance).mul(100).assetAmount.toNumber(),\n        )\n      }\n    },\n    [maxSpendableBalance],\n  )\n\n  const handleChangePercent = useCallback(\n    (p: number) => {\n      setPercent(p)\n      const newAmount = maxSpendableBalance.mul(p).div(100)\n      setSendAmount(newAmount)\n    },\n    [maxSpendableBalance],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    handleChangePercent(100)\n  }, [handleChangePercent])\n\n  const handleChangeRecipient = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const addr = e.target.value\n\n      if (addr === 'pool') {\n        setSendMode(SendMode.EXPERT)\n      } else {\n        setSendMode(SendMode.NORMAL)\n        setPoolAddress('')\n      }\n      setRecipientAddress(addr)\n    },\n    [],\n  )\n\n  const handleChangePoolAddress = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const addr = e.target.value\n      setPoolAddress(addr)\n    },\n    [],\n  )\n\n  const handleChangeMemo = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setMemo(e.target.value)\n    },\n    [],\n  )\n\n  const handleConfirmSend = useCallback(async () => {\n    setVisibleConfirmModal(false)\n\n    if (sendAsset) {\n      const assetAmount = new AssetAmount(sendAsset, sendAmount)\n\n      try {\n        const txHash = await multichain.send({\n          assetAmount,\n          recipient,\n          memo,\n        })\n\n        const txURL = multichain.getExplorerTxUrl(sendAsset.L1Chain, txHash)\n\n        Notification({\n          type: 'open',\n          message: 'View Send Tx.',\n          description: 'Transaction sent successfully!',\n          btn: (\n            <a href={txURL} target=\"_blank\" rel=\"noopener noreferrer\">\n              View Transaction\n            </a>\n          ),\n          duration: 20,\n        })\n      } catch (error) {\n        Notification({\n          type: 'error',\n          message: 'Send Transaction Failed.',\n          description: error?.toString(),\n          duration: 20,\n        })\n      }\n    }\n  }, [sendAsset, sendAmount, recipient, memo])\n\n  const handleCancelSend = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  const handleSend = useCallback(() => {\n    if (\n      !isExpertMode &&\n      !multichain.validateAddress({\n        chain: sendAsset.L1Chain,\n        address: recipient,\n      })\n    ) {\n      Notification({\n        type: 'warning',\n        message: `Recipient Address is not valid ${sendAsset.L1Chain} Address, please check your address again.`,\n        duration: 20,\n      })\n    } else {\n      setVisibleConfirmModal(true)\n    }\n  }, [isExpertMode, sendAsset, recipient])\n\n  const handleSelectDepositMemo = useCallback(() => {\n    setMemo(Memo.depositMemo(sendAsset))\n  }, [sendAsset])\n\n  const handleSelectSwapMemo = useCallback(() => {\n    if (outputAsset) {\n      const address = getWalletAddressByChain(wallet, outputAsset.L1Chain) || ''\n      setMemo(Memo.swapMemo(outputAsset, address))\n    }\n  }, [outputAsset, wallet])\n\n  const renderConfirmModalContent = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title=\"From\"\n          description={`${sendAmount.toSignificant(\n            6,\n          )} ${sendAsset.ticker.toUpperCase()}`}\n        />\n        <Information\n          title=\"Recipient\"\n          description={`${recipientAddress.substr(\n            0,\n            3,\n          )}...${recipientAddress.substr(-3)}`}\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={`${inboundFee.toCurrencyFormat()} (${totalFeeInUSD.toCurrencyFormat(\n            2,\n          )})`}\n          tooltip=\"Gas fee to send the transaction, There's no extra charges from THORChain Protocol\"\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [sendAmount, inboundFee, sendAsset, totalFeeInUSD, recipientAddress])\n\n  const title = useMemo(() => `${sendAsset.ticker} (${sendAsset.type})`, [\n    sendAsset,\n  ])\n\n  return (\n    <Styled.Container>\n      <Helmet title={`From ${title}`} content={`From ${title}`} />\n      <ContentTitle justifyContent=\"space-between\">\n        <Label size=\"large\" weight=\"bold\" color=\"gold\">\n          From {title}\n        </Label>\n        <SettingsOverlay />\n      </ContentTitle>\n      <Styled.ContentPanel>\n        <AssetInputCard\n          title=\"From\"\n          asset={sendAsset}\n          assets={walletAssets}\n          amount={sendAmount}\n          balance={assetBalance}\n          onChange={handleChangeSendAmount}\n          onSelect={handleSelectAsset}\n          onMax={handleSelectMax}\n          wallet={wallet || undefined}\n        />\n        <Slider value={percent} onChange={handleChangePercent} withLabel />\n\n        {isExpertMode && (\n          <Styled.PoolSelect>\n            <Label size=\"big\" align=\"center\">\n              Output Asset\n            </Label>\n            <AssetSelect\n              asset={outputAsset}\n              assets={poolAssets}\n              onSelect={handleSelectOutputAsset}\n            />\n          </Styled.PoolSelect>\n        )}\n        <Styled.FormItem>\n          <Styled.FormLabel>Recipient</Styled.FormLabel>\n          <Input\n            typevalue=\"ghost\"\n            sizevalue=\"big\"\n            value={recipientAddress}\n            onChange={handleChangeRecipient}\n            placeholder=\"Recipient\"\n          />\n        </Styled.FormItem>\n\n        {isExpertMode && (\n          <Styled.FormItem>\n            <Styled.FormLabel>Pool Address</Styled.FormLabel>\n            <Input\n              typevalue=\"ghost\"\n              sizevalue=\"big\"\n              value={poolAddress}\n              onChange={handleChangePoolAddress}\n              placeholder=\"Pool Address\"\n            />\n          </Styled.FormItem>\n        )}\n\n        {isExpertMode && (\n          <Styled.FormItem>\n            <Styled.FormLabel>Select Memo Type</Styled.FormLabel>\n            <Styled.MemoTypes>\n              <Button\n                sizevalue=\"small\"\n                color=\"primary\"\n                typevalue=\"outline\"\n                onClick={handleSelectDepositMemo}\n              >\n                Deposit\n              </Button>\n              <Button\n                sizevalue=\"small\"\n                color=\"primary\"\n                typevalue=\"outline\"\n                onClick={handleSelectSwapMemo}\n              >\n                Swap\n              </Button>\n            </Styled.MemoTypes>\n          </Styled.FormItem>\n        )}\n        <Styled.FormItem>\n          <Styled.FormLabel>Memo</Styled.FormLabel>\n          <Input\n            typevalue=\"ghost\"\n            sizevalue=\"big\"\n            value={memo}\n            onChange={handleChangeMemo}\n            placeholder=\"Memo\"\n          />\n        </Styled.FormItem>\n\n        <Styled.FormItem>\n          <Information\n            title=\"Transaction Fee\"\n            description={`${inboundFee.toCurrencyFormat()} (${totalFeeInUSD.toCurrencyFormat(\n              2,\n            )})`}\n            tooltip=\"Gas fee to send the transaction, There's no extra charges from THORChain Protocol\"\n          />\n        </Styled.FormItem>\n\n        <Styled.ConfirmButtonContainer>\n          <FancyButton onClick={handleSend} error={false}>\n            Send\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      </Styled.ContentPanel>\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleConfirmSend}\n        onCancel={handleCancelSend}\n        inputAssets={[sendAsset]}\n      >\n        {renderConfirmModalContent}\n      </ConfirmModal>\n    </Styled.Container>\n  )\n}\n\nexport default SendView\n","import { Label, Panel } from 'components'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nimport { media } from 'helpers/style'\n\nexport const Container = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n\n  align-items: center;\n  justify-content: center;\n\n  background: ${palette('background', 3)};\n  margin-left: auto;\n  margin-right: auto;\n  padding-top: 0px;\n\n  border-radius: 10px;\n  border: 1px solid ${palette('background', 5)};\n`\n\nexport const ContentPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  padding: 16px 8px 16px 8px;\n\n  ${media.sm`\n    padding: 16px 12px 4px 12px;\n  `}\n`\n\nexport const PoolSelect = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  padding: 8px 16px;\n`\n\nexport const FormItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 8px 0;\n`\n\nexport const FormLabel = styled(Label).attrs({\n  weight: 'bold',\n})`\n  margin-bottom: 8px;\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n\nexport const MemoTypes = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: 130px;\n`\n\nexport const ConfirmButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 2% 2%;\n\n  margin-top: 14px;\n\n  button {\n    flex: 1;\n  }\n`\n","import Send from './Send'\n\nexport default Send\n"],"sourceRoot":""}