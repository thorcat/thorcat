{"version":3,"sources":["helpers/networkFee.ts","hooks/useBalance.ts","views/Affiliate/Affiliate.style.ts","views/Affiliate/Affiliate.tsx","views/Affiliate/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useBalance","dispatch","useDispatch","useSelector","state","app","wallet","midgard","reloadBalanceByChain","useCallback","walletActions","reloadAllBalance","getMaxBalance","asset","L1Chain","Amount","fromAssetAmount","gasRate","inboundFee","NetworkFee","getNetworkFeeByAsset","direction","balance","getAssetBalance","amount","maxSpendableAmount","isGasAsset","sub","mul","gt","decimal","FromCard","styled","div","palette","Container","Panel","theme","transparentize","background","CardTitle","ContentTitle","CardSubTitle","ConfirmModalContent","GenerateButton","FancyButton","Affiliate","useState","recipient","setRecipient","chainRecipient","setChainRecipient","link","setLink","visibleConfirmModal","setVisibleConfirmModal","handleCopyAddress","copy","Notification","type","message","duration","placement","getAffiliateLink","useMemo","disabled","value","tooltip","onClick","CopyOutlined","style","color","useEffect","address","getWalletAddressByChain","affiliatePercentage","refs","getAffiliates","affiliateAddresses","Percent","length","toFixed","handleClose","title","content","href","target","rel","chainAddr","onAddressChange","push","filteredAddresses","filter","affiliateAddress","multichain","validateAddress","encodedQuery","encode","JSON","stringify","ADDRESS","window","location","origin","toString","description","error","className","encodeURIComponent","visible","onOk","inputAssets","onCancel"],"mappings":"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","file":"static/js/6.5ac49f95.chunk.js","sourcesContent":["import { FeeOptionKey } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOptionKey, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOptionKey\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useCallback } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Asset, Amount, getAssetBalance, NetworkFee } from 'multichain-sdk'\n\nimport { SupportedChain } from 'multichain-sdk/clients/types'\n\nimport { RootState } from 'redux/store'\nimport * as walletActions from 'redux/wallet/actions'\n\nimport { getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useBalance = () => {\n  const dispatch = useDispatch()\n  const { feeOptionType } = useSelector((state: RootState) => state.app)\n  const { wallet } = useSelector((state: RootState) => state.wallet)\n  const { inboundData } = useSelector((state: RootState) => state.midgard)\n\n  const reloadBalanceByChain = useCallback(\n    (chain: SupportedChain) => {\n      dispatch(walletActions.getWalletByChain(chain))\n    },\n    [dispatch],\n  )\n\n  const reloadAllBalance = useCallback(() => {\n    dispatch(walletActions.loadAllWallets())\n  }, [dispatch])\n\n  const getMaxBalance = useCallback(\n    (asset: Asset): Amount => {\n      if (!wallet?.[asset.L1Chain as SupportedChain]) {\n        // allow max amount for emulation if wallet is not connected\n        return Amount.fromAssetAmount(0, 8)\n      }\n\n      // calculate inbound fee\n      const gasRate = getGasRateByFeeOption({\n        inboundData,\n        chain: asset.L1Chain,\n        feeOptionType,\n      })\n      const inboundFee = NetworkFee.getNetworkFeeByAsset({\n        asset,\n        gasRate,\n        direction: 'inbound',\n      })\n\n      const balance = getAssetBalance(asset, wallet).amount\n\n      /**\n       * if asset is used for gas, subtract the inbound gas fee from input amount\n       * else allow full amount\n       * Calc: max spendable amount = balance amount - 2 x gas fee(if send asset equals to gas asset)\n       */\n\n      const maxSpendableAmount = asset.isGasAsset()\n        ? balance.sub(inboundFee.mul(1.5).amount)\n        : balance\n\n      if (maxSpendableAmount.gt(0)) {\n        return maxSpendableAmount\n      }\n\n      return Amount.fromAssetAmount(0, asset.decimal)\n    },\n    [wallet, feeOptionType, inboundData],\n  )\n\n  return {\n    getMaxBalance,\n    reloadAllBalance,\n    reloadBalanceByChain,\n    wallet,\n  }\n}\n","import { ContentTitle, FancyButton, Panel } from 'components'\nimport { transparentize } from 'polished'\nimport styled from 'styled-components'\nimport { palette } from 'styled-theme'\n\nexport const FromCard = styled.div`\n  /* background-image: linear-gradient(\n    120deg,\n    ${palette('background', 6)},\n    ${palette('background', 7)}\n  ); */\n  background: ${palette('background', 3)};\n  border-radius: 10px;\n  border: 1px solid ${palette('primary', 0)};\n  box-shadow: 0px 0px 20px 0.1px rgba(69, 161, 255, 0.2);\n  margin: 3px;\n  width: 90%;\n  display: flex;\n  padding: 5px;\n  flex-direction: column;\n  align-items: center;\n`\n\nexport const Container = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  background: ${({ theme }) =>\n    `${transparentize(1, theme.palette.background[5])}`};\n  width: 100%;\n  max-width: 500px;\n  margin: 1.61vh auto auto auto;\n  /* margin-left: auto;\n  margin-right: auto; */\n\n  padding: 0 -20px 0 -20px;\n  border-radius: 10px;\n  border: none;\n`\nexport const CardTitle = styled(ContentTitle)`\n  margin-top: 1rem;\n  margin-bottom: 0.5rem;\n  text-align: center;\n`\nexport const CardSubTitle = styled(ContentTitle)`\n  margin-top: 1rem;\n  margin-bottom: 0.5rem;\n  font-size: 10px;\n  text-align: center;\n`\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  width: 100%;\n`\nexport const GenerateButton = styled(FancyButton)`\n  margin: 1.75rem;\n  width: 80%;\n`\n","import React, { useState, useEffect, useMemo, useCallback } from 'react'\n\nimport { CopyOutlined } from '@ant-design/icons'\nimport {\n  ConfirmModal,\n  CoreButton,\n  Helmet,\n  Input,\n  Tooltip,\n  Notification,\n  AffiliateInput,\n} from 'components'\nimport copy from 'copy-to-clipboard'\nimport { encode } from 'jwt-simple'\nimport { getWalletAddressByChain, Percent } from 'multichain-sdk'\n\nimport { ADDRESS } from 'multichain-sdk/config'\n\nimport { A } from 'components/Link/Link.style'\n\nimport { useBalance } from 'hooks/useBalance'\n\nimport { multichain } from 'services/multichain'\n\nimport { getAffiliates } from 'helpers/storage'\n\nimport * as Styled from './Affiliate.style'\n\nconst Affiliate = () => {\n  const [recipient, setRecipient] = useState('')\n  const [chainRecipient, setChainRecipient] = useState('')\n  const [link, setLink] = useState('')\n  const { wallet } = useBalance()\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n  const handleCopyAddress = useCallback(() => {\n    copy(link)\n\n    Notification({\n      type: 'info',\n      message: 'Address Copied',\n      duration: 3,\n      placement: 'bottomRight',\n    })\n  }, [link])\n  const getAffiliateLink = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Styled.CardTitle>Become An Affiliate</Styled.CardTitle>\n        <Input disabled value={link} />\n        <Tooltip placement=\"top\" tooltip=\"Copy\">\n          <CoreButton onClick={handleCopyAddress}>\n            <CopyOutlined style={{ color: '#08c' }} />\n          </CoreButton>\n        </Tooltip>\n      </Styled.ConfirmModalContent>\n    )\n  }, [handleCopyAddress, link])\n  useEffect(() => {\n    if (wallet) {\n      const address = getWalletAddressByChain(wallet, 'THOR')\n      setRecipient(address || '')\n      setChainRecipient(address || '')\n    }\n  }, [wallet])\n\n  const affiliatePercentage = useMemo(() => {\n    const refs = getAffiliates()\n    const affiliateAddresses: string[] = refs ?? []\n    const percentage = new Percent(0.8 ** (affiliateAddresses.length + 1))\n    return percentage.toFixed(2)\n  }, [])\n\n  const handleSend = () => {\n    // get affiliates from local storage\n    const refs = getAffiliates()\n    // decrypt affiliate array\n    const affiliateAddresses: string[] = refs ?? []\n    affiliateAddresses.push(recipient)\n    const filteredAddresses = affiliateAddresses.filter((affiliateAddress) =>\n      multichain.validateAddress({\n        chain: 'THOR',\n        address: affiliateAddress,\n      }),\n    )\n    if (\n      multichain.validateAddress({\n        chain: 'THOR',\n        address: recipient,\n      })\n    ) {\n      // encrypt affilate array\n      const encodedQuery = encode(\n        JSON.stringify(filteredAddresses),\n        ADDRESS as string,\n      )\n      setLink(`${window.location.origin.toString()}/#/?refs=${encodedQuery}`)\n      setVisibleConfirmModal(true)\n    } else {\n      Notification({\n        type: 'error',\n        message: 'Invalide Thorchain address',\n        description: 'Affiliate links must be valid thorchain addresses',\n        duration: 20,\n      })\n    }\n  }\n  const handleClose = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  return (\n    <Styled.Container>\n      <Helmet title=\"Affiliate\" content=\"Affiliate\" />\n      <Styled.FromCard>\n        <Styled.CardTitle>\n          Join the Crosschain.Quest\n          <br />\n          Affiliate Program\n        </Styled.CardTitle>\n        <Styled.CardSubTitle>\n          {`earn ${affiliatePercentage} of swap fees when you share this with a friend and if your friend becomes an affiliate you earn too!`}\n        </Styled.CardSubTitle>\n        <A\n          href=\"http://crosschain.quest\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Read More\n        </A>\n        <Styled.CardSubTitle>\n          Step 1: Enter your thorchain address\n        </Styled.CardSubTitle>\n        <AffiliateInput\n          title=\"address\"\n          address={recipient}\n          chain=\"THOR\"\n          chainAddr={chainRecipient}\n          onAddressChange={setRecipient}\n        />\n        <Styled.CardSubTitle>\n          Step 2: Generate an affilate link\n        </Styled.CardSubTitle>\n        <Styled.GenerateButton onClick={handleSend} error={false}>\n          Generate Link\n        </Styled.GenerateButton>\n        <Styled.CardSubTitle>Step 3: Share!</Styled.CardSubTitle>\n        <Styled.CardSubTitle>\n          {!link ? (\n            'generate a link to share first!'\n          ) : (\n            <a\n              className=\"twitter-share-button\"\n              href={`https://twitter.com/intent/tweet?text=Permissionless%20swaps%20across%20blockchains%20at%20&url=${encodeURIComponent(\n                link,\n              )}`}\n            >\n              Tweet\n            </a>\n          )}\n        </Styled.CardSubTitle>\n      </Styled.FromCard>\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleClose}\n        inputAssets={[]}\n        onCancel={handleClose}\n      >\n        {visibleConfirmModal && getAffiliateLink}\n      </ConfirmModal>\n    </Styled.Container>\n  )\n}\n\nexport default Affiliate\n","import Affiliate from './Affiliate'\n\nexport default Affiliate\n"],"sourceRoot":""}