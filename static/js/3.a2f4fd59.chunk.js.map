{"version":3,"sources":["helpers/networkFee.ts","hooks/useNetworkFee.ts","hooks/useBalance.ts","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","hooks/useTxTracker.ts","views/Swap/PanelView/PanelView.style.ts","views/Swap/PanelView/PanelView.tsx","views/Swap/Swap.style.ts","views/Swap/utils.ts","views/Swap/Swap.tsx","hooks/useApprove.ts","helpers/error.ts","views/Swap/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useNetworkFee","inputAsset","outputAsset","useApp","useMidgard","pools","inboundFee","useMemo","gasRate","L1Chain","NetworkFee","getNetworkFeeByAsset","asset","direction","outboundFee","totalFee","outboundFeeInSendAsset","AssetAmount","Amount","fromAssetAmount","totalPriceIn","price","decimal","eq","add","totalFeeInUSD","Asset","USD","useBalance","dispatch","useDispatch","useSelector","state","app","wallet","midgard","reloadBalanceByChain","useCallback","walletActions","reloadAllBalance","getMaxBalance","balance","getAssetBalance","amount","maxSpendableAmount","isGasAsset","sub","mul","gt","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","useTxTracker","addNewTxTracker","updateTxTracker","clearTxTrackers","processSubmittedTx","submitTransaction","type","submitTx","uuidv4","status","TxTrackerStatus","Submitting","action","refunded","pollTransaction","txTracker","Pending","setTxFailed","Failed","Container","styled","Panel","theme","transparentize","palette","background","ContentPanel","div","media","sm","HeaderContent","HeaderMenu","props","selected","PanelView","meta","children","Helmet","title","content","SettingsOverlay","ToolContainer","SwitchPair","ConfirmButtonContainer","ConfirmModalContent","RecipientAddrWrapper","ApproveBtn","FancyButton","getSwapPair","pair","a","split","input","output","decodeFromURL","setDecimal","getSwapTrackerType","swap","isSynth","synthType","SynthType","MINT","TxTrackerType","Mint","REDEEM","Redeem","Swap","FromCard","ToCard","StyledSliderWrapper","SwapPage","history","useHistory","allPools","poolLoading","slippageTolerance","hasWallet","approveStatus","useWallet","useState","isApproved","setApproved","isWalletConnected","hasConnectedWallet","useEffect","Success","multichain","isAssetApproved","approved","checkApproved","assetApproveStatus","useApprove","isTradingHalted","inTradeInboundData","outTradeInboundData","halted","walletConnected","hasWalletConnected","inputAssets","filter","detail","poolAssets","assets","map","pool","RUNE","synthAssets","synthAsset","symbol","outputAssets","IS_SYNTH_ACTIVE","getInputAssets","inputAmount","setInputAmount","percent","setPercent","chainRecipient","setChainRecipient","recipient","setRecipient","visibleConfirmModal","setVisibleConfirmModal","visibleApproveModal","setVisibleApproveModal","isValidAddress","validateAddress","address","inputAssetAmount","inboundFeeInInputAsset","outboundFeeInOutputAsset","slip","fee","error","console","log","outputAmount","outputAmountAfterFee","slipPercent","Percent","minReceive","minOutputAmount","inputAssetPriceInUSD","Price","baseAsset","priceAmount","outputAssetPriceInUSD","getWalletAddressByChain","maxInputBalance","inputAssetBalance","handleSelectInputAsset","getSwapRoute","handleSelectOutputAsset","handleSwitchPair","handleChangeInputAmount","assetAmount","toNumber","handleChangePercent","p","newAmount","handleSelectMax","handleConfirm","trackerType","trackId","inAssets","toSignificant","outAssets","txHash","txID","msg","description","includes","Notification","message","duration","handleCancel","handleConfirmApprove","Approve","approveAsset","handleSwap","hasInSufficientFee","handleApprove","isValidSwap","valid","isValid","isValidSlip","isSlipValid","btnLabel","estimatedTime","getEstimatedTxTime","renderConfirmModalContent","name","toUpperCase","truncateAddress","toFixed","tooltip","SLIP_TOOLTIP_LABEL","MIN_RECEIVED_LABEL","toCurrencyFormat","TX_FEE_TOOLTIP_LABEL","ESTIMATED_TIME_LABEL","renderApproveModal","poolAsset","isRUNE","onChange","onSelect","onMax","usdPrice","value","withLabel","onClick","SwapOutlined","inputProps","disabled","chainAddr","onAddressChange","loading","visible","onOk","onCancel","SwapView","useParams","swapPair","setSwapPair","swapPairData","getPair"],"mappings":"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","file":"static/js/3.a2f4fd59.chunk.js","sourcesContent":["import { FeeOptionKey } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOptionKey, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOptionKey\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useMemo } from 'react'\n\nimport { Asset, Amount, AssetAmount, NetworkFee, Pool } from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport { getGasRateByChain, getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useNetworkFee = ({\n  inputAsset,\n  outputAsset,\n}: {\n  inputAsset: Asset\n  outputAsset?: Asset\n}) => {\n  const { feeOptionType } = useApp()\n  const { inboundData, pools } = useMidgard()\n\n  const inboundFee = useMemo(() => {\n    // get inbound gasRate with fee option\n\n    const gasRate = getGasRateByFeeOption({\n      inboundData,\n      chain: inputAsset.L1Chain,\n      feeOptionType,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: inputAsset,\n      gasRate,\n      direction: 'inbound',\n    })\n\n    return networkFee\n  }, [inputAsset, inboundData, feeOptionType])\n\n  const outboundFee = useMemo(() => {\n    if (!outputAsset) return null\n\n    const gasRate = getGasRateByChain({\n      inboundData,\n      chain: outputAsset.L1Chain,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: outputAsset,\n      gasRate,\n      direction: 'outbound',\n    })\n\n    return networkFee\n  }, [outputAsset, inboundData])\n\n  const totalFee = useMemo(() => {\n    if (!outboundFee) return inboundFee\n\n    const outboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        outboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n\n    if (inboundFee.asset.eq(inputAsset)) {\n      return inboundFee.add(outboundFeeInSendAsset)\n    }\n\n    const inboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        inboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n    return inboundFeeInSendAsset.add(outboundFeeInSendAsset)\n  }, [inputAsset, inboundFee, outboundFee, pools])\n\n  const totalFeeInUSD = useMemo(\n    () => totalFee.totalPriceIn(Asset.USD(), pools),\n    [totalFee, pools],\n  )\n\n  return {\n    totalFee,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n  }\n}\n\nexport const getSumAmountInUSD = (\n  assetAmount1: AssetAmount | null,\n  assetAmount2: AssetAmount | null,\n  pools: Pool[],\n) => {\n  const assetAmount1InUSD = assetAmount1?.totalPriceIn(Asset.USD(), pools)\n  const assetAmount2InUSD = assetAmount2?.totalPriceIn(Asset.USD(), pools)\n\n  if (assetAmount1 === null && assetAmount2InUSD)\n    return assetAmount2InUSD.toCurrencyFormat()\n  if (assetAmount2 === null && assetAmount1InUSD)\n    return assetAmount1InUSD.toCurrencyFormat()\n\n  if (assetAmount1InUSD && assetAmount2InUSD) {\n    const sum = assetAmount1InUSD.raw().plus(assetAmount2InUSD.raw())\n\n    return Amount.fromAssetAmount(sum, 8).toFixed(2)\n  }\n\n  return Amount.fromAssetAmount(0, 8).toFixed()\n}\n","import { useCallback } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Asset, Amount, getAssetBalance, NetworkFee } from 'multichain-sdk'\n\nimport { SupportedChain } from 'multichain-sdk/clients/types'\n\nimport { RootState } from 'redux/store'\nimport * as walletActions from 'redux/wallet/actions'\n\nimport { getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useBalance = () => {\n  const dispatch = useDispatch()\n  const { feeOptionType } = useSelector((state: RootState) => state.app)\n  const { wallet } = useSelector((state: RootState) => state.wallet)\n  const { inboundData } = useSelector((state: RootState) => state.midgard)\n\n  const reloadBalanceByChain = useCallback(\n    (chain: SupportedChain) => {\n      dispatch(walletActions.getWalletByChain(chain))\n    },\n    [dispatch],\n  )\n\n  const reloadAllBalance = useCallback(() => {\n    dispatch(walletActions.loadAllWallets())\n  }, [dispatch])\n\n  const getMaxBalance = useCallback(\n    (asset: Asset): Amount => {\n      if (!wallet?.[asset.L1Chain as SupportedChain]) {\n        // allow max amount for emulation if wallet is not connected\n        return Amount.fromAssetAmount(10 ** 8, 8)\n      }\n\n      // calculate inbound fee\n      const gasRate = getGasRateByFeeOption({\n        inboundData,\n        chain: asset.L1Chain,\n        feeOptionType,\n      })\n      const inboundFee = NetworkFee.getNetworkFeeByAsset({\n        asset,\n        gasRate,\n        direction: 'inbound',\n      })\n\n      const balance = getAssetBalance(asset, wallet).amount\n\n      /**\n       * if asset is used for gas, subtract the inbound gas fee from input amount\n       * else allow full amount\n       * Calc: max spendable amount = balance amount - 2 x gas fee(if send asset equals to gas asset)\n       */\n\n      const maxSpendableAmount = asset.isGasAsset()\n        ? balance.sub(inboundFee.mul(1.5).amount)\n        : balance\n\n      if (maxSpendableAmount.gt(0)) {\n        return maxSpendableAmount\n      }\n\n      return Amount.fromAssetAmount(0, asset.decimal)\n    },\n    [wallet, feeOptionType, inboundData],\n  )\n\n  return {\n    getMaxBalance,\n    reloadAllBalance,\n    reloadBalanceByChain,\n    wallet,\n  }\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { useCallback } from 'react'\n\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, SubmitTx, TxTrackerType } from 'redux/midgard/types'\n\n/**\n * 1. send transaction and get txHash\n * 2. poll midgard action API and get \"in\" tx with the same txHash\n * 3. check action status (success, pending)\n * 4. check action type and match with send tx type\n *    (if action type is not \"refund\", action type should be matched to the send type)\n */\n\nexport const useTxTracker = () => {\n  const {\n    addNewTxTracker,\n    updateTxTracker,\n    clearTxTrackers,\n    processSubmittedTx,\n  } = useMidgard()\n\n  // confirm and submit a transaction\n  const submitTransaction = useCallback(\n    ({\n      type,\n      submitTx,\n    }: {\n      type: TxTrackerType\n      submitTx: SubmitTx\n    }): string => {\n      const uuid = uuidv4()\n\n      addNewTxTracker({\n        uuid,\n        type,\n        status: TxTrackerStatus.Submitting,\n        submitTx,\n        action: null,\n        refunded: null,\n      })\n\n      return uuid\n    },\n    [addNewTxTracker],\n  )\n\n  // start polling a transaction\n  const pollTransaction = useCallback(\n    ({\n      uuid,\n      submitTx,\n      type,\n    }: {\n      uuid: string\n      submitTx: SubmitTx\n      type: TxTrackerType\n    }) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Pending,\n          submitTx,\n        },\n      })\n      processSubmittedTx({ submitTx, type })\n    },\n    [updateTxTracker, processSubmittedTx],\n  )\n\n  // start polling a transaction\n  const setTxFailed = useCallback(\n    (uuid: string) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Failed,\n        },\n      })\n    },\n    [updateTxTracker],\n  )\n\n  return {\n    submitTransaction,\n    pollTransaction,\n    clearTxTrackers,\n    setTxFailed,\n  }\n}\n","import { transparentize } from 'polished'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nimport { media } from 'helpers/style'\n\nimport { Panel } from '../../../components/Panel'\n\nexport const Container = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n\n  align-items: center;\n  justify-content: center;\n\n  background: ${({ theme }) => \n    `${transparentize(0.4, theme.palette.background[5])}`};\n  width:100%;\n  max-width: 500px;\n  margin: auto auto auto auto;\n  /* margin-left: auto;\n  margin-right: auto; */\n  padding-top: 0px;\n\n  border-radius: 10px;\n  border: none;\n`\n\nexport const ContentPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 96%;\n\n  padding: 16px 8px 16px 8px;\n\n  ${media.sm`\n    padding: 16px 12px 4px 12px;\n  `}\n`\n\nexport const HeaderContent = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  flex: 1;\n\n  padding: 0 10px;\n`\n\nexport const HeaderMenu = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const HeaderActions = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const PoolDetailLink = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  height: 20px;\n  color: ${palette('text', 0)};\n`\n\nexport const MenuIconWrapper = styled.div<{ selected: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  height: 20px;\n\n  font-weight: ${(props) => (props.selected ? 'bold' : 'normal')};\n\n  svg {\n    color: ${(props) =>\n      props.selected ? palette('primary', 0) : palette('text', 0)};\n  }\n`\n","import React from 'react'\n\n// import { Link } from 'react-router-dom'\n// import { SwapOutlined } from '@ant-design/icons'\nimport { ContentTitle } from '../../../components'\nimport { Helmet } from '../../../components/Helmet'\nimport { SettingsOverlay } from '../../../components/SettingsOverlay'\nimport { Asset } from '../../../multichain-sdk'\nimport * as Styled from './PanelView.style'\n\nexport type PanelViewProps = {\n  type: 'swap' | 'add' | 'withdraw' | 'liquidity' | 'pending' | 'savings'\n  meta: string\n  poolAsset: Asset\n  children: React.ReactNode\n}\n\n// const SwapButton = ({ selected }: { selected: boolean }) => (\n//   <CoreButton>\n//     <Tooltip tooltip=\"Swap\" placement=\"top\">\n//       <Styled.MenuIconWrapper selected={selected}>\n//         <SwapOutlined />\n//       </Styled.MenuIconWrapper>\n//     </Tooltip>\n//   </CoreButton>\n// )\n\n// type MenuButtonProps = {\n//   selected: boolean\n//   route: string\n//   children: React.ReactElement\n// }\n\n// const MenuButton: React.FC<MenuButtonProps> = ({\n//   selected,\n//   route,\n//   children,\n// }) => {\n//   if (selected) {\n//     return children\n//   }\n\n//   return <Link to={route}>{children}</Link>\n// }\n\nexport const PanelView = ({\n  // type,\n  meta,\n  // poolAsset,\n  children,\n}: PanelViewProps) => {\n  // const swapRoute = useMemo(() => {\n  //   return getSwapRoute(poolAsset, Asset.RUNE())\n  // }, [poolAsset])\n\n  return (\n    <Styled.Container>\n      <Helmet title={meta} content={meta} />\n      <ContentTitle>\n        <Styled.HeaderContent>\n          <Styled.HeaderMenu>\n            {/* <MenuButton selected={type === 'swap'} route={swapRoute}>\n              <SwapButton selected={type === 'swap'} />\n            </MenuButton> */}\n          </Styled.HeaderMenu>\n          <SettingsOverlay />\n        </Styled.HeaderContent>\n      </ContentTitle>\n      <Styled.ContentPanel>{children}</Styled.ContentPanel>\n    </Styled.Container>\n  )\n}\n","import { FancyButton } from 'components'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nexport const ToolContainer = styled.div`\n  display: box;\n  margin-top: 13px;\n  margin-bottom: 3px;\n  height: 40px;\n`\n\nexport const SliderWrapper = styled.div`\n  margin: auto;\n  width: 95%;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const SwitchPair = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n\n  svg {\n    width: 24px;\n    height: 24px;\n    color: ${palette('text', 4)};\n    transform: rotate(90deg);\n  }\n`\n\nexport const ConfirmButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 0 1%;\n\n  margin-top: 25px;\n  margin-bottom: 20px;\n\n  button {\n    flex: 1;\n  }\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n\nexport const RecipientAddrWrapper = styled.div`\n  margin-top: 14px;\n`\n\n// export const SwapInfo = styled.div`\n//   display: flex;\n//   flex-direction: column;\n\n//   width: 100%;\n//   padding: 8px;\n//   margin-top: 14px;\n\n//   border: 1px solid ${palette('gray', 0)};\n// `\n\nexport const ApproveBtn = styled(FancyButton)`\n  margin-right: 8px;\n`\n","import { Asset, Swap, SynthType } from 'multichain-sdk'\n\nimport { TxTrackerType } from 'redux/midgard/types'\n\nimport { Pair } from './types'\n\nexport const getSwapPair = async (pair: string): Promise<Pair | null> => {\n  if (!pair || pair.split('_').length !== 2) {\n    return null\n  }\n\n  const input = pair.split('_')?.[0]\n  const output = pair.split('_')?.[1]\n\n  if (!input || !output) return null\n\n  const inputAsset = Asset.decodeFromURL(input)\n  const outputAsset = Asset.decodeFromURL(output)\n\n  if (!inputAsset || !outputAsset) return null\n\n  await inputAsset.setDecimal()\n  await outputAsset.setDecimal()\n\n  return {\n    inputAsset,\n    outputAsset,\n  }\n}\n\nexport const getSwapTrackerType = (swap: Swap): TxTrackerType => {\n  if (swap.inputAsset.isSynth || swap.outputAsset.isSynth) {\n    if (swap.synthType === SynthType.MINT) {\n      return TxTrackerType.Mint\n    }\n    if (swap.synthType === SynthType.REDEEM) {\n      return TxTrackerType.Redeem\n    }\n  }\n\n  return TxTrackerType.Swap\n}\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\n\nimport { useHistory, useParams } from 'react-router'\n\nimport { SwapOutlined } from '@ant-design/icons'\nimport {\n  AddressSelectCard,\n  AssetInputCard,\n  Slider,\n  ConfirmModal,\n  Information,\n  Notification,\n  IconButton,\n  FancyButton,\n  ProtocolSelect,\n} from 'components'\nimport {\n  getInputAssets,\n  Amount,\n  Asset,\n  AssetAmount,\n  getWalletAddressByChain,\n  Swap,\n  Percent,\n  Price,\n  getAssetBalance,\n  getEstimatedTxTime,\n  SupportedChain,\n  hasWalletConnected,\n  hasConnectedWallet,\n} from 'multichain-sdk'\nimport styled from 'styled-components'\nimport { palette } from 'styled-theme'\n\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, TxTrackerType } from 'redux/midgard/types'\n\nimport { useApprove } from 'hooks/useApprove'\nimport { useBalance } from 'hooks/useBalance'\nimport { useNetworkFee } from 'hooks/useNetworkFee'\nimport { useTxTracker } from 'hooks/useTxTracker'\n\nimport { multichain } from 'services/multichain'\n\nimport { translateErrorMsg } from 'helpers/error'\nimport { truncateAddress } from 'helpers/string'\n\nimport { IS_SYNTH_ACTIVE } from 'settings/config'\nimport { getSwapRoute } from 'settings/constants'\nimport {\n  TX_FEE_TOOLTIP_LABEL,\n  SLIP_TOOLTIP_LABEL,\n  ESTIMATED_TIME_LABEL,\n  MIN_RECEIVED_LABEL,\n} from 'settings/constants/label'\n\nimport { PanelView } from './PanelView'\nimport * as Styled from './Swap.style'\nimport { Pair } from './types'\nimport { getSwapPair, getSwapTrackerType } from './utils'\n\n\nconst SwapView = () => {\n  const { pair } = useParams<{ pair: string }>()\n  const [swapPair, setSwapPair] = useState<Pair>()\n\n  useEffect(() => {\n    const getPair = async () => {\n      const swapPairData = await getSwapPair(pair)\n\n      if (swapPairData) {\n        setSwapPair(swapPairData)\n      }\n    }\n\n    getPair()\n  }, [pair])\n\n  if (swapPair) {\n    const { inputAsset, outputAsset } = swapPair\n    return <SwapPage inputAsset={inputAsset} outputAsset={outputAsset} />\n  }\n\n  return null\n}\nconst FromCard = styled.div`\n  background-image: linear-gradient(120deg, ${palette('background', 6)}, ${palette('background', 7)});\n  border-radius: 4px;\n  height: 145px;\n`\n\nconst ToCard = styled.div`\n  background-image: linear-gradient(120deg, ${palette('background', 6)}, ${palette('background', 7)});\n  border-radius: 4px;\n  height: 145px;\n`\n\nconst StyledSliderWrapper = styled.div`\n  width: 90%;\n  margin: auto;\n`\n\nconst SwapPage = ({ inputAsset, outputAsset }: Pair) => {\n  const history = useHistory()\n  const { wallet, getMaxBalance } = useBalance()\n  const { pools: allPools, poolLoading, inboundData } = useMidgard()\n  const { slippageTolerance } = useApp()\n  const { submitTransaction, pollTransaction, setTxFailed } = useTxTracker()\n  const { isApproved, assetApproveStatus } = useApprove(inputAsset, !!wallet)\n\n  const isTradingHalted: boolean = useMemo(() => {\n    const inTradeInboundData = inboundData.find(\n      (data) => data.chain === inputAsset.chain,\n    )\n    const outTradeInboundData = inboundData.find(\n      (data) => data.chain === outputAsset.chain,\n    )\n\n    return (\n      (inTradeInboundData?.halted ?? false) ||\n      (outTradeInboundData?.halted ?? false)\n    )\n  }, [inboundData, inputAsset, outputAsset])\n\n  const { inboundFee, outboundFee, totalFeeInUSD } = useNetworkFee({\n    inputAsset,\n    outputAsset,\n  })\n\n  const walletConnected = useMemo(\n    () => hasWalletConnected({ wallet, inputAssets: [inputAsset] }),\n    [wallet, inputAsset],\n  )\n\n  const pools = useMemo(\n    () => allPools.filter((data) => data.detail.status === 'available'),\n    [allPools],\n  )\n  const poolAssets = useMemo(() => {\n    const assets = pools.map((pool) => pool.asset)\n    assets.push(Asset.RUNE())\n\n    return assets\n  }, [pools])\n\n  const synthAssets = useMemo(() => {\n    return pools.map((pool) => {\n      const { asset } = pool\n      const synthAsset = new Asset(asset.chain, asset.symbol, true)\n      synthAsset.isSynth = true\n\n      return synthAsset\n    })\n  }, [pools])\n\n  const outputAssets = useMemo(() => {\n    if (IS_SYNTH_ACTIVE) {\n      return [...poolAssets, ...synthAssets]\n    }\n    return poolAssets\n  }, [poolAssets, synthAssets])\n\n  const inputAssets = useMemo(\n    () =>\n      hasConnectedWallet(wallet)\n        ? getInputAssets({ wallet, pools })\n        : outputAssets,\n    [wallet, pools, outputAssets],\n  )\n\n  const [inputAmount, setInputAmount] = useState<Amount>(\n    Amount.fromAssetAmount(0, 8),\n  )\n  const [percent, setPercent] = useState(0)\n  const [chainRecipient, setChainRecipient] = useState('')\n  const [recipient, setRecipient] = useState('')\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n  const [visibleApproveModal, setVisibleApproveModal] = useState(false)\n\n  const isValidAddress = useMemo(\n    () =>\n      multichain.validateAddress({\n        chain: outputAsset.L1Chain,\n        address: recipient,\n      }),\n    [outputAsset, recipient],\n  )\n\n  const swap: Swap | null = useMemo(() => {\n    if (poolLoading) return null\n\n    try {\n      const inputAssetAmount = new AssetAmount(inputAsset, inputAmount)\n\n      const inboundFeeInInputAsset = new AssetAmount(\n        inputAsset,\n        Amount.fromAssetAmount(\n          inboundFee.totalPriceIn(inputAsset, pools).price,\n          inputAsset.decimal,\n        ),\n      )\n\n      const outboundFeeInOutputAsset = outboundFee\n        ? new AssetAmount(\n          outputAsset,\n          Amount.fromAssetAmount(\n            outboundFee.totalPriceIn(outputAsset, pools).price,\n            outputAsset.decimal,\n          ),\n        )\n        : new AssetAmount(\n          outputAsset,\n          Amount.fromAssetAmount(0, outputAsset.decimal),\n        )\n\n      return new Swap({\n        inputAsset,\n        outputAsset,\n        pools,\n        amount: inputAssetAmount,\n        slip: slippageTolerance,\n        fee: {\n          inboundFee: inboundFeeInInputAsset,\n          outboundFee: outboundFeeInOutputAsset,\n        },\n      })\n    } catch (error) {\n      console.log(error)\n      return null\n    }\n  }, [\n    inputAsset,\n    outputAsset,\n    pools,\n    inputAmount,\n    slippageTolerance,\n    poolLoading,\n    inboundFee,\n    outboundFee,\n  ])\n\n  const outputAmount: Amount = useMemo(() => {\n    if (swap) {\n      return swap.outputAmountAfterFee.amount\n    }\n\n    return Amount.fromAssetAmount(0, 8)\n  }, [swap])\n\n  const slipPercent: Percent = useMemo(\n    () => (swap ? swap.slip : new Percent(0)),\n    [swap],\n  )\n\n  const minReceive: Amount = useMemo(\n    () => (swap ? swap.minOutputAmount : Amount.fromAssetAmount(0, 8)),\n    [swap],\n  )\n\n  const inputAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: inputAsset,\n        pools,\n        priceAmount: inputAmount,\n      }),\n    [inputAsset, inputAmount, pools],\n  )\n\n  const outputAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: outputAsset,\n        pools,\n        priceAmount: outputAmount,\n      }),\n    [outputAsset, outputAmount, pools],\n  )\n\n  useEffect(() => {\n    if (wallet) {\n      const address = getWalletAddressByChain(wallet, outputAsset.L1Chain)\n      setRecipient(address || '')\n      setChainRecipient(address || '')\n    }\n  }, [wallet, outputAsset])\n\n  const maxInputBalance: Amount = useMemo(() => getMaxBalance(inputAsset), [\n    inputAsset,\n    getMaxBalance,\n  ])\n\n  const inputAssetBalance: Amount = useMemo(() => {\n    if (!wallet) {\n      // allow max amount for emulation if wallet is not connected\n      return Amount.fromAssetAmount(10 ** 3, 8)\n    }\n\n    return getAssetBalance(inputAsset, wallet)\n  }, [inputAsset, wallet])\n\n  const handleSelectInputAsset = useCallback(\n    (input: Asset) => {\n      history.push(getSwapRoute(input, outputAsset))\n    },\n    [history, outputAsset],\n  )\n\n  const handleSelectOutputAsset = useCallback(\n    (output: Asset) => {\n      history.push(getSwapRoute(inputAsset, output))\n    },\n    [history, inputAsset],\n  )\n\n  const handleSwitchPair = useCallback(() => {\n    history.push(getSwapRoute(outputAsset, inputAsset))\n  }, [history, inputAsset, outputAsset])\n\n  const handleChangeInputAmount = useCallback(\n    (amount: Amount) => {\n      if (amount.gt(maxInputBalance)) {\n        setInputAmount(maxInputBalance)\n        setPercent(100)\n      } else {\n        setInputAmount(amount)\n        setPercent(amount.div(maxInputBalance).mul(100).assetAmount.toNumber())\n      }\n    },\n    [maxInputBalance],\n  )\n\n  const handleChangePercent = useCallback(\n    (p: number) => {\n      setPercent(p)\n      const newAmount = maxInputBalance.mul(p).div(100)\n      setInputAmount(newAmount)\n    },\n    [maxInputBalance],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    handleChangePercent(100)\n  }, [handleChangePercent])\n\n  const handleConfirm = useCallback(async () => {\n    setVisibleConfirmModal(false)\n\n    if (wallet && swap) {\n      const trackerType = getSwapTrackerType(swap)\n\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: trackerType,\n        submitTx: {\n          inAssets: [\n            {\n              asset: swap.inputAsset.toString(),\n              amount: swap.inputAmount.toSignificant(6),\n            },\n          ],\n          outAssets: [\n            {\n              asset: swap.outputAsset.toString(),\n              amount: swap.outputAmountAfterFee.toSignificant(6),\n            },\n          ],\n        },\n      })\n\n      try {\n        const txHash = await multichain.swap(swap, recipient)\n\n        // start polling\n        pollTransaction({\n          type: trackerType,\n          uuid: trackId,\n          submitTx: {\n            inAssets: [\n              {\n                asset: swap.inputAsset.toString(),\n                amount: swap.inputAmount.toSignificant(6),\n              },\n            ],\n            outAssets: [\n              {\n                asset: swap.outputAsset.toString(),\n                amount: swap.outputAmountAfterFee.toSignificant(6),\n              },\n            ],\n            txID: txHash,\n          },\n        })\n      } catch (error: any) {\n        setTxFailed(trackId)\n\n        // handle better error message\n        const description = translateErrorMsg(error?.toString())\n\n        Notification({\n          type: 'error',\n          message: 'Submit Transaction Failed.',\n          description,\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [wallet, swap, recipient, submitTransaction, pollTransaction, setTxFailed])\n\n  const handleCancel = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  const handleConfirmApprove = useCallback(async () => {\n    setVisibleApproveModal(false)\n\n    if (wallet) {\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: TxTrackerType.Approve,\n        submitTx: {\n          inAssets: [\n            {\n              asset: inputAsset.toString(),\n              amount: '0', // not needed for approve tx\n            },\n          ],\n        },\n      })\n\n      try {\n        const txHash = await multichain.approveAsset(inputAsset)\n        console.log('approve txhash', txHash)\n        if (txHash) {\n          // start polling\n          pollTransaction({\n            type: TxTrackerType.Swap,\n            uuid: trackId,\n            submitTx: {\n              inAssets: [\n                {\n                  asset: inputAsset.toString(),\n                  amount: '0', // not needed for approve tx\n                },\n              ],\n              txID: txHash,\n            },\n          })\n        }\n      } catch (error) {\n        setTxFailed(trackId)\n        Notification({\n          type: 'open',\n          message: 'Approve Failed.',\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [inputAsset, wallet, setTxFailed, submitTransaction, pollTransaction])\n\n  const handleSwap = useCallback(() => {\n    if (walletConnected && swap) {\n      if (swap.hasInSufficientFee) {\n        Notification({\n          type: 'info',\n          message: 'Swap Insufficient Fee',\n          description: 'Input amount is not enough to cover the fee',\n        })\n        return\n      }\n\n      if (!isValidAddress) {\n        Notification({\n          type: 'error',\n          message: 'Invalid Recipient Address',\n          description: 'Recipient address should be a valid address.',\n        })\n        return\n      }\n\n      setVisibleConfirmModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [isValidAddress, walletConnected, swap])\n\n  const handleApprove = useCallback(() => {\n    if (walletConnected && swap) {\n      setVisibleApproveModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [walletConnected, swap])\n\n  const isValidSwap = useMemo(() => {\n    if (isTradingHalted) {\n      return {\n        valid: false,\n        msg: 'Swap not available',\n      }\n    }\n\n    return swap?.isValid() ?? { valid: false }\n  }, [swap, isTradingHalted])\n\n  const isValidSlip = useMemo(() => swap?.isSlipValid() ?? true, [swap])\n\n  const btnLabel = useMemo(() => {\n    if (isValidSwap.valid || inputAmount.eq(0)) {\n      if (inputAsset.isSynth && outputAsset.isSynth) {\n        return 'Swap'\n      }\n      if (inputAsset.isSynth) {\n        return 'Redeem'\n      }\n      if (outputAsset.isSynth) {\n        return 'Mint'\n      }\n      return 'Swap'\n    }\n\n    return isValidSwap?.msg ?? 'Swap'\n  }, [isValidSwap, inputAmount, inputAsset, outputAsset])\n\n  const estimatedTime = useMemo(\n    () =>\n      getEstimatedTxTime({\n        chain: inputAsset.L1Chain as SupportedChain,\n        amount: inputAmount,\n      }),\n    [inputAsset, inputAmount],\n  )\n\n  const renderConfirmModalContent = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title=\"Send\"\n          description={`${inputAmount.toSignificant(\n            6,\n          )} ${inputAsset.name.toUpperCase()}`}\n        />\n        <Information\n          title=\"Recipient\"\n          description={`${outputAmount.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n        />\n        <br />\n        <Information\n          title=\"Recipient Address\"\n          description={truncateAddress(recipient)}\n          error={!isValidAddress}\n        />\n        <br />\n        <Information\n          title=\"Slip\"\n          description={slipPercent.toFixed(3)}\n          error={!isValidSlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Min Received\"\n          description={`${minReceive.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n          tooltip={MIN_RECEIVED_LABEL}\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Network Fee\"\n          description={outboundFee?.toCurrencyFormat() ?? ''}\n          tooltip=\"Thorchain network fee used to pay outbound transaction\"\n        />\n        <Information\n          title=\"Total Fee\"\n          description={totalFeeInUSD.toCurrencyFormat(2) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        />\n        <Information\n          title=\"Estimated Time\"\n          description={estimatedTime}\n          tooltip={ESTIMATED_TIME_LABEL}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [\n    inputAmount,\n    outputAmount,\n    inputAsset,\n    outputAsset,\n    recipient,\n    slipPercent,\n    isValidSlip,\n    minReceive,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n    estimatedTime,\n    isValidAddress,\n  ])\n\n  const renderApproveModal = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title={`Approve ${inputAsset.name.toUpperCase()}`}\n          description=\"\"\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [inboundFee, inputAsset])\n\n  const title = useMemo(\n    () => `Swap ${inputAsset.name} >> ${outputAsset.name}`,\n    [inputAsset, outputAsset],\n  )\n  const poolAsset = useMemo(\n    () => (inputAsset.isRUNE() ? outputAsset : inputAsset),\n    [inputAsset, outputAsset],\n  )\n\n  return (\n    <PanelView meta={title} poolAsset={poolAsset} type=\"swap\">\n      <FromCard>\n        <AssetInputCard\n          title=\"from\"\n          asset={inputAsset}\n          assets={inputAssets}\n          amount={inputAmount}\n          balance={inputAssetBalance}\n          onChange={handleChangeInputAmount}\n          onSelect={handleSelectInputAsset}\n          onMax={handleSelectMax}\n          usdPrice={inputAssetPriceInUSD}\n          wallet={wallet || undefined}\n        />\n        <StyledSliderWrapper>\n          <Slider value={percent} onChange={handleChangePercent} withLabel />\n        </StyledSliderWrapper>\n      </FromCard>\n      <Styled.ToolContainer>\n        <Styled.SwitchPair>\n          <IconButton onClick={handleSwitchPair}>\n            <SwapOutlined />\n          </IconButton>\n        </Styled.SwitchPair>\n      </Styled.ToolContainer>\n      <ToCard>\n        <AssetInputCard\n          title=\"to\"\n          asset={outputAsset}\n          assets={outputAssets}\n          amount={outputAmount}\n          onSelect={handleSelectOutputAsset}\n          inputProps={{ disabled: true }}\n          usdPrice={outputAssetPriceInUSD}\n          wallet={wallet || undefined}\n        />\n        <Styled.RecipientAddrWrapper>\n          <AddressSelectCard\n            title=\"address\"\n            address={recipient}\n            chain={outputAsset.L1Chain}\n            chainAddr={chainRecipient}\n            onAddressChange={setRecipient}\n          />\n        </Styled.RecipientAddrWrapper>\n      </ToCard>\n      {/* <Styled.SwapInfo>\n        <PriceRate\n          price={swap?.price}\n          inputAsset={swap?.inputAsset}\n          outputAsset={swap?.outputAsset}\n        />\n        <Information\n          title=\"Slip\"\n          description={slipPercent.toFixed(3)}\n          error={!isValidSlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Min Received\"\n          description={`${minReceive.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n          tooltip={MIN_RECEIVED_LABEL}\n        />\n\n        <br />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Network Fee\"\n          description={outboundFee?.toCurrencyFormat() ?? ''}\n          tooltip=\"Estimated network fee used to pay outbound transaction\"\n        />\n        <Information\n          title=\"Total Fee\"\n          description={totalFeeInUSD?.toCurrencyFormat(2) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        />\n      </Styled.SwapInfo> */}\n      <ProtocolSelect />\n      {isApproved !== null && wallet && (\n        <Styled.ConfirmButtonContainer>\n          {!isApproved && (\n            <Styled.ApproveBtn\n              onClick={handleApprove}\n              error={!isValidSwap.valid}\n              disabled={\n                assetApproveStatus === TxTrackerStatus.Pending ||\n                assetApproveStatus === TxTrackerStatus.Submitting\n              }\n              loading={\n                assetApproveStatus === TxTrackerStatus.Pending ||\n                assetApproveStatus === TxTrackerStatus.Submitting\n              }\n            >\n              Approve\n            </Styled.ApproveBtn>\n          )}\n          <FancyButton\n            disabled={!isApproved}\n            onClick={handleSwap}\n            error={!isValidSwap.valid}\n          >\n            {btnLabel}\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      )}\n      {!wallet && (\n        <Styled.ConfirmButtonContainer>\n          <FancyButton onClick={handleSwap} error={!isValidSwap.valid}>\n            {btnLabel}\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      )}\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleConfirm}\n        onCancel={handleCancel}\n        inputAssets={[inputAsset]}\n      >\n        {renderConfirmModalContent}\n      </ConfirmModal>\n      <ConfirmModal\n        visible={visibleApproveModal}\n        onOk={handleConfirmApprove}\n        onCancel={() => setVisibleApproveModal(false)}\n        inputAssets={[inputAsset]}\n      >\n        {renderApproveModal}\n      </ConfirmModal>\n    </PanelView>\n  )\n}\n\nexport default SwapView\n","import { useEffect, useState, useMemo } from 'react'\n\nimport { Asset, hasConnectedWallet } from 'multichain-sdk'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus } from 'redux/midgard/types'\nimport { useWallet } from 'redux/wallet/hooks'\n\nimport { multichain } from 'services/multichain'\n\nexport const useApprove = (asset: Asset, hasWallet = true) => {\n  const { approveStatus } = useMidgard()\n  const { wallet } = useWallet()\n  const [isApproved, setApproved] = useState<boolean | null>(\n    hasWallet ? null : true,\n  )\n\n  const isWalletConnected = useMemo(() => hasConnectedWallet(wallet), [wallet])\n\n  useEffect(() => {\n    if (!hasWallet || !isWalletConnected) {\n      setApproved(true)\n      return\n    }\n\n    const checkApproved = async () => {\n      if (approveStatus?.[asset.toString()] === TxTrackerStatus.Success) {\n        setApproved(true)\n      }\n      const approved = await multichain.isAssetApproved(asset)\n      setApproved(approved)\n    }\n\n    checkApproved()\n  }, [asset, approveStatus, hasWallet, isWalletConnected])\n\n  const assetApproveStatus = useMemo(() => approveStatus?.[asset.toString()], [\n    approveStatus,\n    asset,\n  ])\n\n  return {\n    assetApproveStatus,\n    isApproved,\n  }\n}\n","const ORIGIN_UTXO_ERROR_MSG = 'No utxos to send'\nconst PROCESSED_UTXO_ERROR_MSG =\n  'Please wait a bit until UTXOs are confirmed and Try again.'\n\nexport const translateErrorMsg = (msg: string) => {\n  if (msg.includes(ORIGIN_UTXO_ERROR_MSG)) {\n    return PROCESSED_UTXO_ERROR_MSG\n  }\n\n  return msg\n}\n","import Swap from './Swap'\n\nexport default Swap\n"],"sourceRoot":""}