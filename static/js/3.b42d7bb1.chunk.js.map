{"version":3,"sources":["helpers/networkFee.ts","hooks/useBalance.ts","hooks/useNetworkFee.ts","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","hooks/useTxTracker.ts","assets/SVG/tx-black.svg","assets/SVG/tx-hidden.svg","assets/SVG/tx-white.svg","components/TxManager/TxManager.style.ts","../node_modules/@ant-design/icons-svg/es/asn/RollbackOutlined.js","../node_modules/@ant-design/icons/es/icons/RollbackOutlined.js","components/TxManager/TxMonitor/TxMonitor.style.ts","components/TxManager/TxMonitor/utils.ts","components/TxManager/TxMonitor/TxMonitor.tsx","components/TxManager/TxManager.tsx","hooks/useTxManager.ts","views/Swap/PanelView/PanelView.style.ts","views/Swap/PanelView/PanelView.tsx","views/Swap/Swap.style.ts","views/Swap/utils.ts","views/Swap/Swap.tsx","hooks/useApprove.ts","helpers/error.ts","views/Swap/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useBalance","dispatch","useDispatch","useSelector","state","app","wallet","midgard","reloadBalanceByChain","useCallback","walletActions","reloadAllBalance","getMaxBalance","asset","L1Chain","Amount","fromAssetAmount","gasRate","inboundFee","NetworkFee","getNetworkFeeByAsset","direction","balance","getAssetBalance","amount","maxSpendableAmount","isGasAsset","sub","mul","gt","decimal","useNetworkFee","inputAsset","outputAsset","useApp","useMidgard","pools","useMemo","outboundFee","totalFee","outboundFeeInSendAsset","AssetAmount","totalPriceIn","price","eq","add","totalFeeInUSD","Asset","USD","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","useTxTracker","addNewTxTracker","updateTxTracker","clearTxTrackers","processSubmittedTx","submitTransaction","type","submitTx","uuidv4","status","TxTrackerStatus","Submitting","action","refunded","pollTransaction","txTracker","Pending","setTxFailed","Failed","_extends","Object","assign","target","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","id","className","d","SvgTxBlack","_ref","svgRef","title","titleId","props","xmlns","viewBox","ref","ForwardRef","SvgTxHidden","SvgTxWhite","Container","styled","div","StyledButton","CoreButton","Content","Button","palette","EmptyContent","ClearRow","RollbackOutlined","React","AntdIcon","icon","RollbackOutlinedSvg","displayName","collapsed","Header","HeaderRight","HeaderBtn","color","ProgressIconWrapper","TxInformation","border","ExternalLinkWrapper","ExternalButtonLink","TxTitle","Label","isSwapType","TxTrackerType","Swap","Mint","Redeem","getSwapInTxUrl","txID","inAssets","fromAssetString","multichain","getExplorerTxUrl","getApproveTxUrl","getSwapOutTxUrl","out","outTx","coins","getSwapOutTxData","a","setDecimal","fromMidgard","ActionTypeEnum","toSignificant","name","Refund","getAddTxUrl","in","inTx","inData","addTx","isRUNE","runeTxID","assetTxID","getWithdrawSubmitTxUrl","withdrawChain","getWithdrawTxUrl","ProgressIcon","CheckCircleOutlined","LoadingOutlined","CloseCircleOutlined","TxMonitor","useState","setCollapsed","outTxData","setOutTxData","useEffect","getSwapTxData","txOutData","Success","toggle","Approve","approveAsset","ticker","outAssets","sendAsset","sendAmount","receiveAsset","receiveAmount","sendAssetName","receiveAssetName","info","AddLiquidity","poolAsset","sendAsset1","sendAmount1","sendAsset2","sendAmount2","Withdraw","withdrawAsset1","withdrawAmount1","withdrawAsset2","withdrawAmount2","Switch","getTxTitle","totalProgressStatus","getTotalProgressStatus","txColor","getTxColor","renderTxContent","sendTitle","isSynth","getSwapSendTitle","receiveTitle","getSwapReceiveTitle","link","map","assetObj","onClick","TxManager","themeType","pollTx","pollUpgradeTx","pollApprove","txTrackers","txCollapsed","setTxCollapsed","pendingTransactions","filter","tracker","useInterval","forEach","useTxManager","toggleTx","hasTxHistory","renderAllTxTrackers","handleClearHistory","round","ThemeType","DARK","Panel","theme","transparentize","background","ContentPanel","media","sm","HeaderContent","HeaderMenu","PanelView","selected","meta","children","refreshPage","useGlobalState","isRefreshVisible","useMedia","Helmet","content","Refresh","onRefresh","SettingsOverlay","ToolContainer","SwitchPair","ConfirmButtonContainer","ConfirmModalContent","RecipientAddrWrapper","SwapInfo","ApproveBtn","FancyButton","getSwapPair","pair","split","input","output","decodeFromURL","getSwapTrackerType","swap","synthType","SynthType","MINT","REDEEM","FromCard","ToCard","StyledSliderWrapper","SwapPage","history","useHistory","allPools","poolLoading","slippageTolerance","affiliates","haltedChains","useMimir","filteredAffiliates","affiliate","validateAddress","address","hasWallet","approveStatus","useWallet","isApproved","setApproved","isWalletConnected","hasConnectedWallet","isAssetApproved","approved","checkApproved","assetApproveStatus","useApprove","isTradingHalted","inTradeInboundData","outTradeInboundData","inTradeMimirStatus","outTradeMimirStatus","halted","walletConnected","hasWalletConnected","inputAssets","detail","poolAssets","assets","pool","RUNE","synthAssets","synthAsset","symbol","outputAssets","IS_SYNTH_ACTIVE","getInputAssets","inputAmount","setInputAmount","percent","setPercent","chainRecipient","setChainRecipient","recipient","setRecipient","visibleConfirmModal","setVisibleConfirmModal","visibleApproveModal","setVisibleApproveModal","affiliateFee","isLTC","isBTC","AmountType","ASSET_AMOUNT","totalFeePlusAffiliate","isValidAddress","inputAssetAmount","inboundFeeInInputAsset","outboundFeeInOutputAsset","slip","fee","error","console","log","outputAmount","outputAmountAfterFee","slipPercent","Percent","minReceive","minOutputAmount","inputAssetPriceInUSD","Price","baseAsset","priceAmount","outputAssetPriceInUSD","getWalletAddressByChain","maxInputBalance","inputAssetBalance","handleSelectInputAsset","getSwapRoute","handleSelectOutputAsset","handleSwitchPair","handleChangeInputAmount","assetAmount","toNumber","handleChangePercent","p","newAmount","handleSelectMax","handleConfirm","trackerType","trackId","txHash","msg","description","includes","Notification","message","duration","handleCancel","handleConfirmApprove","handleSwap","hasInSufficientFee","handleApprove","isValidSwap","IS_TESTNET","valid","isValid","isValidSlip","isSlipValid","btnLabel","renderConfirmModalContent","toUpperCase","truncateAddress","toFixed","tooltip","SLIP_TOOLTIP_LABEL","MIN_RECEIVED_LABEL","toCurrencyFormat","TX_FEE_TOOLTIP_LABEL","renderApproveModal","onChange","onSelect","onMax","usdPrice","value","withLabel","SwapOutlined","inputProps","disabled","chainAddr","onAddressChange","loading","visible","onOk","onCancel","SwapView","useParams","swapPair","setSwapPair","swapPairData","getPair"],"mappings":"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","file":"static/js/3.b42d7bb1.chunk.js","sourcesContent":["import { FeeOptionKey } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOptionKey, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOptionKey\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useCallback } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Asset, Amount, getAssetBalance, NetworkFee } from 'multichain-sdk'\n\nimport { SupportedChain } from 'multichain-sdk/clients/types'\n\nimport { RootState } from 'redux/store'\nimport * as walletActions from 'redux/wallet/actions'\n\nimport { getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useBalance = () => {\n  const dispatch = useDispatch()\n  const { feeOptionType } = useSelector((state: RootState) => state.app)\n  const { wallet } = useSelector((state: RootState) => state.wallet)\n  const { inboundData } = useSelector((state: RootState) => state.midgard)\n\n  const reloadBalanceByChain = useCallback(\n    (chain: SupportedChain) => {\n      dispatch(walletActions.getWalletByChain(chain))\n    },\n    [dispatch],\n  )\n\n  const reloadAllBalance = useCallback(() => {\n    dispatch(walletActions.loadAllWallets())\n  }, [dispatch])\n\n  const getMaxBalance = useCallback(\n    (asset: Asset): Amount => {\n      if (!wallet?.[asset.L1Chain as SupportedChain]) {\n        // allow max amount for emulation if wallet is not connected\n        return Amount.fromAssetAmount(0, 8)\n      }\n\n      // calculate inbound fee\n      const gasRate = getGasRateByFeeOption({\n        inboundData,\n        chain: asset.L1Chain,\n        feeOptionType,\n      })\n      const inboundFee = NetworkFee.getNetworkFeeByAsset({\n        asset,\n        gasRate,\n        direction: 'inbound',\n      })\n\n      const balance = getAssetBalance(asset, wallet).amount\n\n      /**\n       * if asset is used for gas, subtract the inbound gas fee from input amount\n       * else allow full amount\n       * Calc: max spendable amount = balance amount - 2 x gas fee(if send asset equals to gas asset)\n       */\n\n      const maxSpendableAmount = asset.isGasAsset()\n        ? balance.sub(inboundFee.mul(1.5).amount)\n        : balance\n\n      if (maxSpendableAmount.gt(0)) {\n        return maxSpendableAmount\n      }\n\n      return Amount.fromAssetAmount(0, asset.decimal)\n    },\n    [wallet, feeOptionType, inboundData],\n  )\n\n  return {\n    getMaxBalance,\n    reloadAllBalance,\n    reloadBalanceByChain,\n    wallet,\n  }\n}\n","import { useMemo } from 'react'\n\nimport { Asset, Amount, AssetAmount, NetworkFee, Pool } from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport { getGasRateByChain, getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useNetworkFee = ({\n  inputAsset,\n  outputAsset,\n}: {\n  inputAsset: Asset\n  outputAsset?: Asset\n}) => {\n  const { feeOptionType } = useApp()\n  const { inboundData, pools } = useMidgard()\n\n  const inboundFee = useMemo(() => {\n    // get inbound gasRate with fee option\n\n    const gasRate = getGasRateByFeeOption({\n      inboundData,\n      chain: inputAsset.L1Chain,\n      feeOptionType,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: inputAsset,\n      gasRate,\n      direction: 'inbound',\n    })\n\n    return networkFee\n  }, [inputAsset, inboundData, feeOptionType])\n\n  const outboundFee = useMemo(() => {\n    if (!outputAsset) return null\n\n    const gasRate = getGasRateByChain({\n      inboundData,\n      chain: outputAsset.L1Chain,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: outputAsset,\n      gasRate,\n      direction: 'outbound',\n    })\n\n    return networkFee\n  }, [outputAsset, inboundData])\n\n  const totalFee = useMemo(() => {\n    if (!outboundFee) return inboundFee\n\n    const outboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        outboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n\n    if (inboundFee.asset.eq(inputAsset)) {\n      return inboundFee.add(outboundFeeInSendAsset)\n    }\n\n    const inboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        inboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n    return inboundFeeInSendAsset.add(outboundFeeInSendAsset)\n  }, [inputAsset, inboundFee, outboundFee, pools])\n\n  const totalFeeInUSD = useMemo(\n    () => totalFee.totalPriceIn(Asset.USD(), pools),\n    [totalFee, pools],\n  )\n\n  return {\n    totalFee,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n  }\n}\n\nexport const getSumAmountInUSD = (\n  assetAmount1: AssetAmount | null,\n  assetAmount2: AssetAmount | null,\n  pools: Pool[],\n) => {\n  const assetAmount1InUSD = assetAmount1?.totalPriceIn(Asset.USD(), pools)\n  const assetAmount2InUSD = assetAmount2?.totalPriceIn(Asset.USD(), pools)\n\n  if (assetAmount1 === null && assetAmount2InUSD)\n    return assetAmount2InUSD.toCurrencyFormat()\n  if (assetAmount2 === null && assetAmount1InUSD)\n    return assetAmount1InUSD.toCurrencyFormat()\n\n  if (assetAmount1InUSD && assetAmount2InUSD) {\n    const sum = assetAmount1InUSD.raw().plus(assetAmount2InUSD.raw())\n\n    return Amount.fromAssetAmount(sum, 8).toFixed(2)\n  }\n\n  return Amount.fromAssetAmount(0, 8).toFixed()\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { useCallback } from 'react'\n\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, SubmitTx, TxTrackerType } from 'redux/midgard/types'\n\n/**\n * 1. send transaction and get txHash\n * 2. poll midgard action API and get \"in\" tx with the same txHash\n * 3. check action status (success, pending)\n * 4. check action type and match with send tx type\n *    (if action type is not \"refund\", action type should be matched to the send type)\n */\n\nexport const useTxTracker = () => {\n  const {\n    addNewTxTracker,\n    updateTxTracker,\n    clearTxTrackers,\n    processSubmittedTx,\n  } = useMidgard()\n\n  // confirm and submit a transaction\n  const submitTransaction = useCallback(\n    ({\n      type,\n      submitTx,\n    }: {\n      type: TxTrackerType\n      submitTx: SubmitTx\n    }): string => {\n      const uuid = uuidv4()\n\n      addNewTxTracker({\n        uuid,\n        type,\n        status: TxTrackerStatus.Submitting,\n        submitTx,\n        action: null,\n        refunded: null,\n      })\n\n      return uuid\n    },\n    [addNewTxTracker],\n  )\n\n  // start polling a transaction\n  const pollTransaction = useCallback(\n    ({\n      uuid,\n      submitTx,\n      type,\n    }: {\n      uuid: string\n      submitTx: SubmitTx\n      type: TxTrackerType\n    }) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Pending,\n          submitTx,\n        },\n      })\n      processSubmittedTx({ submitTx, type })\n    },\n    [updateTxTracker, processSubmittedTx],\n  )\n\n  // start polling a transaction\n  const setTxFailed = useCallback(\n    (uuid: string) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Failed,\n        },\n      })\n    },\n    [updateTxTracker],\n  )\n\n  return {\n    submitTransaction,\n    pollTransaction,\n    clearTxTrackers,\n    setTxFailed,\n  }\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", null, \".cls-1{fill:#231f20;}\"));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Layer_2\",\n  \"data-name\": \"Layer 2\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Layer_1-2\",\n  \"data-name\": \"Layer 1\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M40.29,0A40.29,40.29,0,1,0,80.57,40.29,40.29,40.29,0,0,0,40.29,0Zm0,73.65A33.37,33.37,0,1,1,73.65,40.29,33.37,33.37,0,0,1,40.29,73.65Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M32.92,52.54a7.66,7.66,0,0,1-3.94-1,7.27,7.27,0,0,1-2.66-2.68,7.41,7.41,0,0,1-1-3.74V32.94H18.71V28H37.85v4.9H31.24v12.7a1.93,1.93,0,0,0,.58,1.4,1.83,1.83,0,0,0,1.38.6h1.92v4.9Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M39.88,52.54,46.29,42a9.3,9.3,0,0,1-2.94-1.87,8.19,8.19,0,0,1-1.91-2.82,9.7,9.7,0,0,1-.68-3.71V28h5.88V34a3.91,3.91,0,0,0,.37,1.7,3.23,3.23,0,0,0,1.05,1.29,3.42,3.42,0,0,0,1.59.65L55.32,28h6.54l-6.4,10.32a9.29,9.29,0,0,1,3.36,1.75A7.84,7.84,0,0,1,61,43a9.44,9.44,0,0,1,.77,3.91v5.6H55.91V46.66a3.85,3.85,0,0,0-1-2.68,3.53,3.53,0,0,0-2.73-1.14l-5.77,9.7Z\"\n})));\n\nfunction SvgTxBlack(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 80.57 80.57\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTxBlack);\nexport default __webpack_public_path__ + \"static/media/tx-black.a6c035f9.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", null, \".cls-1{fill:#6d6e71;}\"));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Layer_2\",\n  \"data-name\": \"Layer 2\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Layer_1-2\",\n  \"data-name\": \"Layer 1\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M40.29,0A40.29,40.29,0,1,0,80.57,40.29,40.29,40.29,0,0,0,40.29,0Zm0,73.65A33.37,33.37,0,1,1,73.65,40.29,33.37,33.37,0,0,1,40.29,73.65Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M32.92,52.54a7.66,7.66,0,0,1-3.94-1,7.27,7.27,0,0,1-2.66-2.68,7.41,7.41,0,0,1-1-3.74V32.94H18.71V28H37.85v4.9H31.24v12.7a1.93,1.93,0,0,0,.58,1.4,1.83,1.83,0,0,0,1.38.6h1.92v4.9Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M39.88,52.54,46.29,42a9.3,9.3,0,0,1-2.94-1.87,8.19,8.19,0,0,1-1.91-2.82,9.7,9.7,0,0,1-.68-3.71V28h5.88V34a3.91,3.91,0,0,0,.37,1.7,3.23,3.23,0,0,0,1.05,1.29,3.42,3.42,0,0,0,1.59.65L55.32,28h6.54l-6.4,10.32a9.29,9.29,0,0,1,3.36,1.75A7.84,7.84,0,0,1,61,43a9.44,9.44,0,0,1,.77,3.91v5.6H55.91V46.66a3.85,3.85,0,0,0-1-2.68,3.53,3.53,0,0,0-2.73-1.14l-5.77,9.7Z\"\n})));\n\nfunction SvgTxHidden(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 80.57 80.57\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTxHidden);\nexport default __webpack_public_path__ + \"static/media/tx-hidden.a6499207.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", null, \".cls-1{fill:#fff;}\"));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Layer_2\",\n  \"data-name\": \"Layer 2\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Layer_1-2\",\n  \"data-name\": \"Layer 1\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M40.29,0A40.29,40.29,0,1,0,80.57,40.29,40.29,40.29,0,0,0,40.29,0Zm0,73.65A33.37,33.37,0,1,1,73.65,40.29,33.37,33.37,0,0,1,40.29,73.65Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M32.92,52.54a7.66,7.66,0,0,1-3.94-1,7.27,7.27,0,0,1-2.66-2.68,7.41,7.41,0,0,1-1-3.74V32.94H18.71V28H37.85v4.9H31.24v12.7a1.93,1.93,0,0,0,.58,1.4,1.83,1.83,0,0,0,1.38.6h1.92v4.9Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M39.88,52.54,46.29,42a9.3,9.3,0,0,1-2.94-1.87,8.19,8.19,0,0,1-1.91-2.82,9.7,9.7,0,0,1-.68-3.71V28h5.88V34a3.91,3.91,0,0,0,.37,1.7,3.23,3.23,0,0,0,1.05,1.29,3.42,3.42,0,0,0,1.59.65L55.32,28h6.54l-6.4,10.32a9.29,9.29,0,0,1,3.36,1.75A7.84,7.84,0,0,1,61,43a9.44,9.44,0,0,1,.77,3.91v5.6H55.91V46.66a3.85,3.85,0,0,0-1-2.68,3.53,3.53,0,0,0-2.73-1.14l-5.77,9.7Z\"\n})));\n\nfunction SvgTxWhite(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 80.57 80.57\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTxWhite);\nexport default __webpack_public_path__ + \"static/media/tx-white.a7a28278.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nimport { Button, CoreButton } from '../UIElements'\n\nexport const Container = styled.div<{ collapsed: boolean }>`\n  background: transparent;\n  //margin-left: min(1vw, 15px);\n  //margin-right: min(1vw, 15px);\n  margin-bottom: 0px;\n  justify-content: left;\n`\nexport const StyledButton = styled(CoreButton)`\n  min-width: 30px !important;\n  padding: 0;\n  margin-left: 0;\n\n  svg {\n    width: 20px;\n    height: 20px;\n    stroke: none;\n    /* fill: ${palette('text', 0)}; */\n    /* outline: none;\n    fill: ${palette('background', 1)}; */\n  }\n`\nexport const Options = styled(Button)`\n  width: 1px;\n  padding: 0;\n  margin-top: 1px;\n  text-align: left;\n  border: white;\n`\n\nexport const Header = styled.div`\n  display: flex;\n  width: 56px;\n  height: 32px;\n\n  button {\n    padding-top: 2px;\n\n    width: 100%;\n    height: 100%;\n  }\n\n  z-index: 200;\n`\n\nexport const Content = styled.div`\n  display: flex;\n  background: ${palette('background', 1)};\n  flex-direction: column;\n\n  position: absolute;\n  left: 20px;\n  top: 90px;\n`\n\nexport const EmptyContent = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  position: absolute;\n  left: 20px;\n  top: 90px;\n\n  padding: 4px 8px;\n\n  border: 1px solid ${palette('gray', 0)};\n  border-radius: 4px;\n`\n\nexport const ClearRow = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: ${palette('background', 8)};\n\n  height: 30px;\n\n  &:hover {\n    cursor: pointer;\n  }\n`\n","// This icon file is generated automatically.\nvar RollbackOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M793 242H366v-74c0-6.7-7.7-10.4-12.9-6.3l-142 112a8 8 0 000 12.6l142 112c5.2 4.1 12.9.4 12.9-6.3v-74h415v470H175c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h618c35.3 0 64-28.7 64-64V306c0-35.3-28.7-64-64-64z\" } }] }, \"name\": \"rollback\", \"theme\": \"outlined\" };\nexport default RollbackOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport RollbackOutlinedSvg from \"@ant-design/icons-svg/es/asn/RollbackOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar RollbackOutlined = function RollbackOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: RollbackOutlinedSvg\n  }));\n};\n\nRollbackOutlined.displayName = 'RollbackOutlined';\nexport default /*#__PURE__*/React.forwardRef(RollbackOutlined);","import styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nimport { ExternalButtonLink } from '../../Link'\nimport { CoreButton, Label } from '../../UIElements'\n\nexport const Container = styled.div<{ collapsed: boolean }>`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  border: 1px solid ${palette('gray', 0)};\n  background: ${palette('background', 1)};\n\n  height: ${(props) => (props.collapsed ? '42px' : 'auto')};\n\n  overflow: hidden;\n`\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  padding: 4px 4px 4px 8px;\n`\n\nexport const HeaderRight = styled.div`\n  display: flex;\n  align-items: center;\n\n  button {\n  }\n`\n\nexport const HeaderBtn = styled(CoreButton)<{\n  color: 'primary' | 'success' | 'warning' | 'error'\n}>`\n  margin-left: 0;\n\n  svg {\n    stroke: ${(props) => palette(props.color, 0)};\n  }\n`\n\nexport const TxMonitor = styled.div<{ collapsed: boolean }>`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  height: ${(props) => (props.collapsed ? '50px' : 'auto')};\n`\n\nexport const ProgressIconWrapper = styled.div<{\n  color: 'primary' | 'success' | 'warning' | 'error'\n}>`\n  padding: 2px;\n  margin-right: 6px;\n\n  svg {\n    color: ${(props) => palette(props.color, 0)};\n  }\n`\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  border-top: 1px solid ${palette('gray', 0)};\n  background: ${palette('background', 3)};\n\n  padding: 4px 4px;\n`\n\nexport const TxInformation = styled.div<{ border?: boolean }>`\n  display: flex;\n  align-items: center;\n\n  width: 100%;\n  padding: 4px;\n\n  border-top: 1px solid ${palette('gray', 0)};\n  border-top-width: ${(props) => (props.border ? '1px' : '0px')};\n`\n\nexport const ExternalLinkWrapper = styled(ExternalButtonLink)<{\n  color: 'primary' | 'success' | 'warning' | 'error'\n}>`\n  margin-left: auto;\n  margin-right: 4px;\n  svg {\n    width: 16px;\n    height: 16px;\n    stroke: ${(props) => palette(props.color, 0)};\n  }\n`\n\nexport const TxTitle = styled(Label)`\n  flex: 1;\n`\n","import { ActionTypeEnum, Transaction } from 'midgard-sdk'\nimport { Asset, Amount } from 'multichain-sdk'\n\nimport { TxTracker, TxTrackerStatus, TxTrackerType } from 'redux/midgard/types'\n\nimport { multichain } from 'services/multichain'\n\nimport { ProgressStatus } from './types'\n\nexport const isSwapType = (txTracker: TxTracker): boolean => {\n  if (\n    txTracker.type === TxTrackerType.Swap ||\n    txTracker.type === TxTrackerType.Mint ||\n    txTracker.type === TxTrackerType.Redeem\n  ) {\n    return true\n  }\n\n  return false\n}\n\nexport const getSwapSendTitle = ({\n  sendAsset,\n  receiveAsset,\n}: {\n  sendAsset: string\n  receiveAsset: string\n}) => {\n  if (\n    Asset.fromAssetString(sendAsset)?.isSynth &&\n    Asset.fromAssetString(receiveAsset)?.isSynth === false\n  )\n    return 'Burn'\n  return 'Send'\n}\n\nexport const getSwapReceiveTitle = ({\n  sendAsset,\n  receiveAsset,\n}: {\n  sendAsset: string\n  receiveAsset: string\n}) => {\n  if (\n    Asset.fromAssetString(sendAsset)?.isSynth === false &&\n    Asset.fromAssetString(receiveAsset)?.isSynth\n  )\n    return 'Mint'\n  return 'Receive'\n}\n\nexport const getTxTitle = (txTracker: TxTracker): string => {\n  const { type, submitTx } = txTracker\n\n  if (type === TxTrackerType.Approve) {\n    const { inAssets = [] } = submitTx\n    const { asset: approveAsset } = inAssets[0]\n\n    const info = `Approve ${Asset.fromAssetString(approveAsset)?.ticker}`\n\n    return info\n  }\n\n  if (isSwapType(txTracker)) {\n    const { inAssets = [], outAssets = [] } = submitTx\n    const { asset: sendAsset, amount: sendAmount } = inAssets[0]\n    const { asset: receiveAsset, amount: receiveAmount } = outAssets[0]\n\n    const sendAssetName = Asset.fromAssetString(sendAsset)?.name\n    const receiveAssetName = Asset.fromAssetString(receiveAsset)?.name\n    let info = ''\n\n    if (txTracker.type === TxTrackerType.Swap) {\n      info = `Swap ${sendAmount} ${sendAssetName} for ${receiveAmount} ${receiveAssetName}`\n    } else if (txTracker.type === TxTrackerType.Mint) {\n      info = `Mint ${receiveAmount} ${receiveAssetName} from ${sendAmount} ${sendAssetName}`\n    } else if (txTracker.type === TxTrackerType.Redeem) {\n      info = `Redeem ${sendAmount} ${sendAssetName} for ${receiveAmount} ${receiveAssetName}`\n    }\n\n    return info\n  }\n\n  if (type === TxTrackerType.AddLiquidity) {\n    const { inAssets = [], poolAsset = '' } = submitTx\n\n    // sym add liquidity\n    if (inAssets.length === 2) {\n      const { asset: sendAsset1, amount: sendAmount1 } = inAssets[0]\n      const { asset: sendAsset2, amount: sendAmount2 } = inAssets[1]\n\n      const info = `Add ${sendAmount1} ${\n        Asset.fromAssetString(sendAsset1)?.ticker\n      }, ${sendAmount2} ${\n        Asset.fromAssetString(sendAsset2)?.ticker\n      } to ${poolAsset} Pool`\n\n      return info\n    }\n\n    // asym add\n    if (inAssets.length === 1) {\n      const { asset: sendAsset1, amount: sendAmount1 } = inAssets[0]\n\n      const info = `Add ${sendAmount1} ${\n        Asset.fromAssetString(sendAsset1)?.ticker\n      } to ${poolAsset} Pool`\n\n      return info\n    }\n  }\n\n  if (type === TxTrackerType.Withdraw) {\n    const { outAssets = [] } = submitTx\n\n    // sym withdraw\n    if (outAssets.length === 2) {\n      const { asset: withdrawAsset1, amount: withdrawAmount1 } = outAssets[0]\n      const { asset: withdrawAsset2, amount: withdrawAmount2 } = outAssets[1]\n\n      const info = `Withdraw ${withdrawAmount1} ${\n        Asset.fromAssetString(withdrawAsset1)?.ticker\n      }, ${withdrawAmount2} ${Asset.fromAssetString(withdrawAsset2)?.ticker}`\n\n      return info\n    }\n\n    // asym withdraw\n    if (outAssets.length === 1) {\n      const { asset: withdrawAsset1, amount: withdrawAmount1 } = outAssets[0]\n\n      const info = `Withdraw ${withdrawAmount1} ${\n        Asset.fromAssetString(withdrawAsset1)?.ticker\n      }`\n\n      return info\n    }\n  }\n\n  if (type === TxTrackerType.Switch) {\n    const { inAssets = [] } = submitTx\n    const { asset: sendAsset, amount: sendAmount } = inAssets[0]\n\n    const info = `Upgrade ${sendAmount} ${\n      Asset.fromAssetString(sendAsset)?.chain\n    } ${Asset.fromAssetString(sendAsset)?.ticker} for Native RUNE`\n\n    return info\n  }\n\n  return 'Transaction'\n}\n\nexport const getTotalProgressStatus = (\n  txTracker: TxTracker,\n): ProgressStatus => {\n  if (txTracker.status === TxTrackerStatus.Failed) return 'failed'\n\n  if (txTracker.status === TxTrackerStatus.Success) {\n    if (txTracker.refunded) {\n      return 'refunded'\n    }\n\n    return 'success'\n  }\n\n  return 'pending'\n}\n\nexport const getTxColor = (txTracker: TxTracker) => {\n  if (txTracker.status === TxTrackerStatus.Failed) return 'error'\n\n  if (txTracker.status === TxTrackerStatus.Success) {\n    if (txTracker.refunded) {\n      return 'warning'\n    }\n\n    return 'success'\n  }\n\n  return 'primary'\n}\n\nexport const getSwapInTxUrl = (txTracker: TxTracker): string => {\n  const { submitTx } = txTracker\n\n  if (submitTx?.txID) {\n    const { inAssets = [], txID } = submitTx\n    const asset = Asset.fromAssetString(inAssets[0].asset)\n\n    if (asset) {\n      return multichain.getExplorerTxUrl(asset.chain, txID)\n    }\n  }\n\n  return '#'\n}\n\nexport const getApproveTxUrl = (txTracker: TxTracker): string => {\n  const { submitTx } = txTracker\n\n  if (submitTx?.txID) {\n    const { inAssets = [], txID } = submitTx\n    const asset = Asset.fromAssetString(inAssets[0].asset)\n\n    if (asset) {\n      return multichain.getExplorerTxUrl(asset.chain, txID)\n    }\n  }\n\n  return '#'\n}\n\nexport const getSwapOutTxUrl = (txTracker: TxTracker): string => {\n  const { action } = txTracker\n\n  if (action?.out) {\n    const outTx = action.out[0]\n    const asset = Asset.fromAssetString(outTx?.coins?.[0]?.asset)\n\n    if (asset) {\n      // add 0x for eth tx\n      if (asset.chain === 'ETH') {\n        return multichain.getExplorerTxUrl(asset.chain, `0x${outTx?.txID}`)\n      }\n      return multichain.getExplorerTxUrl(asset.chain, outTx?.txID)\n    }\n  }\n\n  return '#'\n}\n\n/**\n * @param txTracker tx tracking data\n * @returns exact received swap data based on the midgard action\n */\nexport const getSwapOutTxData = async (\n  txTracker: TxTracker,\n): Promise<string | null> => {\n  const { action } = txTracker\n\n  if (action?.out) {\n    const outTx = action.out[0]\n    const asset = Asset.fromAssetString(outTx?.coins?.[0]?.asset)\n\n    if (asset) {\n      await asset?.setDecimal()\n\n      const amount = Amount.fromMidgard(outTx?.coins?.[0]?.amount)\n\n      if (action.type === ActionTypeEnum.Swap) {\n        if (txTracker.type === TxTrackerType.Swap) {\n          return `Received ${amount.toSignificant(6)} ${asset.name}`\n        }\n\n        if (txTracker.type === TxTrackerType.Mint) {\n          return `Minted ${amount.toSignificant(6)} ${asset.name}`\n        }\n\n        if (txTracker.type === TxTrackerType.Redeem) {\n          return `Redeemed ${amount.toSignificant(6)} ${asset.name}`\n        }\n      }\n\n      if (action.type === ActionTypeEnum.Refund) {\n        return `Refunded ${amount.toSignificant(6)} ${asset.name}`\n      }\n    }\n  }\n\n  return null\n}\n\nexport const getAddTxUrl = ({\n  asset,\n  txTracker,\n}: {\n  asset: Asset\n  txTracker: TxTracker\n}): string => {\n  const { action, submitTx } = txTracker\n\n  if (action?.in) {\n    const inTx = action.in.find(\n      (inData: Transaction) => inData.coins?.[0].asset === asset?.toString(),\n    )\n\n    if (inTx) {\n      // add 0x for eth tx\n      if (asset.chain === 'ETH') {\n        return multichain.getExplorerTxUrl(asset.chain, `0x${inTx?.txID}`)\n      }\n\n      return multichain.getExplorerTxUrl(asset.chain, inTx?.txID)\n    }\n  } else if (submitTx.addTx) {\n    const { addTx } = submitTx\n\n    if (asset.isRUNE() && addTx.runeTxID) {\n      return multichain.getExplorerTxUrl(asset.chain, addTx.runeTxID)\n    }\n\n    if (addTx.assetTxID) {\n      return multichain.getExplorerTxUrl(asset.chain, addTx.assetTxID)\n    }\n  }\n\n  return '#'\n}\n\nexport const getWithdrawSubmitTxUrl = (txTracker: TxTracker): string => {\n  const { submitTx } = txTracker\n\n  if (submitTx?.txID && submitTx?.withdrawChain) {\n    const { withdrawChain, txID } = submitTx\n\n    return multichain.getExplorerTxUrl(withdrawChain, txID)\n  }\n\n  return '#'\n}\n\nexport const getWithdrawTxUrl = ({\n  asset,\n  txTracker,\n}: {\n  asset: Asset\n  txTracker: TxTracker\n}): string => {\n  const { action } = txTracker\n\n  if (action?.out) {\n    const outTx = action.out.find(\n      (data: Transaction) => data.coins?.[0].asset === asset?.toString(),\n    )\n\n    if (outTx) {\n      // add 0x for eth tx\n      if (asset.chain === 'ETH') {\n        return multichain.getExplorerTxUrl(asset.chain, `0x${outTx?.txID}`)\n      }\n      return multichain.getExplorerTxUrl(asset.chain, outTx?.txID)\n    }\n  }\n\n  return '#'\n}\n","import React, { useMemo } from 'react'\n\nimport { ChevronUp, ChevronDown, ExternalLink } from 'react-feather'\n\nimport {\n  CheckCircleOutlined,\n  LoadingOutlined,\n  RollbackOutlined,\n  CloseCircleOutlined,\n} from '@ant-design/icons'\nimport { Asset } from 'multichain-sdk'\n\nimport { TxTracker, TxTrackerStatus, TxTrackerType } from 'redux/midgard/types'\n\nimport { Label } from '../../UIElements'\nimport * as Styled from './TxMonitor.style'\nimport { ProgressStatus } from './types'\nimport {\n  getApproveTxUrl,\n  getSwapInTxUrl,\n  getSwapOutTxUrl,\n  getSwapOutTxData,\n  getTxTitle,\n  getTotalProgressStatus,\n  getTxColor,\n  getAddTxUrl,\n  getWithdrawTxUrl,\n  getWithdrawSubmitTxUrl,\n  isSwapType,\n  getSwapSendTitle,\n  getSwapReceiveTitle,\n} from './utils'\n\nconst ProgressIcon = ({ status }: { status: ProgressStatus }) => {\n  if (status === 'refunded') {\n    return (\n      <Styled.ProgressIconWrapper color=\"warning\">\n        <RollbackOutlined />\n      </Styled.ProgressIconWrapper>\n    )\n  }\n  if (status === 'success') {\n    return (\n      <Styled.ProgressIconWrapper color=\"success\">\n        <CheckCircleOutlined />\n      </Styled.ProgressIconWrapper>\n    )\n  }\n\n  if (status === 'pending') {\n    return (\n      <Styled.ProgressIconWrapper color=\"primary\">\n        <LoadingOutlined />\n      </Styled.ProgressIconWrapper>\n    )\n  }\n\n  return (\n    <Styled.ProgressIconWrapper color=\"error\">\n      <CloseCircleOutlined />\n    </Styled.ProgressIconWrapper>\n  )\n}\n\nexport const TxMonitor = ({ txTracker }: { txTracker: TxTracker }) => {\n  const [collapsed, setCollapsed] = React.useState(true)\n  const [outTxData, setOutTxData] = React.useState<string>('')\n\n  React.useEffect(() => {\n    const getSwapTxData = async () => {\n      const txOutData = await getSwapOutTxData(txTracker)\n\n      if (txOutData) {\n        setOutTxData(txOutData)\n      }\n    }\n\n    if (txTracker.status === TxTrackerStatus.Success) {\n      if (txTracker.type === TxTrackerType.Swap) {\n        getSwapTxData()\n      }\n    }\n  }, [txTracker])\n\n  const toggle = React.useCallback(() => {\n    setCollapsed(!collapsed)\n  }, [collapsed])\n\n  const title = useMemo(() => getTxTitle(txTracker), [txTracker])\n\n  const totalProgressStatus: ProgressStatus = useMemo(\n    () => getTotalProgressStatus(txTracker),\n    [txTracker],\n  )\n\n  const txColor = useMemo(() => getTxColor(txTracker), [txTracker])\n\n  const renderTxContent = useMemo(() => {\n    const { type, status, submitTx } = txTracker\n\n    if (isSwapType(txTracker)) {\n      const { inAssets = [], outAssets = [] } = submitTx\n      const { asset: sendAsset, amount: sendAmount } = inAssets[0]\n      const { asset: receiveAsset, amount: receiveAmount } = outAssets[0]\n\n      const sendTitle = getSwapSendTitle({\n        sendAsset,\n        receiveAsset,\n      })\n\n      const receiveTitle = getSwapReceiveTitle({\n        sendAsset,\n        receiveAsset,\n      })\n\n      if (status === TxTrackerStatus.Failed) {\n        return (\n          <Styled.TxInformation>\n            <ProgressIcon status=\"failed\" />\n            <Label color=\"error\">\n              {sendTitle} {sendAmount} {Asset.fromAssetString(sendAsset)?.name}{' '}\n              Failed\n            </Label>\n          </Styled.TxInformation>\n        )\n      }\n\n      return (\n        <>\n          <Styled.TxInformation>\n            <ProgressIcon\n              status={\n                status === TxTrackerStatus.Submitting ? 'pending' : 'success'\n              }\n            />\n            <Label color=\"primary\">\n              {sendTitle} {sendAmount} {Asset.fromAssetString(sendAsset)?.name}\n            </Label>\n            {status !== TxTrackerStatus.Submitting && (\n              <Styled.ExternalLinkWrapper\n                link={getSwapInTxUrl(txTracker)}\n                color=\"primary\"\n              >\n                <ExternalLink />\n              </Styled.ExternalLinkWrapper>\n            )}\n          </Styled.TxInformation>\n          {status !== TxTrackerStatus.Submitting && (\n            <Styled.TxInformation border>\n              <ProgressIcon\n                status={\n                  status === TxTrackerStatus.Success ? 'success' : 'pending'\n                }\n              />\n              <Label color=\"primary\">\n                {status === TxTrackerStatus.Pending &&\n                  `${receiveTitle} ${receiveAmount} ${\n                    Asset.fromAssetString(receiveAsset)?.name\n                  }`}\n                {status === TxTrackerStatus.Success && outTxData\n                  ? outTxData\n                  : ''}\n              </Label>\n              {status === TxTrackerStatus.Success && (\n                <Styled.ExternalLinkWrapper\n                  link={getSwapOutTxUrl(txTracker)}\n                  color=\"primary\"\n                >\n                  <ExternalLink />\n                </Styled.ExternalLinkWrapper>\n              )}\n            </Styled.TxInformation>\n          )}\n        </>\n      )\n    }\n\n    if (type === TxTrackerType.AddLiquidity) {\n      const { inAssets = [] } = submitTx\n\n      return (\n        <>\n          {txTracker.refunded && (\n            <Styled.TxInformation key=\"refunded\">\n              <ProgressIcon status=\"refunded\" />\n              <Label color=\"warning\">Refunded</Label>\n            </Styled.TxInformation>\n          )}\n          {!txTracker.refunded &&\n            inAssets.map(({ asset, amount }) => {\n              const assetObj = Asset.fromAssetString(asset)\n              if (!assetObj) return null\n\n              return (\n                <Styled.TxInformation key={asset}>\n                  <ProgressIcon\n                    status={\n                      status !== TxTrackerStatus.Success ? 'pending' : 'success'\n                    }\n                  />\n                  <Label color=\"primary\">\n                    {status !== TxTrackerStatus.Success\n                      ? `Add ${amount} ${assetObj?.ticker}`\n                      : `Added ${amount} ${assetObj?.ticker}`}\n                  </Label>\n                  {status !== TxTrackerStatus.Submitting && (\n                    <Styled.ExternalLinkWrapper\n                      link={getAddTxUrl({ asset: assetObj, txTracker })}\n                      color=\"primary\"\n                    >\n                      <ExternalLink />\n                    </Styled.ExternalLinkWrapper>\n                  )}\n                </Styled.TxInformation>\n              )\n            })}\n        </>\n      )\n    }\n\n    if (type === TxTrackerType.Withdraw) {\n      const { outAssets = [] } = submitTx\n\n      return (\n        <>\n          <Styled.TxInformation>\n            <ProgressIcon\n              status={\n                status === TxTrackerStatus.Submitting ? 'pending' : 'success'\n              }\n            />\n            <Label color=\"primary\">Submit Withdraw TX</Label>\n            {status !== TxTrackerStatus.Submitting && (\n              <Styled.ExternalLinkWrapper\n                link={getWithdrawSubmitTxUrl(txTracker)}\n                color=\"primary\"\n              >\n                <ExternalLink />\n              </Styled.ExternalLinkWrapper>\n            )}\n          </Styled.TxInformation>\n          {txTracker.refunded && (\n            <Styled.TxInformation key=\"refunded\">\n              <ProgressIcon status=\"refunded\" />\n              <Label color=\"warning\">Refunded</Label>\n            </Styled.TxInformation>\n          )}\n          {!txTracker.refunded &&\n            status !== TxTrackerStatus.Submitting &&\n            outAssets.map(({ asset, amount }) => {\n              const assetObj = Asset.fromAssetString(asset)\n              if (!assetObj) return null\n\n              return (\n                <Styled.TxInformation key={asset}>\n                  <ProgressIcon\n                    status={\n                      status !== TxTrackerStatus.Success ? 'pending' : 'success'\n                    }\n                  />\n                  <Label color=\"primary\">\n                    {status !== TxTrackerStatus.Success\n                      ? `Withdraw ${amount} ${assetObj?.ticker}`\n                      : `Withdraw ${amount} ${assetObj?.ticker} Finished`}\n                  </Label>\n                  {status === TxTrackerStatus.Success && (\n                    <Styled.ExternalLinkWrapper\n                      link={getWithdrawTxUrl({ asset: assetObj, txTracker })}\n                      color=\"primary\"\n                    >\n                      <ExternalLink />\n                    </Styled.ExternalLinkWrapper>\n                  )}\n                </Styled.TxInformation>\n              )\n            })}\n        </>\n      )\n    }\n\n    if (type === TxTrackerType.Switch) {\n      const { inAssets = [], outAssets = [] } = submitTx\n      const { asset: sendAsset, amount: sendAmount } = inAssets[0]\n      const { amount: receiveAmount } = outAssets[0]\n\n      return (\n        <>\n          <Styled.TxInformation>\n            <ProgressIcon\n              status={\n                status === TxTrackerStatus.Submitting ? 'pending' : 'success'\n              }\n            />\n            <Label color=\"primary\">\n              Send {sendAmount} {Asset.fromAssetString(sendAsset)?.chain}{' '}\n              {Asset.fromAssetString(sendAsset)?.ticker}\n            </Label>\n            {status !== TxTrackerStatus.Submitting && (\n              <Styled.ExternalLinkWrapper\n                link={getSwapInTxUrl(txTracker)}\n                color=\"primary\"\n              >\n                <ExternalLink />\n              </Styled.ExternalLinkWrapper>\n            )}\n          </Styled.TxInformation>\n          {status !== TxTrackerStatus.Submitting && (\n            <Styled.TxInformation border>\n              <ProgressIcon\n                status={\n                  status !== TxTrackerStatus.Success ? 'pending' : 'success'\n                }\n              />\n              <Label color=\"primary\">\n                {status === TxTrackerStatus.Pending &&\n                  `Receive ${receiveAmount} Native RUNE`}\n                {status === TxTrackerStatus.Success &&\n                  `Received ${receiveAmount} Native RUNE`}\n              </Label>\n              {status === TxTrackerStatus.Success && (\n                <Styled.ExternalLinkWrapper\n                  link={getSwapOutTxUrl(txTracker)}\n                  color=\"primary\"\n                >\n                  <ExternalLink />\n                </Styled.ExternalLinkWrapper>\n              )}\n            </Styled.TxInformation>\n          )}\n        </>\n      )\n    }\n\n    if (type === TxTrackerType.Approve) {\n      const { inAssets = [] } = submitTx\n      const { asset: approveAsset } = inAssets[0]\n\n      if (status === TxTrackerStatus.Failed) {\n        return (\n          <Styled.TxInformation>\n            <ProgressIcon status=\"failed\" />\n            <Label color=\"error\">\n              Approve {Asset.fromAssetString(approveAsset)?.ticker} Failed\n            </Label>\n          </Styled.TxInformation>\n        )\n      }\n\n      return (\n        <>\n          <Styled.TxInformation>\n            <ProgressIcon\n              status={\n                status === TxTrackerStatus.Submitting ? 'pending' : 'success'\n              }\n            />\n            <Label color=\"primary\">\n              {status === TxTrackerStatus.Pending &&\n                `Approve ${Asset.fromAssetString(approveAsset)?.ticker}`}\n              {status === TxTrackerStatus.Success &&\n                `Approved ${Asset.fromAssetString(approveAsset)?.ticker}`}\n            </Label>\n            {status !== TxTrackerStatus.Submitting && (\n              <Styled.ExternalLinkWrapper\n                link={getApproveTxUrl(txTracker)}\n                color=\"primary\"\n              >\n                <ExternalLink />\n              </Styled.ExternalLinkWrapper>\n            )}\n          </Styled.TxInformation>\n        </>\n      )\n    }\n\n    return null\n  }, [txTracker, outTxData])\n\n  return (\n    <Styled.Container collapsed={collapsed}>\n      <Styled.Header>\n        <ProgressIcon status={totalProgressStatus} />\n        <Styled.TxTitle color={txColor}>{title}</Styled.TxTitle>\n        <Styled.HeaderRight>\n          <Styled.HeaderBtn onClick={toggle} color={txColor}>\n            {!collapsed ? <ChevronUp /> : <ChevronDown />}\n          </Styled.HeaderBtn>\n        </Styled.HeaderRight>\n      </Styled.Header>\n      <Styled.Content>{renderTxContent}</Styled.Content>\n    </Styled.Container>\n  )\n}\n","import React, { useMemo } from 'react'\n\nimport { ThemeType } from 'theme'\n\nimport { useApp } from 'redux/app/hooks'\nimport { TxTracker } from 'redux/midgard/types'\n\nimport { useTxManager } from 'hooks/useTxManager'\n\nimport { ReactComponent as TxIconDark } from 'assets/SVG/tx-black.svg'\nimport { ReactComponent as TxIconHidden } from 'assets/SVG/tx-hidden.svg'\nimport { ReactComponent as TxIconLight } from 'assets/SVG/tx-white.svg'\n\nimport { Label } from '../UIElements'\nimport * as Styled from './TxManager.style'\nimport { TxMonitor } from './TxMonitor'\n\nexport const TxManager = () => {\n  const { themeType } = useApp()\n  const {\n    txTrackers,\n    txCollapsed,\n    setTxCollapsed,\n    clearTxTrackers,\n  } = useTxManager()\n\n  const toggleTx = React.useCallback(() => {\n    setTxCollapsed(!txCollapsed)\n  }, [setTxCollapsed, txCollapsed])\n  const hasTxHistory = useMemo(() => txTrackers.length > 0, [txTrackers])\n\n  const renderAllTxTrackers = useMemo(\n    () =>\n      txTrackers.map((tracker: TxTracker) => (\n        <TxMonitor key={tracker.uuid} txTracker={tracker} />\n      )),\n    [txTrackers],\n  )\n\n  const handleClearHistory = React.useCallback(() => {\n    clearTxTrackers()\n  }, [clearTxTrackers])\n\n  return (\n    <Styled.Container collapsed={txCollapsed}>\n      <Styled.StyledButton onClick={toggleTx} round>\n        {txCollapsed ? (\n          themeType === ThemeType.DARK ? (\n            <TxIconHidden />\n          ) : (\n            <TxIconHidden />\n          )\n        ) : themeType === ThemeType.DARK ? (\n          <TxIconLight />\n        ) : (\n          <TxIconDark />\n        )}\n      </Styled.StyledButton>\n      {!txCollapsed && (\n        <>\n          {!hasTxHistory && (\n            <Styled.EmptyContent>\n              <Label>No transactions.</Label>\n            </Styled.EmptyContent>\n          )}\n          {hasTxHistory && (\n            <Styled.Content>\n              {renderAllTxTrackers}\n              <Styled.ClearRow onClick={handleClearHistory}>\n                <Label>Clear History</Label>\n              </Styled.ClearRow>\n            </Styled.Content>\n          )}\n        </>\n      )}\n    </Styled.Container>\n  )\n}\n","import { useMemo } from 'react'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTracker, TxTrackerStatus, TxTrackerType } from 'redux/midgard/types'\n\nimport useInterval from 'hooks/useInterval'\n\n/**\n * 1. send transaction and get txHash\n * 2. poll midgard action API and get \"in\" tx with the same txHash\n * 3. check action status (success, pending)\n * 4. check action type and match with send tx type\n *    (if action type is not \"refund\", action type should be matched to the send type)\n */\n\nconst POLL_TX_INTERVAL = 3000 // poll tx from midgard every 3s\n\nexport const useTxManager = () => {\n  const {\n    pollTx,\n    pollUpgradeTx,\n    pollApprove,\n    txTrackers,\n    txCollapsed,\n    setTxCollapsed,\n    clearTxTrackers,\n  } = useMidgard()\n\n  const pendingTransactions = useMemo(() => {\n    return txTrackers.filter((tracker: TxTracker) => {\n      return tracker.status === TxTrackerStatus.Pending\n    })\n  }, [txTrackers])\n\n  useInterval(\n    () => {\n      pendingTransactions.forEach((tracker: TxTracker) => {\n        if (tracker.type === TxTrackerType.Switch) {\n          pollUpgradeTx(tracker)\n        } else if (tracker.type === TxTrackerType.Approve) {\n          pollApprove(tracker)\n        } else {\n          pollTx(tracker)\n        }\n      })\n    },\n    pendingTransactions.length ? POLL_TX_INTERVAL : null,\n  )\n\n  return {\n    txTrackers,\n    txCollapsed,\n    setTxCollapsed,\n    clearTxTrackers,\n  }\n}\n","import { transparentize } from 'polished'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nimport { media } from 'helpers/style'\n\nimport { Panel } from '../../../components/Panel'\n\nexport const Container = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n\n  align-items: center;\n  justify-content: center;\n\n  background: ${({ theme }) =>\n    `${transparentize(0.4, theme.palette.background[5])}`};\n  width: 90vw;\n  max-width: 500px;\n  margin: 1.61vh auto auto auto;\n  //margin-bottom: 2vh;\n  padding-top: 0px;\n  padding-right: auto;\n  padding-left: auto;\n\n  border-radius: 10px;\n  border: none;\n`\n\nexport const ContentPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 96%;\n\n  padding: 16px 8px 16px 8px;\n\n  ${media.sm`\n    padding: 16px 12px 4px 12px;\n  `}\n`\n\nexport const HeaderContent = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  flex: 1;\n\n  padding: 0 10px;\n`\n\nexport const HeaderMenu = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const HeaderActions = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const PoolDetailLink = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  height: 20px;\n  color: ${palette('text', 0)};\n`\n\nexport const MenuIconWrapper = styled.div<{ selected: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  height: 20px;\n\n  font-weight: ${(props) => (props.selected ? 'bold' : 'normal')};\n\n  svg {\n    color: ${(props) =>\n      props.selected ? palette('primary', 0) : palette('text', 0)};\n  }\n`\n","import React from 'react'\n\n// import { Link } from 'react-router-dom'\n// import { SwapOutlined } from '@ant-design/icons'\nimport { TxManager } from 'components/TxManager'\n\nimport { useGlobalState } from 'redux/hooks'\n\nimport { useMedia } from 'hooks/useMedia'\n\nimport { ContentTitle } from '../../../components'\nimport { Helmet } from '../../../components/Helmet'\nimport { Refresh } from '../../../components/Refresh'\nimport { SettingsOverlay } from '../../../components/SettingsOverlay'\nimport { Asset } from '../../../multichain-sdk'\nimport * as Styled from './PanelView.style'\n\nexport type PanelViewProps = {\n  type: 'swap' | 'pending' | 'savings'\n  meta: string\n  poolAsset: Asset\n  children: React.ReactNode\n}\n\n// const SwapButton = ({ selected }: { selected: boolean }) => (\n//   <CoreButton>\n//     <Tooltip tooltip=\"Swap\" placement=\"top\">\n//       <Styled.MenuIconWrapper selected={selected}>\n//         <SwapOutlined />\n//       </Styled.MenuIconWrapper>\n//     </Tooltip>\n//   </CoreButton>\n// )\n\n// type MenuButtonProps = {\n//   selected: boolean\n//   route: string\n//   children: React.ReactElement\n// }\n\n// const MenuButton: React.FC<MenuButtonProps> = ({\n//   selected,\n//   route,\n//   children,\n// }) => {\n//   if (selected) {\n//     return children\n//   }\n\n//   return <Link to={route}>{children}</Link>\n// }\n\nexport const PanelView = ({\n  // type,\n  meta,\n  // poolAsset,\n  children,\n}: PanelViewProps) => {\n  // const swapRoute = useMemo(() => {\n  //   return getSwapRoute(poolAsset, Asset.RUNE())\n  // }, [poolAsset])\n\n  const { refreshPage } = useGlobalState()\n  // const isGadgetVisible = useMedia('(min-width: 824px)')\n  const isRefreshVisible = useMedia('(min-width: 375px)')\n\n  return (\n    <Styled.Container>\n      <Helmet title={meta} content={meta} />\n      <ContentTitle>\n        <Styled.HeaderContent>\n          <TxManager />\n          <Styled.HeaderMenu>\n            {isRefreshVisible && <Refresh onRefresh={refreshPage} />}\n            {/* <MenuButton selected={type === 'swap'} route={swapRoute}>\n              <SwapButton selected={type === 'swap'} />\n            </MenuButton> */}\n          </Styled.HeaderMenu>\n          <SettingsOverlay />\n        </Styled.HeaderContent>\n      </ContentTitle>\n      <Styled.ContentPanel>{children}</Styled.ContentPanel>\n    </Styled.Container>\n  )\n}\n","import { FancyButton } from 'components'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nexport const ToolContainer = styled.div`\n  display: box;\n  margin-top: 13px;\n  margin-bottom: 3px;\n  height: 40px;\n`\n\nexport const SliderWrapper = styled.div`\n  margin: auto;\n  width: 95%;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const SwitchPair = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n\n  svg {\n    width: 24px;\n    height: 24px;\n    color: ${palette('background', 8)};\n    transform: rotate(90deg);\n  }\n`\n\nexport const ConfirmButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 0 1%;\n\n  margin-top: 5vh;\n  margin-bottom: 2vh;\n\n  button {\n    flex: 1;\n  }\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n\nexport const RecipientAddrWrapper = styled.div`\n  margin-top: 14px;\n`\n\nexport const SwapInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  padding: 8px;\n  margin-top: 14px;\n\n  border: 1px solid ${palette('gray', 0)};\n  border-radius: 4px;\n`\n\nexport const ApproveBtn = styled(FancyButton)`\n  margin-right: 8px;\n`\n","import { Asset, Swap, SynthType } from 'multichain-sdk'\n\nimport { TxTrackerType } from 'redux/midgard/types'\n\nimport { Pair } from './types'\n\nexport const getSwapPair = async (pair: string): Promise<Pair | null> => {\n  if (!pair || pair.split('_').length !== 2) {\n    return null\n  }\n\n  const input = pair.split('_')?.[0]\n  const output = pair.split('_')?.[1]\n\n  if (!input || !output) return null\n\n  const inputAsset = Asset.decodeFromURL(input)\n  const outputAsset = Asset.decodeFromURL(output)\n\n  if (!inputAsset || !outputAsset) return null\n\n  await inputAsset.setDecimal()\n  await outputAsset.setDecimal()\n\n  return {\n    inputAsset,\n    outputAsset,\n  }\n}\n\nexport const getSwapTrackerType = (swap: Swap): TxTrackerType => {\n  if (swap.inputAsset.isSynth || swap.outputAsset.isSynth) {\n    if (swap.synthType === SynthType.MINT) {\n      return TxTrackerType.Mint\n    }\n    if (swap.synthType === SynthType.REDEEM) {\n      return TxTrackerType.Redeem\n    }\n  }\n\n  return TxTrackerType.Swap\n}\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\n\nimport { useHistory, useParams } from 'react-router'\n\nimport { SwapOutlined } from '@ant-design/icons'\nimport {\n  AddressSelectCard,\n  AssetInputCard,\n  Slider,\n  ConfirmModal,\n  Information,\n  Notification,\n  IconButton,\n  FancyButton,\n  ProtocolSelect,\n} from 'components'\nimport {\n  getInputAssets,\n  Amount,\n  Asset,\n  AssetAmount,\n  getWalletAddressByChain,\n  Swap,\n  Percent,\n  Price,\n  getAssetBalance,\n  SupportedChain,\n  hasWalletConnected,\n  hasConnectedWallet,\n  AmountType,\n} from 'multichain-sdk'\nimport styled from 'styled-components'\nimport { palette } from 'styled-theme'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, TxTrackerType } from 'redux/midgard/types'\n\nimport { useApprove } from 'hooks/useApprove'\nimport { useBalance } from 'hooks/useBalance'\nimport { useMimir } from 'hooks/useMimir'\nimport { useNetworkFee } from 'hooks/useNetworkFee'\nimport { useTxTracker } from 'hooks/useTxTracker'\n\nimport { multichain } from 'services/multichain'\n\nimport { translateErrorMsg } from 'helpers/error'\nimport { truncateAddress } from 'helpers/string'\n\nimport { IS_SYNTH_ACTIVE, IS_TESTNET } from 'settings/config'\nimport { getSwapRoute } from 'settings/constants'\nimport {\n  TX_FEE_TOOLTIP_LABEL,\n  SLIP_TOOLTIP_LABEL,\n  // ESTIMATED_TIME_LABEL,\n  MIN_RECEIVED_LABEL,\n} from 'settings/constants/label'\n\nimport { PanelView } from './PanelView'\nimport * as Styled from './Swap.style'\nimport { Pair } from './types'\nimport { getSwapPair, getSwapTrackerType } from './utils'\n\nconst SwapView = () => {\n  const { pair } = useParams<{ pair: string }>()\n  const [swapPair, setSwapPair] = useState<Pair>()\n\n  useEffect(() => {\n    const getPair = async () => {\n      const swapPairData = await getSwapPair(pair)\n\n      if (swapPairData) {\n        setSwapPair(swapPairData)\n      }\n    }\n\n    getPair()\n  }, [pair])\n\n  if (swapPair) {\n    const { inputAsset, outputAsset } = swapPair\n    return <SwapPage inputAsset={inputAsset} outputAsset={outputAsset} />\n  }\n\n  return null\n}\nconst FromCard = styled.div`\n  background-image: linear-gradient(\n    120deg,\n    ${palette('background', 6)},\n    ${palette('background', 7)}\n  );\n  border-radius: 4px;\n  height: 145px;\n`\n\nconst ToCard = styled.div`\n  background-image: linear-gradient(\n    120deg,\n    ${palette('background', 6)},\n    ${palette('background', 7)}\n  );\n  border-radius: 4px;\n  height: 145px;\n`\n\nconst StyledSliderWrapper = styled.div`\n  width: 90%;\n  margin: auto;\n`\n\nconst SwapPage = ({ inputAsset, outputAsset }: Pair) => {\n  const history = useHistory()\n  const { wallet, getMaxBalance } = useBalance()\n  const { pools: allPools, poolLoading, inboundData } = useMidgard()\n  const { slippageTolerance, affiliates } = useApp()\n  const { haltedChains } = useMimir()\n  const filteredAffiliates = useMemo(\n    () =>\n      affiliates?.filter((affiliate) =>\n        multichain.validateAddress({\n          chain: 'THOR',\n          address: affiliate,\n        }),\n      ),\n    [affiliates],\n  )\n  const { submitTransaction, pollTransaction, setTxFailed } = useTxTracker()\n  const { isApproved, assetApproveStatus } = useApprove(inputAsset, !!wallet)\n  const isTradingHalted: boolean = useMemo(() => {\n    const inTradeInboundData = inboundData.find(\n      (data) => data.chain === inputAsset.chain,\n    )\n    const outTradeInboundData = inboundData.find(\n      (data) => data.chain === outputAsset.chain,\n    )\n\n    const inTradeMimirStatus =\n      haltedChains[inputAsset.L1Chain as SupportedChain]\n    const outTradeMimirStatus =\n      haltedChains[outputAsset.L1Chain as SupportedChain]\n    return (\n      (inTradeInboundData?.halted ?? false) ||\n      (outTradeInboundData?.halted ?? false) ||\n      inTradeMimirStatus ||\n      outTradeMimirStatus\n    )\n  }, [inboundData, haltedChains, inputAsset, outputAsset])\n\n  const { inboundFee, outboundFee, totalFee } = useNetworkFee({\n    inputAsset,\n    outputAsset,\n  })\n\n  const walletConnected = useMemo(\n    () => hasWalletConnected({ wallet, inputAssets: [inputAsset] }),\n    [wallet, inputAsset],\n  )\n\n  const pools = useMemo(\n    () => allPools.filter((data) => data.detail.status === 'available'),\n    [allPools],\n  )\n  const poolAssets = useMemo(() => {\n    const assets = pools.map((pool) => pool.asset)\n    assets.push(Asset.RUNE())\n\n    return assets\n  }, [pools])\n\n  const synthAssets = useMemo(() => {\n    return pools.map((pool) => {\n      const { asset } = pool\n      const synthAsset = new Asset(asset.chain, asset.symbol, true)\n      synthAsset.isSynth = true\n\n      return synthAsset\n    })\n  }, [pools])\n\n  const outputAssets = useMemo(() => {\n    if (IS_SYNTH_ACTIVE) {\n      return [...poolAssets, ...synthAssets]\n    }\n    return poolAssets\n  }, [poolAssets, synthAssets])\n\n  const inputAssets = useMemo(\n    () =>\n      hasConnectedWallet(wallet)\n        ? getInputAssets({ wallet, pools })\n        : outputAssets,\n    [wallet, pools, outputAssets],\n  )\n\n  const [inputAmount, setInputAmount] = useState<Amount>(\n    Amount.fromAssetAmount(0, 8),\n  )\n  const [percent, setPercent] = useState(0)\n  const [chainRecipient, setChainRecipient] = useState('')\n  const [recipient, setRecipient] = useState('')\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n  const [visibleApproveModal, setVisibleApproveModal] = useState(false)\n  const affiliateFee = useMemo(\n    () =>\n      !inputAsset.isLTC() && !inputAsset.isBTC()\n        ? inputAmount.div(100)\n        : new Amount(0, AmountType.ASSET_AMOUNT, 4),\n    [inputAmount, inputAsset],\n  )\n  const totalFeePlusAffiliate = useMemo(\n    () =>\n      !inputAsset.isLTC() && !inputAsset.isBTC()\n        ? totalFee\n            .add(new AssetAmount(inputAsset, affiliateFee))\n            .totalPriceIn(Asset.USD(), pools)\n        : totalFee,\n    [affiliateFee, inputAsset, pools, totalFee],\n  )\n  const isValidAddress = useMemo(\n    () =>\n      multichain.validateAddress({\n        chain: outputAsset.L1Chain,\n        address: recipient,\n      }),\n    [outputAsset, recipient],\n  )\n\n  const swap: Swap | null = useMemo(() => {\n    if (poolLoading) return null\n\n    try {\n      const inputAssetAmount = new AssetAmount(inputAsset, inputAmount)\n\n      const inboundFeeInInputAsset = new AssetAmount(\n        inputAsset,\n        Amount.fromAssetAmount(\n          inboundFee.totalPriceIn(inputAsset, pools).price,\n          inputAsset.decimal,\n        ),\n      )\n\n      const outboundFeeInOutputAsset = outboundFee\n        ? new AssetAmount(\n            outputAsset,\n            Amount.fromAssetAmount(\n              outboundFee.totalPriceIn(outputAsset, pools).price,\n              outputAsset.decimal,\n            ),\n          )\n        : new AssetAmount(\n            outputAsset,\n            Amount.fromAssetAmount(0, outputAsset.decimal),\n          )\n\n      return new Swap({\n        inputAsset,\n        outputAsset,\n        pools,\n        amount: inputAssetAmount,\n        slip: slippageTolerance,\n        fee: {\n          inboundFee: inboundFeeInInputAsset,\n          outboundFee: outboundFeeInOutputAsset,\n        },\n      })\n    } catch (error) {\n      console.log(error)\n      return null\n    }\n  }, [\n    inputAsset,\n    outputAsset,\n    pools,\n    inputAmount,\n    slippageTolerance,\n    poolLoading,\n    inboundFee,\n    outboundFee,\n  ])\n\n  const outputAmount: Amount = useMemo(() => {\n    if (swap) {\n      return swap.outputAmountAfterFee.amount\n    }\n\n    return Amount.fromAssetAmount(0, 8)\n  }, [swap])\n\n  const slipPercent: Percent = useMemo(\n    () => (swap ? swap.slip : new Percent(0)),\n    [swap],\n  )\n\n  const minReceive: Amount = useMemo(\n    () => (swap ? swap.minOutputAmount : Amount.fromAssetAmount(0, 8)),\n    [swap],\n  )\n\n  const inputAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: inputAsset,\n        pools,\n        priceAmount: inputAmount,\n      }),\n    [inputAsset, inputAmount, pools],\n  )\n\n  const outputAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: outputAsset,\n        pools,\n        priceAmount: outputAmount,\n      }),\n    [outputAsset, outputAmount, pools],\n  )\n\n  useEffect(() => {\n    if (wallet) {\n      const address = getWalletAddressByChain(wallet, outputAsset.L1Chain)\n      setRecipient(address || '')\n      setChainRecipient(address || '')\n    }\n  }, [wallet, outputAsset])\n\n  const maxInputBalance: Amount = useMemo(() => getMaxBalance(inputAsset), [\n    inputAsset,\n    getMaxBalance,\n  ])\n\n  const inputAssetBalance: Amount = useMemo(() => {\n    if (!wallet) {\n      // allow max amount for emulation if wallet is not connected\n      return Amount.fromAssetAmount(10 ** 3, 8)\n    }\n\n    return getAssetBalance(inputAsset, wallet)\n  }, [inputAsset, wallet])\n\n  const handleSelectInputAsset = useCallback(\n    (input: Asset) => {\n      history.push(getSwapRoute(input, outputAsset))\n    },\n    [history, outputAsset],\n  )\n\n  const handleSelectOutputAsset = useCallback(\n    (output: Asset) => {\n      history.push(getSwapRoute(inputAsset, output))\n    },\n    [history, inputAsset],\n  )\n\n  const handleSwitchPair = useCallback(() => {\n    history.push(getSwapRoute(outputAsset, inputAsset))\n  }, [history, inputAsset, outputAsset])\n\n  const handleChangeInputAmount = useCallback(\n    (amount: Amount) => {\n      if (amount.gt(maxInputBalance)) {\n        setInputAmount(maxInputBalance)\n        setPercent(100)\n      } else {\n        setInputAmount(amount)\n        setPercent(amount.div(maxInputBalance).mul(100).assetAmount.toNumber())\n      }\n    },\n    [maxInputBalance],\n  )\n\n  const handleChangePercent = useCallback(\n    (p: number) => {\n      setPercent(p)\n      const newAmount = maxInputBalance.mul(p).div(100)\n      setInputAmount(newAmount)\n    },\n    [maxInputBalance],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    handleChangePercent(100)\n  }, [handleChangePercent])\n\n  const handleConfirm = useCallback(async () => {\n    setVisibleConfirmModal(false)\n\n    if (wallet && swap) {\n      const trackerType = getSwapTrackerType(swap)\n\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: trackerType,\n        submitTx: {\n          inAssets: [\n            {\n              asset: swap.inputAsset.toString(),\n              amount: swap.inputAmount.toSignificant(6),\n            },\n          ],\n          outAssets: [\n            {\n              asset: swap.outputAsset.toString(),\n              amount: swap.outputAmountAfterFee.toSignificant(6),\n            },\n          ],\n        },\n      })\n\n      try {\n        const txHash = await multichain.swap(\n          swap,\n          recipient,\n          filteredAffiliates,\n        )\n\n        // start polling\n        pollTransaction({\n          type: trackerType,\n          uuid: trackId,\n          submitTx: {\n            inAssets: [\n              {\n                asset: swap.inputAsset.toString(),\n                amount: swap.inputAmount.toSignificant(6),\n              },\n            ],\n            outAssets: [\n              {\n                asset: swap.outputAsset.toString(),\n                amount: swap.outputAmountAfterFee.toSignificant(6),\n              },\n            ],\n            txID: txHash,\n          },\n        })\n      } catch (error: any) {\n        setTxFailed(trackId)\n\n        // handle better error message\n        const description = translateErrorMsg(error?.toString())\n\n        Notification({\n          type: 'error',\n          message: 'Submit Transaction Failed.',\n          description,\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [\n    wallet,\n    swap,\n    recipient,\n    filteredAffiliates,\n    submitTransaction,\n    pollTransaction,\n    setTxFailed,\n  ])\n\n  const handleCancel = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  const handleConfirmApprove = useCallback(async () => {\n    setVisibleApproveModal(false)\n\n    if (wallet) {\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: TxTrackerType.Approve,\n        submitTx: {\n          inAssets: [\n            {\n              asset: inputAsset.toString(),\n              amount: '0', // not needed for approve tx\n            },\n          ],\n        },\n      })\n\n      try {\n        const txHash = await multichain.approveAsset(inputAsset)\n        console.log('approve txhash', txHash)\n        if (txHash) {\n          // start polling\n          pollTransaction({\n            type: TxTrackerType.Swap,\n            uuid: trackId,\n            submitTx: {\n              inAssets: [\n                {\n                  asset: inputAsset.toString(),\n                  amount: '0', // not needed for approve tx\n                },\n              ],\n              txID: txHash,\n            },\n          })\n        }\n      } catch (error) {\n        setTxFailed(trackId)\n        Notification({\n          type: 'open',\n          message: 'Approve Failed.',\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [inputAsset, wallet, setTxFailed, submitTransaction, pollTransaction])\n\n  const handleSwap = useCallback(() => {\n    if (walletConnected && swap) {\n      if (swap.hasInSufficientFee) {\n        Notification({\n          type: 'info',\n          message: 'Swap Insufficient Fee',\n          description: 'Input amount is not enough to cover the fee',\n        })\n        return\n      }\n\n      if (!isValidAddress) {\n        Notification({\n          type: 'error',\n          message: 'Invalid Recipient Address',\n          description: 'Recipient address should be a valid address.',\n        })\n        return\n      }\n\n      setVisibleConfirmModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [isValidAddress, walletConnected, swap])\n\n  const handleApprove = useCallback(() => {\n    if (walletConnected && swap) {\n      setVisibleApproveModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [walletConnected, swap])\n\n  const isValidSwap = useMemo(() => {\n    if (isTradingHalted && !IS_TESTNET) {\n      return {\n        valid: false,\n        msg: 'Swap not available',\n      }\n    }\n\n    return swap?.isValid() ?? { valid: false }\n  }, [swap, isTradingHalted])\n\n  const isValidSlip = useMemo(() => swap?.isSlipValid() ?? true, [swap])\n\n  const btnLabel = useMemo(() => {\n    if (isValidSwap.valid || inputAmount.eq(0)) {\n      if (!walletConnected) {\n        return 'Connect Wallet'\n      }\n      if (inputAsset.isSynth && outputAsset.isSynth) {\n        return 'Swap'\n      }\n      if (inputAsset.isSynth) {\n        return 'Redeem'\n      }\n      if (outputAsset.isSynth) {\n        return 'Mint'\n      }\n      return 'Swap'\n    }\n\n    return isValidSwap?.msg ?? 'Swap'\n  }, [isValidSwap, inputAmount, walletConnected, inputAsset, outputAsset])\n\n  // const estimatedTime = useMemo(\n  //   () =>\n  //     getEstimatedTxTime({\n  //       chain: inputAsset.L1Chain as SupportedChain,\n  //       amount: inputAmount,\n  //     }),\n  //   [inputAsset, inputAmount],\n  // )\n\n  const renderConfirmModalContent = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title=\"Send\"\n          description={`${inputAmount.toSignificant(\n            6,\n          )} ${inputAsset.name.toUpperCase()}`}\n        />\n        <Information\n          title=\"Recipient\"\n          description={`${outputAmount.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n        />\n        <br />\n        <Information\n          title=\"Recipient Address\"\n          description={truncateAddress(recipient)}\n          error={!isValidAddress}\n        />\n        <br />\n        <Information\n          title=\"Slip\"\n          description={slipPercent.toFixed(3)}\n          error={!isValidSlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Min Received\"\n          description={`${minReceive.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n          tooltip={MIN_RECEIVED_LABEL}\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Affiliate Fee\"\n          description={`${\n            affiliateFee.toSignificant(4) ?? ''\n          } ${inputAsset.name.toUpperCase()}`}\n          tooltip={\n            inputAsset.isBTC() || inputAsset.isLTC()\n              ? 'There is currenly no affiliate fee for BTC or LTC transactions.'\n              : 'Transaction fee of 1% used to pay affiliates and fund Crosschain.Quest development.'\n          }\n        />\n        <Information\n          title=\"Network Fee\"\n          description={outboundFee?.toCurrencyFormat() ?? ''}\n          tooltip=\"Thorchain network fee used to pay outbound transaction\"\n        />\n        <Information\n          title=\"Total\"\n          description={totalFeePlusAffiliate.toCurrencyFormat(2) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        />\n        {/* <Information\n          title=\"Total Fee\"\n          description={totalFeeInUSD.toCurrencyFormat(4) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        /> */}\n        {/* <Information\n          title=\"Estimated Time\"\n          description={estimatedTime}\n          tooltip={ESTIMATED_TIME_LABEL}\n        /> */}\n      </Styled.ConfirmModalContent>\n    )\n  }, [\n    inputAmount,\n    outputAmount,\n    inputAsset,\n    outputAsset,\n    recipient,\n    slipPercent,\n    isValidSlip,\n    minReceive,\n    inboundFee,\n    outboundFee,\n    // totalFeeInUSD,\n    // estimatedTime,\n    affiliateFee,\n    isValidAddress,\n    totalFeePlusAffiliate,\n  ])\n\n  const renderApproveModal = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title={`Approve ${inputAsset.name.toUpperCase()}`}\n          description=\"\"\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [inboundFee, inputAsset])\n\n  const title = useMemo(\n    () => `Swap ${inputAsset.name} >> ${outputAsset.name}`,\n    [inputAsset, outputAsset],\n  )\n  const poolAsset = useMemo(\n    () => (inputAsset.isRUNE() ? outputAsset : inputAsset),\n    [inputAsset, outputAsset],\n  )\n\n  return (\n    <PanelView meta={title} poolAsset={poolAsset} type=\"swap\">\n      <FromCard>\n        <AssetInputCard\n          title=\"from\"\n          asset={inputAsset}\n          assets={inputAssets}\n          amount={inputAmount}\n          balance={inputAssetBalance}\n          onChange={handleChangeInputAmount}\n          onSelect={handleSelectInputAsset}\n          onMax={handleSelectMax}\n          usdPrice={inputAssetPriceInUSD}\n          wallet={wallet || undefined}\n        />\n        <StyledSliderWrapper>\n          <Slider value={percent} onChange={handleChangePercent} withLabel />\n        </StyledSliderWrapper>\n      </FromCard>\n      <Styled.ToolContainer>\n        <Styled.SwitchPair>\n          <IconButton onClick={handleSwitchPair}>\n            <SwapOutlined />\n          </IconButton>\n        </Styled.SwitchPair>\n      </Styled.ToolContainer>\n      <ToCard>\n        <AssetInputCard\n          title=\"to\"\n          asset={outputAsset}\n          assets={outputAssets}\n          amount={outputAmount}\n          onSelect={handleSelectOutputAsset}\n          inputProps={{ disabled: true }}\n          usdPrice={outputAssetPriceInUSD}\n          wallet={wallet || undefined}\n        />\n        <Styled.RecipientAddrWrapper>\n          <AddressSelectCard\n            title=\"address\"\n            address={recipient}\n            chain={outputAsset.L1Chain}\n            chainAddr={chainRecipient}\n            onAddressChange={setRecipient}\n          />\n        </Styled.RecipientAddrWrapper>\n      </ToCard>\n      <Styled.SwapInfo>\n        {/* <PriceRate\n          price={swap?.price}\n          inputAsset={swap?.inputAsset}\n          outputAsset={swap?.outputAsset}\n        />\n        <Information\n          title=\"Slip\"\n          description={slipPercent.toFixed(3)}\n          error={!isValidSlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Min Received\"\n          description={`${minReceive.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n          tooltip={MIN_RECEIVED_LABEL}\n        />\n\n        <br />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Network Fee\"\n          description={outboundFee?.toCurrencyFormat() ?? ''}\n          tooltip=\"Estimated network fee used to pay outbound transaction\"\n        /> */}\n        <Information\n          title=\"Total Fee\"\n          description={totalFeePlusAffiliate?.toCurrencyFormat(2) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        />\n      </Styled.SwapInfo>\n      <ProtocolSelect />\n      {isApproved !== null && wallet && (\n        <Styled.ConfirmButtonContainer>\n          {!isApproved && (\n            <Styled.ApproveBtn\n              onClick={handleApprove}\n              error={!isValidSwap.valid}\n              disabled={\n                assetApproveStatus === TxTrackerStatus.Pending ||\n                assetApproveStatus === TxTrackerStatus.Submitting\n              }\n              loading={\n                assetApproveStatus === TxTrackerStatus.Pending ||\n                assetApproveStatus === TxTrackerStatus.Submitting\n              }\n            >\n              Approve\n            </Styled.ApproveBtn>\n          )}\n          <FancyButton\n            disabled={!isApproved}\n            onClick={handleSwap}\n            error={!isValidSwap.valid}\n          >\n            {btnLabel}\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      )}\n      {!wallet && (\n        <Styled.ConfirmButtonContainer>\n          <FancyButton onClick={handleSwap} error={!isValidSwap.valid}>\n            {btnLabel}\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      )}\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleConfirm}\n        onCancel={handleCancel}\n        inputAssets={[inputAsset]}\n      >\n        {renderConfirmModalContent}\n      </ConfirmModal>\n      <ConfirmModal\n        visible={visibleApproveModal}\n        onOk={handleConfirmApprove}\n        onCancel={() => setVisibleApproveModal(false)}\n        inputAssets={[inputAsset]}\n      >\n        {renderApproveModal}\n      </ConfirmModal>\n    </PanelView>\n  )\n}\n\nexport default SwapView\n","import { useEffect, useState, useMemo } from 'react'\n\nimport { Asset, hasConnectedWallet } from 'multichain-sdk'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus } from 'redux/midgard/types'\nimport { useWallet } from 'redux/wallet/hooks'\n\nimport { multichain } from 'services/multichain'\n\nexport const useApprove = (asset: Asset, hasWallet = true) => {\n  const { approveStatus } = useMidgard()\n  const { wallet } = useWallet()\n  const [isApproved, setApproved] = useState<boolean | null>(\n    hasWallet ? null : true,\n  )\n\n  const isWalletConnected = useMemo(() => hasConnectedWallet(wallet), [wallet])\n\n  useEffect(() => {\n    if (!hasWallet || !isWalletConnected) {\n      setApproved(true)\n      return\n    }\n\n    const checkApproved = async () => {\n      if (approveStatus?.[asset.toString()] === TxTrackerStatus.Success) {\n        setApproved(true)\n      }\n      const approved = await multichain.isAssetApproved(asset)\n      setApproved(approved)\n    }\n\n    checkApproved()\n  }, [asset, approveStatus, hasWallet, isWalletConnected])\n\n  const assetApproveStatus = useMemo(() => approveStatus?.[asset.toString()], [\n    approveStatus,\n    asset,\n  ])\n\n  return {\n    assetApproveStatus,\n    isApproved,\n  }\n}\n","const ORIGIN_UTXO_ERROR_MSG = 'No utxos to send'\nconst PROCESSED_UTXO_ERROR_MSG =\n  'Please wait a bit until UTXOs are confirmed and Try again.'\n\nexport const translateErrorMsg = (msg: string) => {\n  if (msg.includes(ORIGIN_UTXO_ERROR_MSG)) {\n    return PROCESSED_UTXO_ERROR_MSG\n  }\n\n  return msg\n}\n","import Swap from './Swap'\n\nexport default Swap\n"],"sourceRoot":""}