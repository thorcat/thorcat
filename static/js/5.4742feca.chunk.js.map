{"version":3,"sources":["helpers/networkFee.ts","hooks/useNetworkFee.ts","hooks/useTxTracker.ts","views/Upgrade/Upgrade.style.ts","views/Upgrade/Upgrade.tsx","views/Upgrade/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useNetworkFee","inputAsset","outputAsset","useApp","useMidgard","pools","inboundFee","useMemo","gasRate","L1Chain","NetworkFee","getNetworkFeeByAsset","asset","direction","outboundFee","totalFee","outboundFeeInSendAsset","AssetAmount","Amount","fromAssetAmount","totalPriceIn","price","decimal","eq","add","totalFeeInUSD","Asset","USD","useTxTracker","addNewTxTracker","updateTxTracker","clearTxTrackers","processSubmittedTx","submitTransaction","useCallback","type","submitTx","uuid","uuidv4","status","TxTrackerStatus","Submitting","action","refunded","pollTransaction","txTracker","Pending","setTxFailed","Failed","Container","styled","Panel","palette","ContentPanel","div","media","sm","FormItem","ConfirmModalContent","Label","attrs","weight","ConfirmButtonContainer","UpgradePanel","runeToUpgrade","wallet","useState","selectedAsset","setSelectedAsset","upgradeAmount","setUpgradeAmount","percent","setPercent","visibleConfirmModal","setVisibleConfirmModal","recipientThor","setRecipientThor","thorchainAddr","multichain","getWalletAddressByChain","Chain","THORChain","assetBalance","getAssetBalance","amount","useEffect","address","handleSelectAsset","selected","handleChangeUpgradeAmount","gt","mul","assetAmount","toNumber","handleChangePercent","p","newAmount","handleSelectMax","handleConfirmUpgrade","a","runeAmount","trackId","TxTrackerType","Switch","inAssets","toString","toSignificant","outAssets","RUNE","recipient","upgrade","txHash","txID","submitDate","Date","Notification","message","duration","console","log","handleCancelUpgrade","handleUpgrade","validateAddress","description","renderConfirmModalContent","title","ticker","toUpperCase","toCurrencyFormat","tooltip","TX_FEE_TOOLTIP_LABEL","truncateAddress","content","assets","selectDisabled","length","balance","onChange","onSelect","onMax","undefined","value","withLabel","chainAddr","onAddressChange","onClick","error","visible","onOk","onCancel","inputAssets","UpgradeView","useWallet","getRuneToUpgrade","walletConnected","hasWalletConnected","Upgrade"],"mappings":"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","file":"static/js/5.4742feca.chunk.js","sourcesContent":["import { FeeOption } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOption, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOption\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useMemo } from 'react'\n\nimport { Asset, Amount, AssetAmount, NetworkFee, Pool } from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport { getGasRateByChain, getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useNetworkFee = ({\n  inputAsset,\n  outputAsset,\n}: {\n  inputAsset: Asset\n  outputAsset?: Asset\n}) => {\n  const { feeOptionType } = useApp()\n  const { inboundData, pools } = useMidgard()\n\n  const inboundFee = useMemo(() => {\n    // get inbound gasRate with fee option\n\n    const gasRate = getGasRateByFeeOption({\n      inboundData,\n      chain: inputAsset.L1Chain,\n      feeOptionType,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: inputAsset,\n      gasRate,\n      direction: 'inbound',\n    })\n\n    return networkFee\n  }, [inputAsset, inboundData, feeOptionType])\n\n  const outboundFee = useMemo(() => {\n    if (!outputAsset) return null\n\n    const gasRate = getGasRateByChain({\n      inboundData,\n      chain: outputAsset.L1Chain,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: outputAsset,\n      gasRate,\n      direction: 'outbound',\n    })\n\n    return networkFee\n  }, [outputAsset, inboundData])\n\n  const totalFee = useMemo(() => {\n    if (!outboundFee) return inboundFee\n\n    const outboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        outboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n\n    if (inboundFee.asset.eq(inputAsset)) {\n      return inboundFee.add(outboundFeeInSendAsset)\n    }\n\n    const inboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        inboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n    return inboundFeeInSendAsset.add(outboundFeeInSendAsset)\n  }, [inputAsset, inboundFee, outboundFee, pools])\n\n  const totalFeeInUSD = useMemo(\n    () => totalFee.totalPriceIn(Asset.USD(), pools),\n    [totalFee, pools],\n  )\n\n  return {\n    totalFee,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n  }\n}\n\nexport const getSumAmountInUSD = (\n  assetAmount1: AssetAmount | null,\n  assetAmount2: AssetAmount | null,\n  pools: Pool[],\n) => {\n  const assetAmount1InUSD = assetAmount1?.totalPriceIn(Asset.USD(), pools)\n  const assetAmount2InUSD = assetAmount2?.totalPriceIn(Asset.USD(), pools)\n\n  if (assetAmount1 === null && assetAmount2InUSD)\n    return assetAmount2InUSD.toCurrencyFormat()\n  if (assetAmount2 === null && assetAmount1InUSD)\n    return assetAmount1InUSD.toCurrencyFormat()\n\n  if (assetAmount1InUSD && assetAmount2InUSD) {\n    const sum = assetAmount1InUSD.raw().plus(assetAmount2InUSD.raw())\n\n    return Amount.fromAssetAmount(sum, 8).toFixed(2)\n  }\n\n  return Amount.fromAssetAmount(0, 8).toFixed()\n}\n","import { useCallback } from 'react'\n\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, SubmitTx, TxTrackerType } from 'redux/midgard/types'\n\n/**\n * 1. send transaction and get txHash\n * 2. poll midgard action API and get \"in\" tx with the same txHash\n * 3. check action status (success, pending)\n * 4. check action type and match with send tx type\n *    (if action type is not \"refund\", action type should be matched to the send type)\n */\n\nexport const useTxTracker = () => {\n  const {\n    addNewTxTracker,\n    updateTxTracker,\n    clearTxTrackers,\n    processSubmittedTx,\n  } = useMidgard()\n\n  // confirm and submit a transaction\n  const submitTransaction = useCallback(\n    ({\n      type,\n      submitTx,\n    }: {\n      type: TxTrackerType\n      submitTx: SubmitTx\n    }): string => {\n      const uuid = uuidv4()\n\n      addNewTxTracker({\n        uuid,\n        type,\n        status: TxTrackerStatus.Submitting,\n        submitTx,\n        action: null,\n        refunded: null,\n      })\n\n      return uuid\n    },\n    [addNewTxTracker],\n  )\n\n  // start polling a transaction\n  const pollTransaction = useCallback(\n    ({\n      uuid,\n      submitTx,\n      type,\n    }: {\n      uuid: string\n      submitTx: SubmitTx\n      type: TxTrackerType\n    }) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Pending,\n          submitTx,\n        },\n      })\n      processSubmittedTx({ submitTx, type })\n    },\n    [updateTxTracker, processSubmittedTx],\n  )\n\n  // start polling a transaction\n  const setTxFailed = useCallback(\n    (uuid: string) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Failed,\n        },\n      })\n    },\n    [updateTxTracker],\n  )\n\n  return {\n    submitTransaction,\n    pollTransaction,\n    clearTxTrackers,\n    setTxFailed,\n  }\n}\n","import { Label, Panel } from 'components'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nimport { media } from 'helpers/style'\n\nexport const Container = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  background: ${palette('background', 0)};\n  margin-left: auto;\n  margin-right: auto;\n  padding-top: 0px;\n\n  border-radius: 14px;\n  border: 1px solid ${palette('gray', 0)};\n`\n\nexport const ContentPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  padding: 16px 8px 8px 8px;\n\n  ${media.sm`\n    padding: 16px 12px 4px 12px;\n  `}\n`\n\nexport const PoolSelect = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  padding: 8px 16px;\n`\n\nexport const FormItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 8px 0;\n`\n\nexport const FormLabel = styled(Label).attrs({\n  weight: 'bold',\n})`\n  margin-bottom: 8px;\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n\nexport const MemoTypes = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: 130px;\n`\n\nexport const ConfirmButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 0 2%;\n\n  margin-top: 14px;\n\n  button {\n    flex: 1;\n  }\n`\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\n\nimport { Chain } from '@xchainjs/xchain-util'\nimport {\n  ContentTitle,\n  Helmet,\n  AddressSelectCard,\n  AssetInputCard,\n  Slider,\n  FancyButton,\n  ConfirmModal,\n  Information,\n  Label,\n  Notification,\n} from 'components'\nimport {\n  Amount,\n  Asset,\n  getAssetBalance,\n  AssetAmount,\n  Wallet,\n  getRuneToUpgrade,\n  hasWalletConnected,\n} from 'multichain-sdk'\n\nimport { TxTrackerType } from 'redux/midgard/types'\nimport { useWallet } from 'redux/wallet/hooks'\n\nimport { useNetworkFee } from 'hooks/useNetworkFee'\nimport { useTxTracker } from 'hooks/useTxTracker'\n\nimport { multichain } from 'services/multichain'\n\nimport { truncateAddress } from 'helpers/string'\n\nimport { TX_FEE_TOOLTIP_LABEL } from 'settings/constants'\n\nimport * as Styled from './Upgrade.style'\n\nconst UpgradeView = () => {\n  const { wallet } = useWallet()\n\n  const runeToUpgrade = useMemo(() => getRuneToUpgrade(wallet), [wallet])\n\n  const walletConnected = useMemo(\n    () =>\n      runeToUpgrade &&\n      hasWalletConnected({ wallet, inputAssets: runeToUpgrade }),\n    [wallet, runeToUpgrade],\n  )\n\n  if (!wallet || !walletConnected) {\n    return (\n      <Styled.Container>\n        <Label>Please connect a wallet.</Label>\n      </Styled.Container>\n    )\n  }\n\n  if (!runeToUpgrade || runeToUpgrade.length === 0) {\n    return (\n      <Styled.Container>\n        <Label>You don't have BEP2 or ERC20 RUNE to upgrade.</Label>\n      </Styled.Container>\n    )\n  }\n\n  return <UpgradePanel runeToUpgrade={runeToUpgrade} wallet={wallet} />\n}\n\nconst UpgradePanel = ({\n  runeToUpgrade,\n  wallet,\n}: {\n  runeToUpgrade: Asset[]\n  wallet: Wallet\n}) => {\n  const { submitTransaction, pollTransaction, setTxFailed } = useTxTracker()\n\n  const [selectedAsset, setSelectedAsset] = useState<Asset>(runeToUpgrade[0])\n\n  const [upgradeAmount, setUpgradeAmount] = useState<Amount>(\n    Amount.fromAssetAmount(0, 8),\n  )\n  const [percent, setPercent] = useState(0)\n\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n\n  const [recipientThor, setRecipientThor] = useState('')\n\n  const thorchainAddr =\n    multichain.getWalletAddressByChain(Chain.THORChain) || ''\n\n  const assetBalance: Amount = useMemo(() => {\n    if (wallet) {\n      return getAssetBalance(selectedAsset, wallet).amount\n    }\n    return Amount.fromAssetAmount(0, 8)\n  }, [selectedAsset, wallet])\n\n  const { inboundFee } = useNetworkFee({\n    inputAsset: selectedAsset,\n  })\n\n  useEffect(() => {\n    const address = multichain.getWalletAddressByChain(Chain.THORChain)\n    setRecipientThor(address || '')\n  }, [])\n\n  const handleSelectAsset = useCallback((selected: Asset) => {\n    setSelectedAsset(selected)\n  }, [])\n\n  const handleChangeUpgradeAmount = useCallback(\n    (amount: Amount) => {\n      if (amount.gt(assetBalance)) {\n        setUpgradeAmount(assetBalance)\n        setPercent(100)\n      } else {\n        setUpgradeAmount(amount)\n        setPercent(amount.div(assetBalance).mul(100).assetAmount.toNumber())\n      }\n    },\n    [assetBalance],\n  )\n\n  const handleChangePercent = useCallback(\n    (p: number) => {\n      setPercent(p)\n      const newAmount = assetBalance.mul(p).div(100)\n      setUpgradeAmount(newAmount)\n    },\n    [assetBalance],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    handleChangePercent(100)\n  }, [handleChangePercent])\n\n  const handleConfirmUpgrade = useCallback(async () => {\n    setVisibleConfirmModal(false)\n\n    if (selectedAsset && recipientThor) {\n      const runeAmount = new AssetAmount(selectedAsset, upgradeAmount)\n\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: TxTrackerType.Switch,\n        submitTx: {\n          inAssets: [\n            {\n              asset: selectedAsset.toString(),\n              amount: upgradeAmount.toSignificant(6),\n            },\n          ],\n          outAssets: [\n            {\n              asset: Asset.RUNE().toString(),\n              amount: upgradeAmount.toSignificant(6),\n            },\n          ],\n          recipient: recipientThor,\n        },\n      })\n\n      try {\n        const txHash = await multichain.upgrade({\n          runeAmount,\n          recipient: recipientThor,\n        })\n\n        // start polling\n        pollTransaction({\n          type: TxTrackerType.Switch,\n          uuid: trackId,\n          submitTx: {\n            inAssets: [\n              {\n                asset: selectedAsset.toString(),\n                amount: upgradeAmount.toSignificant(6),\n              },\n            ],\n            outAssets: [\n              {\n                asset: Asset.RUNE().toString(),\n                amount: upgradeAmount.toSignificant(6),\n              },\n            ],\n            txID: txHash,\n            submitDate: new Date(),\n            recipient: recipientThor,\n          },\n        })\n      } catch (error) {\n        setTxFailed(trackId)\n\n        Notification({\n          type: 'error',\n          message: 'Submit Transaction Failed.',\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [\n    selectedAsset,\n    upgradeAmount,\n    submitTransaction,\n    pollTransaction,\n    recipientThor,\n    setTxFailed,\n  ])\n\n  const handleCancelUpgrade = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  const handleUpgrade = useCallback(() => {\n    if (!recipientThor) {\n      Notification({\n        type: 'info',\n        message: 'You have to connect wallet for Thorchain.',\n      })\n      return\n    }\n    if (\n      !multichain.validateAddress({\n        chain: Chain.THORChain,\n        address: recipientThor,\n      })\n    ) {\n      Notification({\n        type: 'error',\n        message: 'Invalid Recipient Address',\n        description: 'Recipient address should be a valid address.',\n      })\n      return\n    }\n    setVisibleConfirmModal(true)\n  }, [recipientThor])\n\n  const renderConfirmModalContent = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title=\"Upgrade\"\n          description={`${selectedAsset.ticker.toUpperCase()} (${selectedAsset.type.toUpperCase()})`}\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <br />\n        <Information\n          title=\"Recipient Address\"\n          description={truncateAddress(recipientThor)}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [inboundFee, selectedAsset, recipientThor])\n\n  const title = useMemo(() => `Upgrade ${selectedAsset.chain} RUNE`, [\n    selectedAsset,\n  ])\n\n  return (\n    <Styled.Container>\n      <Helmet title={title} content={title} />\n      <ContentTitle>{title}</ContentTitle>\n      <Styled.ContentPanel>\n        <AssetInputCard\n          title=\"upgrade\"\n          asset={selectedAsset}\n          assets={runeToUpgrade}\n          selectDisabled={runeToUpgrade.length !== 2}\n          amount={upgradeAmount}\n          balance={assetBalance}\n          onChange={handleChangeUpgradeAmount}\n          onSelect={handleSelectAsset}\n          onMax={handleSelectMax}\n          wallet={wallet || undefined}\n        />\n        <Slider value={percent} onChange={handleChangePercent} withLabel />\n\n        <Styled.FormItem>\n          <Information\n            title=\"Transaction Fee\"\n            description={inboundFee.toCurrencyFormat()}\n            tooltip={TX_FEE_TOOLTIP_LABEL}\n          />\n        </Styled.FormItem>\n\n        <AddressSelectCard\n          title=\"Recipient Address\"\n          address={recipientThor}\n          chain={Chain.THORChain}\n          chainAddr={thorchainAddr}\n          onAddressChange={setRecipientThor}\n        />\n\n        <Styled.ConfirmButtonContainer>\n          <FancyButton onClick={handleUpgrade} error={false}>\n            Upgrade\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      </Styled.ContentPanel>\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleConfirmUpgrade}\n        onCancel={handleCancelUpgrade}\n        inputAssets={[selectedAsset]}\n      >\n        {renderConfirmModalContent}\n      </ConfirmModal>\n    </Styled.Container>\n  )\n}\n\nexport default UpgradeView\n","import Upgrade from './Upgrade'\n\nexport default Upgrade\n"],"sourceRoot":""}