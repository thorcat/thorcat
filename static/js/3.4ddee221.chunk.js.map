{"version":3,"sources":["helpers/networkFee.ts","hooks/useBalance.ts","hooks/useNetworkFee.ts","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","hooks/useTxTracker.ts","views/Swap/PanelView/PanelView.style.ts","views/Swap/PanelView/PanelView.tsx","views/Swap/Swap.style.ts","views/Swap/utils.ts","views/Swap/Swap.tsx","hooks/useApprove.ts","helpers/error.ts","views/Swap/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useBalance","dispatch","useDispatch","useSelector","state","app","wallet","midgard","reloadBalanceByChain","useCallback","walletActions","reloadAllBalance","getMaxBalance","asset","L1Chain","Amount","fromAssetAmount","gasRate","inboundFee","NetworkFee","getNetworkFeeByAsset","direction","balance","getAssetBalance","amount","maxSpendableAmount","isGasAsset","sub","mul","gt","decimal","useNetworkFee","inputAsset","outputAsset","useApp","useMidgard","pools","useMemo","outboundFee","totalFee","outboundFeeInSendAsset","AssetAmount","totalPriceIn","price","eq","add","totalFeeInUSD","Asset","USD","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","useTxTracker","addNewTxTracker","updateTxTracker","clearTxTrackers","processSubmittedTx","submitTransaction","type","submitTx","uuidv4","status","TxTrackerStatus","Submitting","action","refunded","pollTransaction","txTracker","Pending","setTxFailed","Failed","Container","styled","Panel","theme","transparentize","palette","background","ContentPanel","div","media","sm","HeaderContent","HeaderMenu","props","selected","PanelView","meta","children","refreshPage","useGlobalState","isRefreshVisible","useMedia","Helmet","title","content","Refresh","onRefresh","SettingsOverlay","ToolContainer","SwitchPair","ConfirmButtonContainer","ConfirmModalContent","RecipientAddrWrapper","SwapInfo","ApproveBtn","FancyButton","getSwapPair","pair","a","split","input","output","decodeFromURL","setDecimal","getSwapTrackerType","swap","isSynth","synthType","SynthType","MINT","TxTrackerType","Mint","REDEEM","Redeem","Swap","FromCard","ToCard","StyledSliderWrapper","SwapPage","history","useHistory","allPools","poolLoading","slippageTolerance","affiliates","haltedChains","useMimir","filteredAffiliates","filter","affiliate","multichain","validateAddress","address","hasWallet","approveStatus","useWallet","useState","isApproved","setApproved","isWalletConnected","hasConnectedWallet","useEffect","Success","isAssetApproved","approved","checkApproved","assetApproveStatus","useApprove","isTradingHalted","inTradeInboundData","outTradeInboundData","inTradeMimirStatus","outTradeMimirStatus","halted","walletConnected","hasWalletConnected","inputAssets","detail","poolAssets","assets","map","pool","RUNE","synthAssets","synthAsset","symbol","outputAssets","IS_SYNTH_ACTIVE","getInputAssets","inputAmount","setInputAmount","percent","setPercent","chainRecipient","setChainRecipient","recipient","setRecipient","visibleConfirmModal","setVisibleConfirmModal","visibleApproveModal","setVisibleApproveModal","affiliateFee","totalFeePlusAffiliate","isValidAddress","inputAssetAmount","inboundFeeInInputAsset","outboundFeeInOutputAsset","slip","fee","error","console","log","outputAmount","outputAmountAfterFee","slipPercent","Percent","minReceive","minOutputAmount","inputAssetPriceInUSD","Price","baseAsset","priceAmount","outputAssetPriceInUSD","getWalletAddressByChain","maxInputBalance","inputAssetBalance","handleSelectInputAsset","getSwapRoute","handleSelectOutputAsset","handleSwitchPair","handleChangeInputAmount","assetAmount","toNumber","handleChangePercent","p","newAmount","handleSelectMax","handleConfirm","trackerType","trackId","inAssets","toSignificant","outAssets","txHash","txID","msg","description","includes","Notification","message","duration","handleCancel","handleConfirmApprove","Approve","approveAsset","handleSwap","hasInSufficientFee","handleApprove","isValidSwap","valid","isValid","isValidSlip","isSlipValid","btnLabel","renderConfirmModalContent","name","toUpperCase","truncateAddress","toFixed","tooltip","SLIP_TOOLTIP_LABEL","MIN_RECEIVED_LABEL","toCurrencyFormat","TX_FEE_TOOLTIP_LABEL","renderApproveModal","poolAsset","isRUNE","onChange","onSelect","onMax","usdPrice","value","withLabel","onClick","SwapOutlined","inputProps","disabled","chainAddr","onAddressChange","loading","visible","onOk","onCancel","SwapView","useParams","swapPair","setSwapPair","swapPairData","getPair"],"mappings":"6HAIA,wEAAMA,EAA2C,CAC/CC,QAAS,IACTC,KAAM,EACNC,QAAS,KAIEC,EAAoB,SAAC,GAMnB,IAAD,EALZC,EAKY,EALZA,YACAC,EAIY,EAJZA,MAKMC,EAAmBF,EAAYG,MAAK,SAACC,GAAD,OAAUA,EAAKH,QAAUA,KAEnE,OAAOI,OAAM,iBAACH,QAAD,IAACA,OAAD,EAACA,EAAkBI,gBAAnB,QAA+B,IAGjCC,EAAwB,SAAC,GAQ/B,IAPLP,EAOI,EAPJA,YACAC,EAMI,EANJA,MACAO,EAKI,EALJA,cAMA,OAAOT,EAAkB,CAAEC,cAAaC,UAAWN,EAAWa,K,kCChChE,iFAaaC,EAAa,WACxB,IAAMC,EAAWC,cACTH,EAAkBI,aAAY,SAACC,GAAD,OAAsBA,EAAMC,OAA1DN,cACAO,EAAWH,aAAY,SAACC,GAAD,OAAsBA,EAAME,UAAnDA,OACAf,EAAgBY,aAAY,SAACC,GAAD,OAAsBA,EAAMG,WAAxDhB,YAEFiB,EAAuBC,uBAC3B,SAACjB,GACCS,EAASS,mBAA+BlB,MAE1C,CAACS,IAGGU,EAAmBF,uBAAY,WACnCR,EAASS,sBACR,CAACT,IA0CJ,MAAO,CACLW,cAzCoBH,uBACpB,SAACI,GACC,KAAI,OAACP,QAAD,IAACA,OAAD,EAACA,EAASO,EAAMC,UAElB,OAAOC,SAAOC,gBAAP,SAAuB,GAAM,GAAG,GAIzC,IAAMC,EAAUnB,YAAsB,CACpCP,cACAC,MAAOqB,EAAMC,QACbf,kBAEImB,EAAaC,aAAWC,qBAAqB,CACjDP,QACAI,UACAI,UAAW,YAGPC,EAAUC,0BAAgBV,EAAOP,GAAQkB,OAQzCC,EAAqBZ,EAAMa,aAC7BJ,EAAQK,IAAIT,EAAWU,IAAI,KAAKJ,QAChCF,EAEJ,OAAIG,EAAmBI,GAAG,GACjBJ,EAGFV,SAAOC,gBAAgB,EAAGH,EAAMiB,WAEzC,CAACxB,EAAQP,EAAeR,IAKxBoB,mBACAH,uBACAF,Y,kCC1EJ,iFASayB,EAAgB,SAAC,GAMvB,IALLC,EAKI,EALJA,WACAC,EAII,EAJJA,YAKQlC,EAAkBmC,cAAlBnC,cADJ,EAE2BoC,cAAvB5C,EAFJ,EAEIA,YAAa6C,EAFjB,EAEiBA,MAEflB,EAAamB,mBAAQ,WAGzB,IAAMpB,EAAUnB,YAAsB,CACpCP,cACAC,MAAOwC,EAAWlB,QAClBf,kBAQF,OANmBoB,aAAWC,qBAAqB,CACjDP,MAAOmB,EACPf,UACAI,UAAW,cAIZ,CAACW,EAAYzC,EAAaQ,IAEvBuC,EAAcD,mBAAQ,WAC1B,IAAKJ,EAAa,OAAO,KAEzB,IAAMhB,EAAU3B,YAAkB,CAChCC,cACAC,MAAOyC,EAAYnB,UAQrB,OANmBK,aAAWC,qBAAqB,CACjDP,MAAOoB,EACPhB,UACAI,UAAW,eAIZ,CAACY,EAAa1C,IAEXgD,EAAWF,mBAAQ,WACvB,IAAKC,EAAa,OAAOpB,EAEzB,IAAMsB,EAAyB,IAAIC,cACjCT,EACAjB,SAAOC,gBACLsB,EAAYI,aAAaV,EAAYI,GAAOO,MAC5CX,EAAWF,UAIf,OAAIZ,EAAWL,MAAM+B,GAAGZ,GACfd,EAAW2B,IAAIL,GAGM,IAAIC,cAChCT,EACAjB,SAAOC,gBACLE,EAAWwB,aAAaV,EAAYI,GAAOO,MAC3CX,EAAWF,UAGce,IAAIL,KAChC,CAACR,EAAYd,EAAYoB,EAAaF,IAEnCU,EAAgBT,mBACpB,kBAAME,EAASG,aAAaK,QAAMC,MAAOZ,KACzC,CAACG,EAAUH,IAGb,MAAO,CACLG,WACArB,aACAoB,cACAQ,mB,wECnFAG,E,OACAC,EAAQ,IAAIC,WAAW,IACZ,SAASC,IAEtB,IAAKH,KAGHA,EAAoC,qBAAXI,QAA0BA,OAAOJ,iBAAmBI,OAAOJ,gBAAgBK,KAAKD,SAA+B,qBAAbE,UAAgE,oBAA7BA,SAASN,iBAAkCM,SAASN,gBAAgBK,KAAKC,WAGrO,MAAM,IAAIC,MAAM,4GAIpB,OAAOP,EAAgBC,GCjBV,4HCQf,ICFeO,MAJf,SAAkBC,GAChB,MAAuB,kBAATA,GAAqBC,EAAMC,KAAKF,IDG5CG,EAAY,GAEPC,EAAI,EAAGA,EAAI,MAAOA,EACzBD,EAAUE,MAAMD,EAAI,KAAOE,SAAS,IAAIC,OAAO,IAoBlCC,MAjBf,SAAmBC,GACjB,IAAIC,EAASC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,EAG7EX,GAAQG,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,MAAMI,cAMzf,IAAKf,EAASC,GACZ,MAAMe,UAAU,+BAGlB,OAAOf,GEHMgB,MApBf,SAAYC,EAASC,EAAKR,GAExB,IAAIS,GADJF,EAAUA,GAAW,IACFG,SAAWH,EAAQvB,KAAOA,KAK7C,GAHAyB,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBD,EAAK,CACPR,EAASA,GAAU,EAEnB,IAAK,IAAIN,EAAI,EAAGA,EAAI,KAAMA,EACxBc,EAAIR,EAASN,GAAKe,EAAKf,GAGzB,OAAOc,EAGT,OAAOV,EAAUW,I,iBCLNE,EAAe,WAAO,IAAD,EAM5B5C,cAJF6C,EAF8B,EAE9BA,gBACAC,EAH8B,EAG9BA,gBACAC,EAJ8B,EAI9BA,gBACAC,EAL8B,EAK9BA,mBAgEF,MAAO,CACLC,kBA7DwB3E,uBACxB,YAMe,IALb4E,EAKY,EALZA,KACAC,EAIY,EAJZA,SAKM5B,EAAO6B,IAWb,OATAP,EAAgB,CACdtB,OACA2B,OACAG,OAAQC,IAAgBC,WACxBJ,WACAK,OAAQ,KACRC,SAAU,OAGLlC,IAET,CAACsB,IAyCDa,gBArCsBpF,uBACtB,YAQO,IAPLiD,EAOI,EAPJA,KACA4B,EAMI,EANJA,SACAD,EAKI,EALJA,KAMAJ,EAAgB,CACdvB,OACAoC,UAAW,CACTN,OAAQC,IAAgBM,QACxBT,cAGJH,EAAmB,CAAEG,WAAUD,WAEjC,CAACJ,EAAiBE,IAmBlBD,kBACAc,YAhBkBvF,uBAClB,SAACiD,GACCuB,EAAgB,CACdvB,OACAoC,UAAW,CACTN,OAAQC,IAAgBQ,YAI9B,CAAChB,O,uVCzEQiB,EAAYC,YAAOC,KAAV,gFAAGD,CAAH,8PAON,gBAAGE,EAAH,EAAGA,MAAH,gBACTC,YAAe,GAAKD,EAAME,QAAQC,WAAW,QAavCC,EAAeN,IAAOO,IAAV,mFAAGP,CAAH,+EAOrBQ,IAAMC,GAPe,iEAYZC,EAAgBV,IAAOO,IAAV,oFAAGP,CAAH,6GAUbW,EAAaX,IAAOO,IAAV,iFAAGP,CAAH,sC,GAKMA,IAAOO,IAAV,oFAAGP,CAAH,sCAKIA,IAAOO,IAAV,qFAAGP,CAAH,6FAMhBI,kBAAQ,OAAQ,IAGIJ,IAAOO,IAAV,sFAAGP,CAAH,mHAOX,SAACY,GAAD,OAAYA,EAAMC,SAAW,OAAS,YAG1C,SAACD,GAAD,OACPA,EAAMC,SAAWT,kBAAQ,UAAW,GAAKA,kBAAQ,OAAQ,M,MC/BlDU,EAAY,SAAC,GAKH,IAHrBC,EAGoB,EAHpBA,KAEAC,EACoB,EADpBA,SAMQC,EAAgBC,cAAhBD,YAEFE,EAAmBC,YAAS,sBAElC,OACE,eAAC,EAAD,WACE,cAACC,EAAA,EAAD,CAAQC,MAAOP,EAAMQ,QAASR,IAC9B,cAAC,eAAD,UACE,eAAC,EAAD,WACE,cAAC,EAAD,UACGI,GAAoB,cAACK,EAAA,EAAD,CAASC,UAAWR,MAK3C,cAACS,EAAA,EAAD,SAGJ,cAAC,EAAD,UAAsBV,QC1EfW,EAAgB3B,IAAOO,IAAV,+EAAGP,CAAH,gEAcb4B,GAPgB5B,IAAOO,IAAV,+EAAGP,CAAH,sEAOAA,IAAOO,IAAV,4EAAGP,CAAH,iIASVI,kBAAQ,OAAQ,KAKhByB,EAAyB7B,IAAOO,IAAV,wFAAGP,CAAH,uIAetB8B,EAAsB9B,IAAOO,IAAV,qFAAGP,CAAH,sDAMnB+B,EAAuB/B,IAAOO,IAAV,sFAAGP,CAAH,sBAIpBgC,EAAWhC,IAAOO,IAAV,0EAAGP,CAAH,sHAQCI,kBAAQ,OAAQ,IAIzB6B,EAAajC,YAAOkC,eAAV,4EAAGlC,CAAH,uBC/DVmC,GAAW,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,yDACpBD,GAAmC,IAA3BA,EAAKE,MAAM,KAAKnE,OADJ,yCAEhB,MAFgB,UAKnBoE,EALmB,UAKXH,EAAKE,MAAM,YALA,aAKX,EAAkB,GAC1BE,EANmB,UAMVJ,EAAKE,MAAM,YAND,aAMV,EAAkB,GAE5BC,GAAUC,EARU,yCAQK,MARL,UAUnB3G,EAAae,QAAM6F,cAAcF,GACjCzG,EAAcc,QAAM6F,cAAcD,GAEnC3G,GAAeC,EAbK,0CAae,MAbf,yBAenBD,EAAW6G,aAfQ,yBAgBnB5G,EAAY4G,aAhBO,iCAkBlB,CACL7G,aACAC,gBApBuB,4CAAH,sDAwBX6G,GAAqB,SAACC,GACjC,GAAIA,EAAK/G,WAAWgH,SAAWD,EAAK9G,YAAY+G,QAAS,CACvD,GAAID,EAAKE,YAAcC,YAAUC,KAC/B,OAAOC,IAAcC,KAEvB,GAAIN,EAAKE,YAAcC,YAAUI,OAC/B,OAAOF,IAAcG,OAIzB,OAAOH,IAAcI,MC6CjBC,GAAWtD,IAAOO,IAAV,gJAGRH,kBAAQ,aAAc,GACtBA,kBAAQ,aAAc,IAMtBmD,GAASvD,IAAOO,IAAV,gJAGNH,kBAAQ,aAAc,GACtBA,kBAAQ,aAAc,IAMtBoD,GAAsBxD,IAAOO,IAAV,4DAKnBkD,GAAW,SAAC,GAAuC,IAAD,EAApC5H,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,YACxB4H,EAAUC,cADsC,EAEpB9J,cAA1BM,EAF8C,EAE9CA,OAAQM,EAFsC,EAEtCA,cAFsC,EAGAuB,cAAvC4H,EAHuC,EAG9C3H,MAAiB4H,EAH6B,EAG7BA,YAAazK,EAHgB,EAGhBA,YAHgB,EAIZ2C,cAAlC+H,EAJ8C,EAI9CA,kBAAmBC,EAJ2B,EAI3BA,WACnBC,EAAiBC,cAAjBD,aACFE,EAAqBhI,mBACzB,yBACE6H,QADF,IACEA,OADF,EACEA,EAAYI,QAAO,SAACC,GAAD,OACjBC,IAAWC,gBAAgB,CACzBjL,MAAO,OACPkL,QAASH,SAGf,CAACL,IAdmD,EAgBMnF,cAApDK,EAhB8C,EAgB9CA,kBAAmBS,EAhB2B,EAgB3BA,gBAAiBG,EAhBU,EAgBVA,YAhBU,ECpG9B,SAACnF,GAAoC,IAAtB8J,IAAqB,yDACpDC,EAAkBzI,cAAlByI,cACAtK,EAAWuK,cAAXvK,OAFoD,EAG1BwK,oBAChCH,GAAY,MAJ8C,mBAGrDI,EAHqD,KAGzCC,EAHyC,KAOtDC,EAAoB5I,mBAAQ,kBAAM6I,6BAAmB5K,KAAS,CAACA,IAwBrE,OAtBA6K,qBAAU,WACHR,GAAcM,EAKA,uCAAG,4BAAAzC,EAAA,6DACH,OAAboC,QAAa,IAAbA,OAAA,EAAAA,EAAgB/J,EAAMmD,eAAgByB,IAAgB2F,SACxDJ,GAAY,GAFM,SAIGR,IAAWa,gBAAgBxK,GAJ9B,OAIdyK,EAJc,OAKpBN,EAAYM,GALQ,2CAAH,oDAQnBC,GAZEP,GAAY,KAab,CAACnK,EAAO+J,EAAeD,EAAWM,IAO9B,CACLO,mBANyBnJ,mBAAQ,yBAAMuI,QAAN,IAAMA,OAAN,EAAMA,EAAgB/J,EAAMmD,cAAa,CAC1E4G,EACA/J,IAKAkK,cDoFyCU,CAAWzJ,IAAc1B,GAA5DyK,EAjB8C,EAiB9CA,WAAYS,GAjBkC,EAiBlCA,mBACdE,GAA2BrJ,mBAAQ,WAAO,IAAD,IACvCsJ,EAAqBpM,EAAYG,MACrC,SAACC,GAAD,OAAUA,EAAKH,QAAUwC,EAAWxC,SAEhCoM,EAAsBrM,EAAYG,MACtC,SAACC,GAAD,OAAUA,EAAKH,QAAUyC,EAAYzC,SAGjCqM,EACJ1B,EAAanI,EAAWlB,SACpBgL,EACJ3B,EAAalI,EAAYnB,SAC3B,OACE,iBAAC6K,QAAD,IAACA,OAAD,EAACA,EAAoBI,cAArB,2BACCH,QADD,IACCA,OADD,EACCA,EAAqBG,cADtB,UAEAF,GACAC,IAED,CAACvM,EAAa4K,EAAcnI,EAAYC,IApCW,GAsCRF,YAAc,CAC1DC,aACAC,gBAFMf,GAtC8C,GAsC9CA,WAAYoB,GAtCkC,GAsClCA,YAAaC,GAtCqB,GAsCrBA,SAK3ByJ,GAAkB3J,mBACtB,kBAAM4J,6BAAmB,CAAE3L,SAAQ4L,YAAa,CAAClK,OACjD,CAAC1B,EAAQ0B,IAGLI,GAAQC,mBACZ,kBAAM0H,EAASO,QAAO,SAAC3K,GAAD,MAAiC,cAAvBA,EAAKwM,OAAO3G,YAC5C,CAACuE,IAEGqC,GAAa/J,mBAAQ,WACzB,IAAMgK,EAASjK,GAAMkK,KAAI,SAACC,GAAD,OAAUA,EAAK1L,SAGxC,OAFAwL,EAAOtI,KAAKhB,QAAMyJ,QAEXH,IACN,CAACjK,KAEEqK,GAAcpK,mBAAQ,WAC1B,OAAOD,GAAMkK,KAAI,SAACC,GAAU,IAClB1L,EAAU0L,EAAV1L,MACF6L,EAAa,IAAI3J,QAAMlC,EAAMrB,MAAOqB,EAAM8L,QAAQ,GAGxD,OAFAD,EAAW1D,SAAU,EAEd0D,OAER,CAACtK,KAEEwK,GAAevK,mBAAQ,WAC3B,OAAIwK,IACI,GAAN,mBAAWT,IAAX,YAA0BK,KAErBL,KACN,CAACA,GAAYK,KAEVP,GAAc7J,mBAClB,kBACE6I,6BAAmB5K,GACfwM,yBAAe,CAAExM,SAAQ8B,WACzBwK,KACN,CAACtM,EAAQ8B,GAAOwK,KAjFoC,GAoFhB9B,mBACpC/J,SAAOC,gBAAgB,EAAG,IArF0B,qBAoF/C+L,GApF+C,MAoFlCC,GApFkC,SAuFxBlC,mBAAS,GAvFe,qBAuF/CmC,GAvF+C,MAuFtCC,GAvFsC,SAwFVpC,mBAAS,IAxFC,qBAwF/CqC,GAxF+C,MAwF/BC,GAxF+B,SAyFpBtC,mBAAS,IAzFW,qBAyF/CuC,GAzF+C,MAyFpCC,GAzFoC,SA0FAxC,oBAAS,GA1FT,qBA0F/CyC,GA1F+C,MA0F1BC,GA1F0B,SA2FA1C,oBAAS,GA3FT,qBA2F/C2C,GA3F+C,MA2F1BC,GA3F0B,MA4FhDC,GAAetL,mBAAQ,kBAAM0K,GAAYrG,IAAI,OAAM,CAACqG,KACpDa,GAAwBvL,mBAC5B,kBACEE,GACGM,IAAI,IAAIJ,cAAYT,EAAY2L,KAChCjL,aAAaK,QAAMC,MAAOZ,MAC/B,CAACuL,GAAc3L,EAAYI,GAAOG,KAE9BsL,GAAiBxL,mBACrB,kBACEmI,IAAWC,gBAAgB,CACzBjL,MAAOyC,EAAYnB,QACnB4J,QAAS2C,OAEb,CAACpL,EAAaoL,KAGVtE,GAAoB1G,mBAAQ,WAChC,GAAI2H,EAAa,OAAO,KAExB,IACE,IAAM8D,EAAmB,IAAIrL,cAAYT,EAAY+K,IAE/CgB,EAAyB,IAAItL,cACjCT,EACAjB,SAAOC,gBACLE,GAAWwB,aAAaV,EAAYI,IAAOO,MAC3CX,EAAWF,UAITkM,EAA2B1L,GAC7B,IAAIG,cACFR,EACAlB,SAAOC,gBACLsB,GAAYI,aAAaT,EAAaG,IAAOO,MAC7CV,EAAYH,UAGhB,IAAIW,cACFR,EACAlB,SAAOC,gBAAgB,EAAGiB,EAAYH,UAG5C,OAAO,IAAI0H,OAAK,CACdxH,aACAC,cACAG,SACAZ,OAAQsM,EACRG,KAAMhE,EACNiE,IAAK,CACHhN,WAAY6M,EACZzL,YAAa0L,KAGjB,MAAOG,GAEP,OADAC,QAAQC,IAAIF,GACL,QAER,CACDnM,EACAC,EACAG,GACA2K,GACA9C,EACAD,EACA9I,GACAoB,KAGIgM,GAAuBjM,mBAAQ,WACnC,OAAI0G,GACKA,GAAKwF,qBAAqB/M,OAG5BT,SAAOC,gBAAgB,EAAG,KAChC,CAAC+H,KAEEyF,GAAuBnM,mBAC3B,kBAAO0G,GAAOA,GAAKkF,KAAO,IAAIQ,UAAQ,KACtC,CAAC1F,KAGG2F,GAAqBrM,mBACzB,kBAAO0G,GAAOA,GAAK4F,gBAAkB5N,SAAOC,gBAAgB,EAAG,KAC/D,CAAC+H,KAGG6F,GAAuBvM,mBAC3B,kBACE,IAAIwM,QAAM,CACRC,UAAW9M,EACXI,SACA2M,YAAahC,OAEjB,CAAC/K,EAAY+K,GAAa3K,KAGtB4M,GAAwB3M,mBAC5B,kBACE,IAAIwM,QAAM,CACRC,UAAW7M,EACXG,SACA2M,YAAaT,OAEjB,CAACrM,EAAaqM,GAAclM,KAG9B+I,qBAAU,WACR,GAAI7K,EAAQ,CACV,IAAMoK,EAAUuE,kCAAwB3O,EAAQ2B,EAAYnB,SAC5DwM,GAAa5C,GAAW,IACxB0C,GAAkB1C,GAAW,OAE9B,CAACpK,EAAQ2B,IAEZ,IAAMiN,GAA0B7M,mBAAQ,kBAAMzB,EAAcoB,KAAa,CACvEA,EACApB,IAGIuO,GAA4B9M,mBAAQ,WACxC,OAAK/B,EAKEiB,0BAAgBS,EAAY1B,GAH1BS,SAAOC,gBAAP,SAAuB,GAAM,GAAG,KAIxC,CAACgB,EAAY1B,IAEV8O,GAAyB3O,uBAC7B,SAACiI,GACCmB,EAAQ9F,KAAKsL,YAAa3G,EAAOzG,MAEnC,CAAC4H,EAAS5H,IAGNqN,GAA0B7O,uBAC9B,SAACkI,GACCkB,EAAQ9F,KAAKsL,YAAarN,EAAY2G,MAExC,CAACkB,EAAS7H,IAGNuN,GAAmB9O,uBAAY,WACnCoJ,EAAQ9F,KAAKsL,YAAapN,EAAaD,MACtC,CAAC6H,EAAS7H,EAAYC,IAEnBuN,GAA0B/O,uBAC9B,SAACe,GACKA,EAAOK,GAAGqN,KACZlC,GAAekC,IACfhC,GAAW,OAEXF,GAAexL,GACf0L,GAAW1L,EAAOkF,IAAIwI,IAAiBtN,IAAI,KAAK6N,YAAYC,eAGhE,CAACR,KAGGS,GAAsBlP,uBAC1B,SAACmP,GACC1C,GAAW0C,GACX,IAAMC,EAAYX,GAAgBtN,IAAIgO,GAAGlJ,IAAI,KAC7CsG,GAAe6C,KAEjB,CAACX,KAGGY,GAAkBrP,uBAAY,WAClCkP,GAAoB,OACnB,CAACA,KAEEI,GAAgBtP,sBAAW,sBAAC,kCAAA+H,EAAA,yDAChCgF,IAAuB,IAEnBlN,IAAUyI,GAHkB,wBAIxBiH,EAAclH,GAAmBC,IAGjCkH,EAAU7K,EAAkB,CAChCC,KAAM2K,EACN1K,SAAU,CACR4K,SAAU,CACR,CACErP,MAAOkI,GAAK/G,WAAWgC,WACvBxC,OAAQuH,GAAKgE,YAAYoD,cAAc,KAG3CC,UAAW,CACT,CACEvP,MAAOkI,GAAK9G,YAAY+B,WACxBxC,OAAQuH,GAAKwF,qBAAqB4B,cAAc,QAnB1B,kBA0BP3F,IAAWzB,KAC9BA,GACAsE,GACAhD,GA7B0B,OA0BtBgG,EA1BsB,OAiC5BxK,EAAgB,CACdR,KAAM2K,EACNtM,KAAMuM,EACN3K,SAAU,CACR4K,SAAU,CACR,CACErP,MAAOkI,GAAK/G,WAAWgC,WACvBxC,OAAQuH,GAAKgE,YAAYoD,cAAc,KAG3CC,UAAW,CACT,CACEvP,MAAOkI,GAAK9G,YAAY+B,WACxBxC,OAAQuH,GAAKwF,qBAAqB4B,cAAc,KAGpDG,KAAMD,KAjDkB,kDAqD5BrK,EAAYiK,GEzacM,EF4aW,OAAC,EAAD,yBAAC,KAAOvM,WAAvCwM,EE3aRD,EAAIE,SALoB,oBAE5B,6DAOOF,EFyaDG,uBAAa,CACXrL,KAAM,QACNsL,QAAS,6BACTH,cACAI,SAAU,KAEZxC,QAAQC,IAAR,MAhE4B,kCEpXH,IAACkC,IFoXE,qBAmE/B,CACDjQ,EACAyI,GACAsE,GACAhD,EACAjF,EACAS,EACAG,IAGI6K,GAAepQ,uBAAY,WAC/B+M,IAAuB,KACtB,IAEGsD,GAAuBrQ,sBAAW,sBAAC,8BAAA+H,EAAA,yDACvCkF,IAAuB,IAEnBpN,EAHmC,wBAK/B2P,EAAU7K,EAAkB,CAChCC,KAAM+D,IAAc2H,QACpBzL,SAAU,CACR4K,SAAU,CACR,CACErP,MAAOmB,EAAWgC,WAClBxC,OAAQ,SAXqB,kBAkBdgJ,IAAWwG,aAAahP,GAlBV,OAkB7BqO,EAlB6B,OAmBnCjC,QAAQC,IAAI,iBAAkBgC,GAC1BA,GAEFxK,EAAgB,CACdR,KAAM+D,IAAcI,KACpB9F,KAAMuM,EACN3K,SAAU,CACR4K,SAAU,CACR,CACErP,MAAOmB,EAAWgC,WAClBxC,OAAQ,MAGZ8O,KAAMD,KAhCuB,kDAqCnCrK,EAAYiK,GACZS,uBAAa,CACXrL,KAAM,OACNsL,QAAS,kBACTC,SAAU,KAEZxC,QAAQC,IAAR,MA3CmC,0DA8CtC,CAACrM,EAAY1B,EAAQ0F,EAAaZ,EAAmBS,IAElDoL,GAAaxQ,uBAAY,WAC7B,GAAIuL,IAAmBjD,GAAM,CAC3B,GAAIA,GAAKmI,mBAMP,YALAR,uBAAa,CACXrL,KAAM,OACNsL,QAAS,wBACTH,YAAa,gDAKjB,IAAK3C,GAMH,YALA6C,uBAAa,CACXrL,KAAM,QACNsL,QAAS,4BACTH,YAAa,iDAKjBhD,IAAuB,QAEvBkD,uBAAa,CACXrL,KAAM,OACNsL,QAAS,mBACTH,YAAa,4BAGhB,CAAC3C,GAAgB7B,GAAiBjD,KAE/BoI,GAAgB1Q,uBAAY,WAC5BuL,IAAmBjD,GACrB2E,IAAuB,GAEvBgD,uBAAa,CACXrL,KAAM,OACNsL,QAAS,mBACTH,YAAa,4BAGhB,CAACxE,GAAiBjD,KAEfqI,GAAc/O,mBAAQ,WAAO,IAAD,EAChC,OAAIqJ,GACK,CACL2F,OAAO,EACPd,IAAK,sBAIT,iBAAOxH,SAAP,IAAOA,QAAP,EAAOA,GAAMuI,iBAAb,QAA0B,CAAED,OAAO,KAClC,CAACtI,GAAM2C,KAEJ6F,GAAclP,mBAAQ,yCAAM0G,SAAN,IAAMA,QAAN,EAAMA,GAAMyI,qBAAZ,WAAmC,CAACzI,KAE1D0I,GAAWpP,mBAAQ,WAAO,IAAD,EAC7B,OAAI+O,GAAYC,OAAStE,GAAYnK,GAAG,GAClCZ,EAAWgH,SAAW/G,EAAY+G,QAC7B,OAELhH,EAAWgH,QACN,SAEL/G,EAAY+G,QACP,OAEF,OAGT,iBAAOoI,SAAP,IAAOA,QAAP,EAAOA,GAAab,WAApB,QAA2B,SAC1B,CAACa,GAAarE,GAAa/K,EAAYC,IAWpCyP,GAA4BrP,mBAAQ,WAAO,IAAD,MAC9C,OACE,eAAC,EAAD,WACE,cAAC,cAAD,CACEoF,MAAM,OACN+I,YAAW,UAAKzD,GAAYoD,cAC1B,GADS,YAENnO,EAAW2P,KAAKC,iBAEvB,cAAC,cAAD,CACEnK,MAAM,YACN+I,YAAW,UAAKlC,GAAa6B,cAC3B,GADS,YAENlO,EAAY0P,KAAKC,iBAExB,uBACA,cAAC,cAAD,CACEnK,MAAM,oBACN+I,YAAaqB,YAAgBxE,IAC7Bc,OAAQN,KAEV,uBACA,cAAC,cAAD,CACEpG,MAAM,OACN+I,YAAahC,GAAYsD,QAAQ,GACjC3D,OAAQoD,GACRQ,QAASC,MAEX,cAAC,cAAD,CACEvK,MAAM,eACN+I,YAAW,UAAK9B,GAAWyB,cACzB,GADS,YAENlO,EAAY0P,KAAKC,eACtBG,QAASE,MAEX,cAAC,cAAD,CACExK,MAAM,kBACN+I,YAAatP,GAAWgR,mBACxBH,QAASI,MAEX,cAAC,cAAD,CACE1K,MAAM,gBACN+I,YAAW,oBACTzD,GAAYrG,IAAI,KAAKyJ,cAAc,UAD1B,QACgC,GADhC,YAEPnO,EAAW2P,KAAKC,eACpBG,QAAQ,wFAEV,cAAC,cAAD,CACEtK,MAAM,cACN+I,YAAW,iBAAElO,SAAF,IAAEA,QAAF,EAAEA,GAAa4P,0BAAf,QAAqC,GAChDH,QAAQ,2DAEV,cAAC,cAAD,CACEtK,MAAM,QACN+I,YAAW,UAAE5C,GAAsBsE,iBAAiB,UAAzC,QAA+C,GAC1DH,QAAQ,qDAcb,CACDhF,GACAuB,GACAtM,EACAC,EACAoL,GACAmB,GACA+C,GACA7C,GACAxN,GACAoB,GAGAuL,GACAD,KAGIwE,GAAqB/P,mBAAQ,WACjC,OACE,eAAC,EAAD,WACE,cAAC,cAAD,CACEoF,MAAK,kBAAazF,EAAW2P,KAAKC,eAClCpB,YAAY,KAEd,cAAC,cAAD,CACE/I,MAAM,kBACN+I,YAAatP,GAAWgR,mBACxBH,QAASI,WAId,CAACjR,GAAYc,IAEVyF,GAAQpF,mBACZ,gCAAcL,EAAW2P,KAAzB,eAAoC1P,EAAY0P,QAChD,CAAC3P,EAAYC,IAEToQ,GAAYhQ,mBAChB,kBAAOL,EAAWsQ,SAAWrQ,EAAcD,IAC3C,CAACA,EAAYC,IAGf,OACE,eAAC,EAAD,CAAWiF,KAAMO,GAAO4K,UAAWA,GAAWhN,KAAK,OAAnD,UACE,eAACoE,GAAD,WACE,cAAC,iBAAD,CACEhC,MAAM,OACN5G,MAAOmB,EACPqK,OAAQH,GACR1K,OAAQuL,GACRzL,QAAS6N,GACToD,SAAU/C,GACVgD,SAAUpD,GACVqD,MAAO3C,GACP4C,SAAU9D,GACVtO,OAAQA,QAAUiE,IAEpB,cAACoF,GAAD,UACE,cAAC,SAAD,CAAQgJ,MAAO1F,GAASsF,SAAU5C,GAAqBiD,WAAS,SAGpE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,aAAD,CAAYC,QAAStD,GAArB,SACE,cAACuD,EAAA,EAAD,UAIN,eAACpJ,GAAD,WACE,cAAC,iBAAD,CACEjC,MAAM,KACN5G,MAAOoB,EACPoK,OAAQO,GACRpL,OAAQ8M,GACRkE,SAAUlD,GACVyD,WAAY,CAAEC,UAAU,GACxBN,SAAU1D,GACV1O,OAAQA,QAAUiE,IAEpB,cAAC,EAAD,UACE,cAAC,oBAAD,CACEkD,MAAM,UACNiD,QAAS2C,GACT7N,MAAOyC,EAAYnB,QACnBmS,UAAW9F,GACX+F,gBAAiB5F,UAIvB,cAAC,EAAD,UA+BE,cAAC,cAAD,CACE7F,MAAM,YACN+I,YAAW,iBAAE5C,SAAF,IAAEA,QAAF,EAAEA,GAAuBsE,iBAAiB,UAA1C,QAAgD,GAC3DH,QAAQ,kDAGZ,cAAC,iBAAD,IACgB,OAAfhH,GAAuBzK,GACtB,eAAC,EAAD,YACIyK,GACA,cAAC,EAAD,CACE8H,QAAS1B,GACThD,OAAQiD,GAAYC,MACpB2B,SACExH,KAAuB/F,IAAgBM,SACvCyF,KAAuB/F,IAAgBC,WAEzCyN,QACE3H,KAAuB/F,IAAgBM,SACvCyF,KAAuB/F,IAAgBC,WAT3C,qBAeF,cAAC,cAAD,CACEsN,UAAWjI,EACX8H,QAAS5B,GACT9C,OAAQiD,GAAYC,MAHtB,SAKGI,SAILnR,GACA,cAAC,EAAD,UACE,cAAC,cAAD,CAAauS,QAAS5B,GAAY9C,OAAQiD,GAAYC,MAAtD,SACGI,OAIP,cAAC,eAAD,CACE2B,QAAS7F,GACT8F,KAAMtD,GACNuD,SAAUzC,GACV3E,YAAa,CAAClK,GAJhB,SAMG0P,KAEH,cAAC,eAAD,CACE0B,QAAS3F,GACT4F,KAAMvC,GACNwC,SAAU,kBAAM5F,IAAuB,IACvCxB,YAAa,CAAClK,GAJhB,SAMGoQ,SAMMmB,GAtwBE,WAAO,IACdhL,EAASiL,cAATjL,KADa,EAEWuC,qBAFX,mBAEd2I,EAFc,KAEJC,EAFI,KAgBrB,GAZAvI,qBAAU,YACK,uCAAG,4BAAA3C,EAAA,sEACaF,GAAYC,GADzB,QACRoL,EADQ,SAIZD,EAAYC,GAJA,2CAAH,qDAQbC,KACC,CAACrL,IAEAkL,EAAU,CAAC,IACLzR,EAA4ByR,EAA5BzR,WAAYC,EAAgBwR,EAAhBxR,YACpB,OAAO,cAAC,GAAD,CAAUD,WAAYA,EAAYC,YAAaA,IAGxD,OAAO,MGjFMuH","file":"static/js/3.4ddee221.chunk.js","sourcesContent":["import { FeeOptionKey } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOptionKey, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOptionKey\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useCallback } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Asset, Amount, getAssetBalance, NetworkFee } from 'multichain-sdk'\n\nimport { SupportedChain } from 'multichain-sdk/clients/types'\n\nimport { RootState } from 'redux/store'\nimport * as walletActions from 'redux/wallet/actions'\n\nimport { getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useBalance = () => {\n  const dispatch = useDispatch()\n  const { feeOptionType } = useSelector((state: RootState) => state.app)\n  const { wallet } = useSelector((state: RootState) => state.wallet)\n  const { inboundData } = useSelector((state: RootState) => state.midgard)\n\n  const reloadBalanceByChain = useCallback(\n    (chain: SupportedChain) => {\n      dispatch(walletActions.getWalletByChain(chain))\n    },\n    [dispatch],\n  )\n\n  const reloadAllBalance = useCallback(() => {\n    dispatch(walletActions.loadAllWallets())\n  }, [dispatch])\n\n  const getMaxBalance = useCallback(\n    (asset: Asset): Amount => {\n      if (!wallet?.[asset.L1Chain as SupportedChain]) {\n        // allow max amount for emulation if wallet is not connected\n        return Amount.fromAssetAmount(10 ** 8, 8)\n      }\n\n      // calculate inbound fee\n      const gasRate = getGasRateByFeeOption({\n        inboundData,\n        chain: asset.L1Chain,\n        feeOptionType,\n      })\n      const inboundFee = NetworkFee.getNetworkFeeByAsset({\n        asset,\n        gasRate,\n        direction: 'inbound',\n      })\n\n      const balance = getAssetBalance(asset, wallet).amount\n\n      /**\n       * if asset is used for gas, subtract the inbound gas fee from input amount\n       * else allow full amount\n       * Calc: max spendable amount = balance amount - 2 x gas fee(if send asset equals to gas asset)\n       */\n\n      const maxSpendableAmount = asset.isGasAsset()\n        ? balance.sub(inboundFee.mul(1.5).amount)\n        : balance\n\n      if (maxSpendableAmount.gt(0)) {\n        return maxSpendableAmount\n      }\n\n      return Amount.fromAssetAmount(0, asset.decimal)\n    },\n    [wallet, feeOptionType, inboundData],\n  )\n\n  return {\n    getMaxBalance,\n    reloadAllBalance,\n    reloadBalanceByChain,\n    wallet,\n  }\n}\n","import { useMemo } from 'react'\n\nimport { Asset, Amount, AssetAmount, NetworkFee, Pool } from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport { getGasRateByChain, getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useNetworkFee = ({\n  inputAsset,\n  outputAsset,\n}: {\n  inputAsset: Asset\n  outputAsset?: Asset\n}) => {\n  const { feeOptionType } = useApp()\n  const { inboundData, pools } = useMidgard()\n\n  const inboundFee = useMemo(() => {\n    // get inbound gasRate with fee option\n\n    const gasRate = getGasRateByFeeOption({\n      inboundData,\n      chain: inputAsset.L1Chain,\n      feeOptionType,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: inputAsset,\n      gasRate,\n      direction: 'inbound',\n    })\n\n    return networkFee\n  }, [inputAsset, inboundData, feeOptionType])\n\n  const outboundFee = useMemo(() => {\n    if (!outputAsset) return null\n\n    const gasRate = getGasRateByChain({\n      inboundData,\n      chain: outputAsset.L1Chain,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: outputAsset,\n      gasRate,\n      direction: 'outbound',\n    })\n\n    return networkFee\n  }, [outputAsset, inboundData])\n\n  const totalFee = useMemo(() => {\n    if (!outboundFee) return inboundFee\n\n    const outboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        outboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n\n    if (inboundFee.asset.eq(inputAsset)) {\n      return inboundFee.add(outboundFeeInSendAsset)\n    }\n\n    const inboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        inboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n    return inboundFeeInSendAsset.add(outboundFeeInSendAsset)\n  }, [inputAsset, inboundFee, outboundFee, pools])\n\n  const totalFeeInUSD = useMemo(\n    () => totalFee.totalPriceIn(Asset.USD(), pools),\n    [totalFee, pools],\n  )\n\n  return {\n    totalFee,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n  }\n}\n\nexport const getSumAmountInUSD = (\n  assetAmount1: AssetAmount | null,\n  assetAmount2: AssetAmount | null,\n  pools: Pool[],\n) => {\n  const assetAmount1InUSD = assetAmount1?.totalPriceIn(Asset.USD(), pools)\n  const assetAmount2InUSD = assetAmount2?.totalPriceIn(Asset.USD(), pools)\n\n  if (assetAmount1 === null && assetAmount2InUSD)\n    return assetAmount2InUSD.toCurrencyFormat()\n  if (assetAmount2 === null && assetAmount1InUSD)\n    return assetAmount1InUSD.toCurrencyFormat()\n\n  if (assetAmount1InUSD && assetAmount2InUSD) {\n    const sum = assetAmount1InUSD.raw().plus(assetAmount2InUSD.raw())\n\n    return Amount.fromAssetAmount(sum, 8).toFixed(2)\n  }\n\n  return Amount.fromAssetAmount(0, 8).toFixed()\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { useCallback } from 'react'\n\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, SubmitTx, TxTrackerType } from 'redux/midgard/types'\n\n/**\n * 1. send transaction and get txHash\n * 2. poll midgard action API and get \"in\" tx with the same txHash\n * 3. check action status (success, pending)\n * 4. check action type and match with send tx type\n *    (if action type is not \"refund\", action type should be matched to the send type)\n */\n\nexport const useTxTracker = () => {\n  const {\n    addNewTxTracker,\n    updateTxTracker,\n    clearTxTrackers,\n    processSubmittedTx,\n  } = useMidgard()\n\n  // confirm and submit a transaction\n  const submitTransaction = useCallback(\n    ({\n      type,\n      submitTx,\n    }: {\n      type: TxTrackerType\n      submitTx: SubmitTx\n    }): string => {\n      const uuid = uuidv4()\n\n      addNewTxTracker({\n        uuid,\n        type,\n        status: TxTrackerStatus.Submitting,\n        submitTx,\n        action: null,\n        refunded: null,\n      })\n\n      return uuid\n    },\n    [addNewTxTracker],\n  )\n\n  // start polling a transaction\n  const pollTransaction = useCallback(\n    ({\n      uuid,\n      submitTx,\n      type,\n    }: {\n      uuid: string\n      submitTx: SubmitTx\n      type: TxTrackerType\n    }) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Pending,\n          submitTx,\n        },\n      })\n      processSubmittedTx({ submitTx, type })\n    },\n    [updateTxTracker, processSubmittedTx],\n  )\n\n  // start polling a transaction\n  const setTxFailed = useCallback(\n    (uuid: string) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Failed,\n        },\n      })\n    },\n    [updateTxTracker],\n  )\n\n  return {\n    submitTransaction,\n    pollTransaction,\n    clearTxTrackers,\n    setTxFailed,\n  }\n}\n","import { transparentize } from 'polished'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nimport { media } from 'helpers/style'\n\nimport { Panel } from '../../../components/Panel'\n\nexport const Container = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n\n  align-items: center;\n  justify-content: center;\n\n  background: ${({ theme }) =>\n    `${transparentize(0.4, theme.palette.background[5])}`};\n  width: 90vw;\n  max-width: 500px;\n  margin: auto auto auto auto;\n  margin-bottom: 2vh;\n  padding-top: 0px;\n  padding-right: auto;\n  padding-left: auto;\n\n  border-radius: 10px;\n  border: none;\n`\n\nexport const ContentPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 96%;\n\n  padding: 16px 8px 16px 8px;\n\n  ${media.sm`\n    padding: 16px 12px 4px 12px;\n  `}\n`\n\nexport const HeaderContent = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  flex: 1;\n\n  padding: 0 10px;\n`\n\nexport const HeaderMenu = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const HeaderActions = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const PoolDetailLink = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  height: 20px;\n  color: ${palette('text', 0)};\n`\n\nexport const MenuIconWrapper = styled.div<{ selected: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  height: 20px;\n\n  font-weight: ${(props) => (props.selected ? 'bold' : 'normal')};\n\n  svg {\n    color: ${(props) =>\n      props.selected ? palette('primary', 0) : palette('text', 0)};\n  }\n`\n","import React from 'react'\n\n// import { Link } from 'react-router-dom'\n// import { SwapOutlined } from '@ant-design/icons'\nimport { useGlobalState } from 'redux/hooks'\n\nimport { useMedia } from 'hooks/useMedia'\n\nimport { ContentTitle } from '../../../components'\nimport { Helmet } from '../../../components/Helmet'\nimport { Refresh } from '../../../components/Refresh'\nimport { SettingsOverlay } from '../../../components/SettingsOverlay'\nimport { Asset } from '../../../multichain-sdk'\nimport * as Styled from './PanelView.style'\n\nexport type PanelViewProps = {\n  type: 'swap' | 'pending' | 'savings'\n  meta: string\n  poolAsset: Asset\n  children: React.ReactNode\n}\n\n// const SwapButton = ({ selected }: { selected: boolean }) => (\n//   <CoreButton>\n//     <Tooltip tooltip=\"Swap\" placement=\"top\">\n//       <Styled.MenuIconWrapper selected={selected}>\n//         <SwapOutlined />\n//       </Styled.MenuIconWrapper>\n//     </Tooltip>\n//   </CoreButton>\n// )\n\n// type MenuButtonProps = {\n//   selected: boolean\n//   route: string\n//   children: React.ReactElement\n// }\n\n// const MenuButton: React.FC<MenuButtonProps> = ({\n//   selected,\n//   route,\n//   children,\n// }) => {\n//   if (selected) {\n//     return children\n//   }\n\n//   return <Link to={route}>{children}</Link>\n// }\n\nexport const PanelView = ({\n  // type,\n  meta,\n  // poolAsset,\n  children,\n}: PanelViewProps) => {\n  // const swapRoute = useMemo(() => {\n  //   return getSwapRoute(poolAsset, Asset.RUNE())\n  // }, [poolAsset])\n\n  const { refreshPage } = useGlobalState()\n  // const isGadgetVisible = useMedia('(min-width: 824px)')\n  const isRefreshVisible = useMedia('(min-width: 375px)')\n\n  return (\n    <Styled.Container>\n      <Helmet title={meta} content={meta} />\n      <ContentTitle>\n        <Styled.HeaderContent>\n          <Styled.HeaderMenu>\n            {isRefreshVisible && <Refresh onRefresh={refreshPage} />}\n            {/* <MenuButton selected={type === 'swap'} route={swapRoute}>\n              <SwapButton selected={type === 'swap'} />\n            </MenuButton> */}\n          </Styled.HeaderMenu>\n          <SettingsOverlay />\n        </Styled.HeaderContent>\n      </ContentTitle>\n      <Styled.ContentPanel>{children}</Styled.ContentPanel>\n    </Styled.Container>\n  )\n}\n","import { FancyButton } from 'components'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nexport const ToolContainer = styled.div`\n  display: box;\n  margin-top: 13px;\n  margin-bottom: 3px;\n  height: 40px;\n`\n\nexport const SliderWrapper = styled.div`\n  margin: auto;\n  width: 95%;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const SwitchPair = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n\n  svg {\n    width: 24px;\n    height: 24px;\n    color: ${palette('text', 4)};\n    transform: rotate(90deg);\n  }\n`\n\nexport const ConfirmButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 0 1%;\n\n  margin-top: 25px;\n  margin-bottom: 20px;\n\n  button {\n    flex: 1;\n  }\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n\nexport const RecipientAddrWrapper = styled.div`\n  margin-top: 14px;\n`\n\nexport const SwapInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  padding: 8px;\n  margin-top: 14px;\n\n  border: 1px solid ${palette('gray', 0)};\n  border-radius: 4px;\n`\n\nexport const ApproveBtn = styled(FancyButton)`\n  margin-right: 8px;\n`\n","import { Asset, Swap, SynthType } from 'multichain-sdk'\n\nimport { TxTrackerType } from 'redux/midgard/types'\n\nimport { Pair } from './types'\n\nexport const getSwapPair = async (pair: string): Promise<Pair | null> => {\n  if (!pair || pair.split('_').length !== 2) {\n    return null\n  }\n\n  const input = pair.split('_')?.[0]\n  const output = pair.split('_')?.[1]\n\n  if (!input || !output) return null\n\n  const inputAsset = Asset.decodeFromURL(input)\n  const outputAsset = Asset.decodeFromURL(output)\n\n  if (!inputAsset || !outputAsset) return null\n\n  await inputAsset.setDecimal()\n  await outputAsset.setDecimal()\n\n  return {\n    inputAsset,\n    outputAsset,\n  }\n}\n\nexport const getSwapTrackerType = (swap: Swap): TxTrackerType => {\n  if (swap.inputAsset.isSynth || swap.outputAsset.isSynth) {\n    if (swap.synthType === SynthType.MINT) {\n      return TxTrackerType.Mint\n    }\n    if (swap.synthType === SynthType.REDEEM) {\n      return TxTrackerType.Redeem\n    }\n  }\n\n  return TxTrackerType.Swap\n}\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\n\nimport { useHistory, useParams } from 'react-router'\n\nimport { SwapOutlined } from '@ant-design/icons'\nimport {\n  AddressSelectCard,\n  AssetInputCard,\n  Slider,\n  ConfirmModal,\n  Information,\n  Notification,\n  IconButton,\n  FancyButton,\n  ProtocolSelect,\n} from 'components'\nimport {\n  getInputAssets,\n  Amount,\n  Asset,\n  AssetAmount,\n  getWalletAddressByChain,\n  Swap,\n  Percent,\n  Price,\n  getAssetBalance,\n  SupportedChain,\n  hasWalletConnected,\n  hasConnectedWallet,\n} from 'multichain-sdk'\nimport styled from 'styled-components'\nimport { palette } from 'styled-theme'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, TxTrackerType } from 'redux/midgard/types'\n\nimport { useApprove } from 'hooks/useApprove'\nimport { useBalance } from 'hooks/useBalance'\nimport { useMimir } from 'hooks/useMimir'\nimport { useNetworkFee } from 'hooks/useNetworkFee'\nimport { useTxTracker } from 'hooks/useTxTracker'\n\nimport { multichain } from 'services/multichain'\n\nimport { translateErrorMsg } from 'helpers/error'\nimport { truncateAddress } from 'helpers/string'\n\nimport { IS_SYNTH_ACTIVE } from 'settings/config'\nimport { getSwapRoute } from 'settings/constants'\nimport {\n  TX_FEE_TOOLTIP_LABEL,\n  SLIP_TOOLTIP_LABEL,\n  // ESTIMATED_TIME_LABEL,\n  MIN_RECEIVED_LABEL,\n} from 'settings/constants/label'\n\nimport { PanelView } from './PanelView'\nimport * as Styled from './Swap.style'\nimport { Pair } from './types'\nimport { getSwapPair, getSwapTrackerType } from './utils'\n\nconst SwapView = () => {\n  const { pair } = useParams<{ pair: string }>()\n  const [swapPair, setSwapPair] = useState<Pair>()\n\n  useEffect(() => {\n    const getPair = async () => {\n      const swapPairData = await getSwapPair(pair)\n\n      if (swapPairData) {\n        setSwapPair(swapPairData)\n      }\n    }\n\n    getPair()\n  }, [pair])\n\n  if (swapPair) {\n    const { inputAsset, outputAsset } = swapPair\n    return <SwapPage inputAsset={inputAsset} outputAsset={outputAsset} />\n  }\n\n  return null\n}\nconst FromCard = styled.div`\n  background-image: linear-gradient(\n    120deg,\n    ${palette('background', 6)},\n    ${palette('background', 7)}\n  );\n  border-radius: 4px;\n  height: 145px;\n`\n\nconst ToCard = styled.div`\n  background-image: linear-gradient(\n    120deg,\n    ${palette('background', 6)},\n    ${palette('background', 7)}\n  );\n  border-radius: 4px;\n  height: 145px;\n`\n\nconst StyledSliderWrapper = styled.div`\n  width: 90%;\n  margin: auto;\n`\n\nconst SwapPage = ({ inputAsset, outputAsset }: Pair) => {\n  const history = useHistory()\n  const { wallet, getMaxBalance } = useBalance()\n  const { pools: allPools, poolLoading, inboundData } = useMidgard()\n  const { slippageTolerance, affiliates } = useApp()\n  const { haltedChains } = useMimir()\n  const filteredAffiliates = useMemo(\n    () =>\n      affiliates?.filter((affiliate) =>\n        multichain.validateAddress({\n          chain: 'THOR',\n          address: affiliate,\n        }),\n      ),\n    [affiliates],\n  )\n  const { submitTransaction, pollTransaction, setTxFailed } = useTxTracker()\n  const { isApproved, assetApproveStatus } = useApprove(inputAsset, !!wallet)\n  const isTradingHalted: boolean = useMemo(() => {\n    const inTradeInboundData = inboundData.find(\n      (data) => data.chain === inputAsset.chain,\n    )\n    const outTradeInboundData = inboundData.find(\n      (data) => data.chain === outputAsset.chain,\n    )\n\n    const inTradeMimirStatus =\n      haltedChains[inputAsset.L1Chain as SupportedChain]\n    const outTradeMimirStatus =\n      haltedChains[outputAsset.L1Chain as SupportedChain]\n    return (\n      (inTradeInboundData?.halted ?? false) ||\n      (outTradeInboundData?.halted ?? false) ||\n      inTradeMimirStatus ||\n      outTradeMimirStatus\n    )\n  }, [inboundData, haltedChains, inputAsset, outputAsset])\n\n  const { inboundFee, outboundFee, totalFee } = useNetworkFee({\n    inputAsset,\n    outputAsset,\n  })\n\n  const walletConnected = useMemo(\n    () => hasWalletConnected({ wallet, inputAssets: [inputAsset] }),\n    [wallet, inputAsset],\n  )\n\n  const pools = useMemo(\n    () => allPools.filter((data) => data.detail.status === 'available'),\n    [allPools],\n  )\n  const poolAssets = useMemo(() => {\n    const assets = pools.map((pool) => pool.asset)\n    assets.push(Asset.RUNE())\n\n    return assets\n  }, [pools])\n\n  const synthAssets = useMemo(() => {\n    return pools.map((pool) => {\n      const { asset } = pool\n      const synthAsset = new Asset(asset.chain, asset.symbol, true)\n      synthAsset.isSynth = true\n\n      return synthAsset\n    })\n  }, [pools])\n\n  const outputAssets = useMemo(() => {\n    if (IS_SYNTH_ACTIVE) {\n      return [...poolAssets, ...synthAssets]\n    }\n    return poolAssets\n  }, [poolAssets, synthAssets])\n\n  const inputAssets = useMemo(\n    () =>\n      hasConnectedWallet(wallet)\n        ? getInputAssets({ wallet, pools })\n        : outputAssets,\n    [wallet, pools, outputAssets],\n  )\n\n  const [inputAmount, setInputAmount] = useState<Amount>(\n    Amount.fromAssetAmount(0, 8),\n  )\n  const [percent, setPercent] = useState(0)\n  const [chainRecipient, setChainRecipient] = useState('')\n  const [recipient, setRecipient] = useState('')\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n  const [visibleApproveModal, setVisibleApproveModal] = useState(false)\n  const affiliateFee = useMemo(() => inputAmount.div(100), [inputAmount])\n  const totalFeePlusAffiliate = useMemo(\n    () =>\n      totalFee\n        .add(new AssetAmount(inputAsset, affiliateFee))\n        .totalPriceIn(Asset.USD(), pools),\n    [affiliateFee, inputAsset, pools, totalFee],\n  )\n  const isValidAddress = useMemo(\n    () =>\n      multichain.validateAddress({\n        chain: outputAsset.L1Chain,\n        address: recipient,\n      }),\n    [outputAsset, recipient],\n  )\n\n  const swap: Swap | null = useMemo(() => {\n    if (poolLoading) return null\n\n    try {\n      const inputAssetAmount = new AssetAmount(inputAsset, inputAmount)\n\n      const inboundFeeInInputAsset = new AssetAmount(\n        inputAsset,\n        Amount.fromAssetAmount(\n          inboundFee.totalPriceIn(inputAsset, pools).price,\n          inputAsset.decimal,\n        ),\n      )\n\n      const outboundFeeInOutputAsset = outboundFee\n        ? new AssetAmount(\n            outputAsset,\n            Amount.fromAssetAmount(\n              outboundFee.totalPriceIn(outputAsset, pools).price,\n              outputAsset.decimal,\n            ),\n          )\n        : new AssetAmount(\n            outputAsset,\n            Amount.fromAssetAmount(0, outputAsset.decimal),\n          )\n\n      return new Swap({\n        inputAsset,\n        outputAsset,\n        pools,\n        amount: inputAssetAmount,\n        slip: slippageTolerance,\n        fee: {\n          inboundFee: inboundFeeInInputAsset,\n          outboundFee: outboundFeeInOutputAsset,\n        },\n      })\n    } catch (error) {\n      console.log(error)\n      return null\n    }\n  }, [\n    inputAsset,\n    outputAsset,\n    pools,\n    inputAmount,\n    slippageTolerance,\n    poolLoading,\n    inboundFee,\n    outboundFee,\n  ])\n\n  const outputAmount: Amount = useMemo(() => {\n    if (swap) {\n      return swap.outputAmountAfterFee.amount\n    }\n\n    return Amount.fromAssetAmount(0, 8)\n  }, [swap])\n\n  const slipPercent: Percent = useMemo(\n    () => (swap ? swap.slip : new Percent(0)),\n    [swap],\n  )\n\n  const minReceive: Amount = useMemo(\n    () => (swap ? swap.minOutputAmount : Amount.fromAssetAmount(0, 8)),\n    [swap],\n  )\n\n  const inputAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: inputAsset,\n        pools,\n        priceAmount: inputAmount,\n      }),\n    [inputAsset, inputAmount, pools],\n  )\n\n  const outputAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: outputAsset,\n        pools,\n        priceAmount: outputAmount,\n      }),\n    [outputAsset, outputAmount, pools],\n  )\n\n  useEffect(() => {\n    if (wallet) {\n      const address = getWalletAddressByChain(wallet, outputAsset.L1Chain)\n      setRecipient(address || '')\n      setChainRecipient(address || '')\n    }\n  }, [wallet, outputAsset])\n\n  const maxInputBalance: Amount = useMemo(() => getMaxBalance(inputAsset), [\n    inputAsset,\n    getMaxBalance,\n  ])\n\n  const inputAssetBalance: Amount = useMemo(() => {\n    if (!wallet) {\n      // allow max amount for emulation if wallet is not connected\n      return Amount.fromAssetAmount(10 ** 3, 8)\n    }\n\n    return getAssetBalance(inputAsset, wallet)\n  }, [inputAsset, wallet])\n\n  const handleSelectInputAsset = useCallback(\n    (input: Asset) => {\n      history.push(getSwapRoute(input, outputAsset))\n    },\n    [history, outputAsset],\n  )\n\n  const handleSelectOutputAsset = useCallback(\n    (output: Asset) => {\n      history.push(getSwapRoute(inputAsset, output))\n    },\n    [history, inputAsset],\n  )\n\n  const handleSwitchPair = useCallback(() => {\n    history.push(getSwapRoute(outputAsset, inputAsset))\n  }, [history, inputAsset, outputAsset])\n\n  const handleChangeInputAmount = useCallback(\n    (amount: Amount) => {\n      if (amount.gt(maxInputBalance)) {\n        setInputAmount(maxInputBalance)\n        setPercent(100)\n      } else {\n        setInputAmount(amount)\n        setPercent(amount.div(maxInputBalance).mul(100).assetAmount.toNumber())\n      }\n    },\n    [maxInputBalance],\n  )\n\n  const handleChangePercent = useCallback(\n    (p: number) => {\n      setPercent(p)\n      const newAmount = maxInputBalance.mul(p).div(100)\n      setInputAmount(newAmount)\n    },\n    [maxInputBalance],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    handleChangePercent(100)\n  }, [handleChangePercent])\n\n  const handleConfirm = useCallback(async () => {\n    setVisibleConfirmModal(false)\n\n    if (wallet && swap) {\n      const trackerType = getSwapTrackerType(swap)\n\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: trackerType,\n        submitTx: {\n          inAssets: [\n            {\n              asset: swap.inputAsset.toString(),\n              amount: swap.inputAmount.toSignificant(6),\n            },\n          ],\n          outAssets: [\n            {\n              asset: swap.outputAsset.toString(),\n              amount: swap.outputAmountAfterFee.toSignificant(6),\n            },\n          ],\n        },\n      })\n\n      try {\n        const txHash = await multichain.swap(\n          swap,\n          recipient,\n          filteredAffiliates,\n        )\n\n        // start polling\n        pollTransaction({\n          type: trackerType,\n          uuid: trackId,\n          submitTx: {\n            inAssets: [\n              {\n                asset: swap.inputAsset.toString(),\n                amount: swap.inputAmount.toSignificant(6),\n              },\n            ],\n            outAssets: [\n              {\n                asset: swap.outputAsset.toString(),\n                amount: swap.outputAmountAfterFee.toSignificant(6),\n              },\n            ],\n            txID: txHash,\n          },\n        })\n      } catch (error: any) {\n        setTxFailed(trackId)\n\n        // handle better error message\n        const description = translateErrorMsg(error?.toString())\n\n        Notification({\n          type: 'error',\n          message: 'Submit Transaction Failed.',\n          description,\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [\n    wallet,\n    swap,\n    recipient,\n    filteredAffiliates,\n    submitTransaction,\n    pollTransaction,\n    setTxFailed,\n  ])\n\n  const handleCancel = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  const handleConfirmApprove = useCallback(async () => {\n    setVisibleApproveModal(false)\n\n    if (wallet) {\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: TxTrackerType.Approve,\n        submitTx: {\n          inAssets: [\n            {\n              asset: inputAsset.toString(),\n              amount: '0', // not needed for approve tx\n            },\n          ],\n        },\n      })\n\n      try {\n        const txHash = await multichain.approveAsset(inputAsset)\n        console.log('approve txhash', txHash)\n        if (txHash) {\n          // start polling\n          pollTransaction({\n            type: TxTrackerType.Swap,\n            uuid: trackId,\n            submitTx: {\n              inAssets: [\n                {\n                  asset: inputAsset.toString(),\n                  amount: '0', // not needed for approve tx\n                },\n              ],\n              txID: txHash,\n            },\n          })\n        }\n      } catch (error) {\n        setTxFailed(trackId)\n        Notification({\n          type: 'open',\n          message: 'Approve Failed.',\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [inputAsset, wallet, setTxFailed, submitTransaction, pollTransaction])\n\n  const handleSwap = useCallback(() => {\n    if (walletConnected && swap) {\n      if (swap.hasInSufficientFee) {\n        Notification({\n          type: 'info',\n          message: 'Swap Insufficient Fee',\n          description: 'Input amount is not enough to cover the fee',\n        })\n        return\n      }\n\n      if (!isValidAddress) {\n        Notification({\n          type: 'error',\n          message: 'Invalid Recipient Address',\n          description: 'Recipient address should be a valid address.',\n        })\n        return\n      }\n\n      setVisibleConfirmModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [isValidAddress, walletConnected, swap])\n\n  const handleApprove = useCallback(() => {\n    if (walletConnected && swap) {\n      setVisibleApproveModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [walletConnected, swap])\n\n  const isValidSwap = useMemo(() => {\n    if (isTradingHalted) {\n      return {\n        valid: false,\n        msg: 'Swap not available',\n      }\n    }\n\n    return swap?.isValid() ?? { valid: false }\n  }, [swap, isTradingHalted])\n\n  const isValidSlip = useMemo(() => swap?.isSlipValid() ?? true, [swap])\n\n  const btnLabel = useMemo(() => {\n    if (isValidSwap.valid || inputAmount.eq(0)) {\n      if (inputAsset.isSynth && outputAsset.isSynth) {\n        return 'Swap'\n      }\n      if (inputAsset.isSynth) {\n        return 'Redeem'\n      }\n      if (outputAsset.isSynth) {\n        return 'Mint'\n      }\n      return 'Swap'\n    }\n\n    return isValidSwap?.msg ?? 'Swap'\n  }, [isValidSwap, inputAmount, inputAsset, outputAsset])\n\n  // const estimatedTime = useMemo(\n  //   () =>\n  //     getEstimatedTxTime({\n  //       chain: inputAsset.L1Chain as SupportedChain,\n  //       amount: inputAmount,\n  //     }),\n  //   [inputAsset, inputAmount],\n  // )\n\n  const renderConfirmModalContent = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title=\"Send\"\n          description={`${inputAmount.toSignificant(\n            6,\n          )} ${inputAsset.name.toUpperCase()}`}\n        />\n        <Information\n          title=\"Recipient\"\n          description={`${outputAmount.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n        />\n        <br />\n        <Information\n          title=\"Recipient Address\"\n          description={truncateAddress(recipient)}\n          error={!isValidAddress}\n        />\n        <br />\n        <Information\n          title=\"Slip\"\n          description={slipPercent.toFixed(3)}\n          error={!isValidSlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Min Received\"\n          description={`${minReceive.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n          tooltip={MIN_RECEIVED_LABEL}\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Affiliate Fee\"\n          description={`${\n            inputAmount.div(100).toSignificant(4) ?? ''\n          } ${inputAsset.name.toUpperCase()}`}\n          tooltip=\"Transaction fee of 1% used to pay affiliates and fund Crosschain.Quest development.\"\n        />\n        <Information\n          title=\"Network Fee\"\n          description={outboundFee?.toCurrencyFormat() ?? ''}\n          tooltip=\"Thorchain network fee used to pay outbound transaction\"\n        />\n        <Information\n          title=\"Total\"\n          description={totalFeePlusAffiliate.toCurrencyFormat(2) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        />\n        {/* <Information\n          title=\"Total Fee\"\n          description={totalFeeInUSD.toCurrencyFormat(4) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        /> */}\n        {/* <Information\n          title=\"Estimated Time\"\n          description={estimatedTime}\n          tooltip={ESTIMATED_TIME_LABEL}\n        /> */}\n      </Styled.ConfirmModalContent>\n    )\n  }, [\n    inputAmount,\n    outputAmount,\n    inputAsset,\n    outputAsset,\n    recipient,\n    slipPercent,\n    isValidSlip,\n    minReceive,\n    inboundFee,\n    outboundFee,\n    // totalFeeInUSD,\n    // estimatedTime,\n    isValidAddress,\n    totalFeePlusAffiliate,\n  ])\n\n  const renderApproveModal = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title={`Approve ${inputAsset.name.toUpperCase()}`}\n          description=\"\"\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [inboundFee, inputAsset])\n\n  const title = useMemo(\n    () => `Swap ${inputAsset.name} >> ${outputAsset.name}`,\n    [inputAsset, outputAsset],\n  )\n  const poolAsset = useMemo(\n    () => (inputAsset.isRUNE() ? outputAsset : inputAsset),\n    [inputAsset, outputAsset],\n  )\n\n  return (\n    <PanelView meta={title} poolAsset={poolAsset} type=\"swap\">\n      <FromCard>\n        <AssetInputCard\n          title=\"from\"\n          asset={inputAsset}\n          assets={inputAssets}\n          amount={inputAmount}\n          balance={inputAssetBalance}\n          onChange={handleChangeInputAmount}\n          onSelect={handleSelectInputAsset}\n          onMax={handleSelectMax}\n          usdPrice={inputAssetPriceInUSD}\n          wallet={wallet || undefined}\n        />\n        <StyledSliderWrapper>\n          <Slider value={percent} onChange={handleChangePercent} withLabel />\n        </StyledSliderWrapper>\n      </FromCard>\n      <Styled.ToolContainer>\n        <Styled.SwitchPair>\n          <IconButton onClick={handleSwitchPair}>\n            <SwapOutlined />\n          </IconButton>\n        </Styled.SwitchPair>\n      </Styled.ToolContainer>\n      <ToCard>\n        <AssetInputCard\n          title=\"to\"\n          asset={outputAsset}\n          assets={outputAssets}\n          amount={outputAmount}\n          onSelect={handleSelectOutputAsset}\n          inputProps={{ disabled: true }}\n          usdPrice={outputAssetPriceInUSD}\n          wallet={wallet || undefined}\n        />\n        <Styled.RecipientAddrWrapper>\n          <AddressSelectCard\n            title=\"address\"\n            address={recipient}\n            chain={outputAsset.L1Chain}\n            chainAddr={chainRecipient}\n            onAddressChange={setRecipient}\n          />\n        </Styled.RecipientAddrWrapper>\n      </ToCard>\n      <Styled.SwapInfo>\n        {/* <PriceRate\n          price={swap?.price}\n          inputAsset={swap?.inputAsset}\n          outputAsset={swap?.outputAsset}\n        />\n        <Information\n          title=\"Slip\"\n          description={slipPercent.toFixed(3)}\n          error={!isValidSlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Min Received\"\n          description={`${minReceive.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n          tooltip={MIN_RECEIVED_LABEL}\n        />\n\n        <br />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Network Fee\"\n          description={outboundFee?.toCurrencyFormat() ?? ''}\n          tooltip=\"Estimated network fee used to pay outbound transaction\"\n        /> */}\n        <Information\n          title=\"Total Fee\"\n          description={totalFeePlusAffiliate?.toCurrencyFormat(2) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        />\n      </Styled.SwapInfo>\n      <ProtocolSelect />\n      {isApproved !== null && wallet && (\n        <Styled.ConfirmButtonContainer>\n          {!isApproved && (\n            <Styled.ApproveBtn\n              onClick={handleApprove}\n              error={!isValidSwap.valid}\n              disabled={\n                assetApproveStatus === TxTrackerStatus.Pending ||\n                assetApproveStatus === TxTrackerStatus.Submitting\n              }\n              loading={\n                assetApproveStatus === TxTrackerStatus.Pending ||\n                assetApproveStatus === TxTrackerStatus.Submitting\n              }\n            >\n              Approve\n            </Styled.ApproveBtn>\n          )}\n          <FancyButton\n            disabled={!isApproved}\n            onClick={handleSwap}\n            error={!isValidSwap.valid}\n          >\n            {btnLabel}\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      )}\n      {!wallet && (\n        <Styled.ConfirmButtonContainer>\n          <FancyButton onClick={handleSwap} error={!isValidSwap.valid}>\n            {btnLabel}\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      )}\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleConfirm}\n        onCancel={handleCancel}\n        inputAssets={[inputAsset]}\n      >\n        {renderConfirmModalContent}\n      </ConfirmModal>\n      <ConfirmModal\n        visible={visibleApproveModal}\n        onOk={handleConfirmApprove}\n        onCancel={() => setVisibleApproveModal(false)}\n        inputAssets={[inputAsset]}\n      >\n        {renderApproveModal}\n      </ConfirmModal>\n    </PanelView>\n  )\n}\n\nexport default SwapView\n","import { useEffect, useState, useMemo } from 'react'\n\nimport { Asset, hasConnectedWallet } from 'multichain-sdk'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus } from 'redux/midgard/types'\nimport { useWallet } from 'redux/wallet/hooks'\n\nimport { multichain } from 'services/multichain'\n\nexport const useApprove = (asset: Asset, hasWallet = true) => {\n  const { approveStatus } = useMidgard()\n  const { wallet } = useWallet()\n  const [isApproved, setApproved] = useState<boolean | null>(\n    hasWallet ? null : true,\n  )\n\n  const isWalletConnected = useMemo(() => hasConnectedWallet(wallet), [wallet])\n\n  useEffect(() => {\n    if (!hasWallet || !isWalletConnected) {\n      setApproved(true)\n      return\n    }\n\n    const checkApproved = async () => {\n      if (approveStatus?.[asset.toString()] === TxTrackerStatus.Success) {\n        setApproved(true)\n      }\n      const approved = await multichain.isAssetApproved(asset)\n      setApproved(approved)\n    }\n\n    checkApproved()\n  }, [asset, approveStatus, hasWallet, isWalletConnected])\n\n  const assetApproveStatus = useMemo(() => approveStatus?.[asset.toString()], [\n    approveStatus,\n    asset,\n  ])\n\n  return {\n    assetApproveStatus,\n    isApproved,\n  }\n}\n","const ORIGIN_UTXO_ERROR_MSG = 'No utxos to send'\nconst PROCESSED_UTXO_ERROR_MSG =\n  'Please wait a bit until UTXOs are confirmed and Try again.'\n\nexport const translateErrorMsg = (msg: string) => {\n  if (msg.includes(ORIGIN_UTXO_ERROR_MSG)) {\n    return PROCESSED_UTXO_ERROR_MSG\n  }\n\n  return msg\n}\n","import Swap from './Swap'\n\nexport default Swap\n"],"sourceRoot":""}