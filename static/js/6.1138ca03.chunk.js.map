{"version":3,"sources":["helpers/networkFee.ts","hooks/useBalance.ts","views/Affiliate/Affiliate.style.ts","views/Affiliate/Affiliate.tsx","views/Affiliate/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useBalance","dispatch","useDispatch","useSelector","state","app","wallet","midgard","reloadBalanceByChain","useCallback","walletActions","reloadAllBalance","getMaxBalance","asset","L1Chain","Amount","fromAssetAmount","gasRate","inboundFee","NetworkFee","getNetworkFeeByAsset","direction","balance","getAssetBalance","amount","maxSpendableAmount","isGasAsset","sub","mul","gt","decimal","FromCard","styled","div","palette","Container","Panel","theme","transparentize","background","ConfirmModalContent","GenerateButton","FancyButton","Affiliate","useState","recipient","setRecipient","chainRecipient","setChainRecipient","link","setLink","visibleConfirmModal","setVisibleConfirmModal","handleCopyAddress","copy","Notification","type","message","duration","placement","getAffiliateLink","useMemo","disabled","value","tooltip","onClick","CopyOutlined","style","color","useEffect","address","getWalletAddressByChain","handleClose","title","content","chainAddr","onAddressChange","refs","getAffiliates","affiliateAddresses","push","filteredAddresses","filter","affiliateAddress","multichain","validateAddress","encodedQuery","encode","JSON","stringify","ADDRESS","description","error","visible","onOk","inputAssets","onCancel"],"mappings":"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","file":"static/js/6.1138ca03.chunk.js","sourcesContent":["import { FeeOptionKey } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOptionKey, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOptionKey\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useCallback } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Asset, Amount, getAssetBalance, NetworkFee } from 'multichain-sdk'\n\nimport { SupportedChain } from 'multichain-sdk/clients/types'\n\nimport { RootState } from 'redux/store'\nimport * as walletActions from 'redux/wallet/actions'\n\nimport { getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useBalance = () => {\n  const dispatch = useDispatch()\n  const { feeOptionType } = useSelector((state: RootState) => state.app)\n  const { wallet } = useSelector((state: RootState) => state.wallet)\n  const { inboundData } = useSelector((state: RootState) => state.midgard)\n\n  const reloadBalanceByChain = useCallback(\n    (chain: SupportedChain) => {\n      dispatch(walletActions.getWalletByChain(chain))\n    },\n    [dispatch],\n  )\n\n  const reloadAllBalance = useCallback(() => {\n    dispatch(walletActions.loadAllWallets())\n  }, [dispatch])\n\n  const getMaxBalance = useCallback(\n    (asset: Asset): Amount => {\n      if (!wallet?.[asset.L1Chain as SupportedChain]) {\n        // allow max amount for emulation if wallet is not connected\n        return Amount.fromAssetAmount(10 ** 8, 8)\n      }\n\n      // calculate inbound fee\n      const gasRate = getGasRateByFeeOption({\n        inboundData,\n        chain: asset.L1Chain,\n        feeOptionType,\n      })\n      const inboundFee = NetworkFee.getNetworkFeeByAsset({\n        asset,\n        gasRate,\n        direction: 'inbound',\n      })\n\n      const balance = getAssetBalance(asset, wallet).amount\n\n      /**\n       * if asset is used for gas, subtract the inbound gas fee from input amount\n       * else allow full amount\n       * Calc: max spendable amount = balance amount - 2 x gas fee(if send asset equals to gas asset)\n       */\n\n      const maxSpendableAmount = asset.isGasAsset()\n        ? balance.sub(inboundFee.mul(1.5).amount)\n        : balance\n\n      if (maxSpendableAmount.gt(0)) {\n        return maxSpendableAmount\n      }\n\n      return Amount.fromAssetAmount(0, asset.decimal)\n    },\n    [wallet, feeOptionType, inboundData],\n  )\n\n  return {\n    getMaxBalance,\n    reloadAllBalance,\n    reloadBalanceByChain,\n    wallet,\n  }\n}\n","import { FancyButton, Panel } from 'components'\nimport { transparentize } from 'polished'\nimport styled from 'styled-components'\nimport { palette } from 'styled-theme'\n\nexport const FromCard = styled.div`\n  background-image: linear-gradient(\n    120deg,\n    ${palette('background', 6)},\n    ${palette('background', 7)}\n  );\n  border-radius: 4px;\n  margin: 10px;\n  width: 90%;\n  display: flex;\n  padding: 15px;\n  flex-direction: column;\n  align-items: center;\n`\n\nexport const Container = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  background: ${({ theme }) =>\n    `${transparentize(0.4, theme.palette.background[5])}`};\n  width: 100%;\n  max-width: 500px;\n  margin: auto auto auto auto;\n  /* margin-left: auto;\n  margin-right: auto; */\n\n  padding: 15px 0px 15px 0px;\n  border-radius: 10px;\n  border: none;\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  width: 100%;\n`\nexport const GenerateButton = styled(FancyButton)`\n  width: 80%;\n`\n","import React, { useState, useEffect, useMemo, useCallback } from 'react'\n\nimport { CopyOutlined } from '@ant-design/icons'\nimport {\n  ConfirmModal,\n  ContentTitle,\n  CoreButton,\n  Helmet,\n  Input,\n  Tooltip,\n  Notification,\n  AffiliateInput,\n} from 'components'\nimport copy from 'copy-to-clipboard'\nimport { encode } from 'jwt-simple'\nimport { getWalletAddressByChain } from 'multichain-sdk'\n\nimport { ADDRESS } from 'multichain-sdk/config'\n\nimport { useBalance } from 'hooks/useBalance'\n\nimport { multichain } from 'services/multichain'\n\nimport { getAffiliates } from 'helpers/storage'\n\nimport * as Styled from './Affiliate.style'\n\nconst Affiliate = () => {\n  const [recipient, setRecipient] = useState('')\n  const [chainRecipient, setChainRecipient] = useState('')\n  const [link, setLink] = useState('')\n  const { wallet } = useBalance()\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n  const handleCopyAddress = useCallback(() => {\n    copy(link)\n\n    Notification({\n      type: 'info',\n      message: 'Address Copied',\n      duration: 3,\n      placement: 'bottomRight',\n    })\n  }, [link])\n  const getAffiliateLink = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <ContentTitle>Become An Affiliate</ContentTitle>\n        <Input disabled value={link} />\n        <Tooltip placement=\"top\" tooltip=\"Copy\">\n          <CoreButton onClick={handleCopyAddress}>\n            <CopyOutlined style={{ color: '#08c' }} />\n          </CoreButton>\n        </Tooltip>\n      </Styled.ConfirmModalContent>\n    )\n  }, [handleCopyAddress, link])\n  useEffect(() => {\n    if (wallet) {\n      const address = getWalletAddressByChain(wallet, 'THOR')\n      setRecipient(address || '')\n      setChainRecipient(address || '')\n    }\n  }, [wallet])\n  const handleSend = () => {\n    // get affiliates from local storage\n    const refs = getAffiliates()\n    // decrypt affiliate array\n    const affiliateAddresses: string[] = refs ?? []\n    affiliateAddresses.push(recipient)\n    const filteredAddresses = affiliateAddresses.filter((affiliateAddress) =>\n      multichain.validateAddress({\n        chain: 'THOR',\n        address: affiliateAddress,\n      }),\n    )\n    if (\n      multichain.validateAddress({\n        chain: 'THOR',\n        address: recipient,\n      })\n    ) {\n      // encrypt affilate array\n      const encodedQuery = encode(\n        JSON.stringify(filteredAddresses),\n        ADDRESS as string,\n      )\n      setLink(`https://crosschain.quest/#/?refs=${encodedQuery}`)\n      setVisibleConfirmModal(true)\n    } else {\n      Notification({\n        type: 'error',\n        message: 'Invalide Thorchain address',\n        description: 'Affiliate links must be valid thorchain addresses',\n        duration: 20,\n      })\n    }\n  }\n  const handleClose = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  return (\n    <Styled.Container>\n      <Helmet title=\"Sign up for \" content=\"Sign up for\" />\n      <Styled.FromCard>\n        <ContentTitle>Become An Affiliate</ContentTitle>\n        <AffiliateInput\n          title=\"address\"\n          address={recipient}\n          chain=\"THOR\"\n          chainAddr={chainRecipient}\n          onAddressChange={setRecipient}\n        />\n        <Styled.GenerateButton onClick={handleSend} error={false}>\n          Generate Link\n        </Styled.GenerateButton>\n      </Styled.FromCard>\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleClose}\n        inputAssets={[]}\n        onCancel={handleClose}\n      >\n        {visibleConfirmModal && getAffiliateLink}\n      </ConfirmModal>\n    </Styled.Container>\n  )\n}\n\nexport default Affiliate\n","import Affiliate from './Affiliate'\n\nexport default Affiliate\n"],"sourceRoot":""}